
lithome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08009400  08009400  0000a400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  0000b6d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009828  08009828  0000b6d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009828  08009828  0000a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009830  08009830  0000a830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006d0  20000000  08009834  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200006d0  08009f04  0000b6d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  08009f04  0000bb38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b6d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066ef  00000000  00000000  0000b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfc  00000000  00000000  00011de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  000139e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000585  00000000  00000000  00014170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184af  00000000  00000000  000146f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c65  00000000  00000000  0002cba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008718c  00000000  00000000  00035809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c0  00000000  00000000  000bc9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000bfc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200006d0 	.word	0x200006d0
 800012c:	00000000 	.word	0x00000000
 8000130:	080093e8 	.word	0x080093e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200006d4 	.word	0x200006d4
 800014c:	080093e8 	.word	0x080093e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <__aeabi_uldivmod>:
 8000e30:	b953      	cbnz	r3, 8000e48 <__aeabi_uldivmod+0x18>
 8000e32:	b94a      	cbnz	r2, 8000e48 <__aeabi_uldivmod+0x18>
 8000e34:	2900      	cmp	r1, #0
 8000e36:	bf08      	it	eq
 8000e38:	2800      	cmpeq	r0, #0
 8000e3a:	bf1c      	itt	ne
 8000e3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e40:	f04f 30ff 	movne.w	r0, #4294967295
 8000e44:	f000 b968 	b.w	8001118 <__aeabi_idiv0>
 8000e48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e50:	f000 f806 	bl	8000e60 <__udivmoddi4>
 8000e54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5c:	b004      	add	sp, #16
 8000e5e:	4770      	bx	lr

08000e60 <__udivmoddi4>:
 8000e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e64:	9d08      	ldr	r5, [sp, #32]
 8000e66:	460c      	mov	r4, r1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d14e      	bne.n	8000f0a <__udivmoddi4+0xaa>
 8000e6c:	4694      	mov	ip, r2
 8000e6e:	458c      	cmp	ip, r1
 8000e70:	4686      	mov	lr, r0
 8000e72:	fab2 f282 	clz	r2, r2
 8000e76:	d962      	bls.n	8000f3e <__udivmoddi4+0xde>
 8000e78:	b14a      	cbz	r2, 8000e8e <__udivmoddi4+0x2e>
 8000e7a:	f1c2 0320 	rsb	r3, r2, #32
 8000e7e:	4091      	lsls	r1, r2
 8000e80:	fa20 f303 	lsr.w	r3, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	4319      	orrs	r1, r3
 8000e8a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e96:	fb07 1114 	mls	r1, r7, r4, r1
 8000e9a:	fa1f f68c 	uxth.w	r6, ip
 8000e9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ea2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea6:	fb04 f106 	mul.w	r1, r4, r6
 8000eaa:	4299      	cmp	r1, r3
 8000eac:	d90a      	bls.n	8000ec4 <__udivmoddi4+0x64>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000eb6:	f080 8110 	bcs.w	80010da <__udivmoddi4+0x27a>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 810d 	bls.w	80010da <__udivmoddi4+0x27a>
 8000ec0:	3c02      	subs	r4, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a59      	subs	r1, r3, r1
 8000ec6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eca:	fb07 1110 	mls	r1, r7, r0, r1
 8000ece:	fb00 f606 	mul.w	r6, r0, r6
 8000ed2:	fa1f f38e 	uxth.w	r3, lr
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	429e      	cmp	r6, r3
 8000edc:	d90a      	bls.n	8000ef4 <__udivmoddi4+0x94>
 8000ede:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee6:	f080 80fa 	bcs.w	80010de <__udivmoddi4+0x27e>
 8000eea:	429e      	cmp	r6, r3
 8000eec:	f240 80f7 	bls.w	80010de <__udivmoddi4+0x27e>
 8000ef0:	4463      	add	r3, ip
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	1b9b      	subs	r3, r3, r6
 8000ef8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000efc:	b11d      	cbz	r5, 8000f06 <__udivmoddi4+0xa6>
 8000efe:	40d3      	lsrs	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	e9c5 3200 	strd	r3, r2, [r5]
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d905      	bls.n	8000f1a <__udivmoddi4+0xba>
 8000f0e:	b10d      	cbz	r5, 8000f14 <__udivmoddi4+0xb4>
 8000f10:	e9c5 0100 	strd	r0, r1, [r5]
 8000f14:	2100      	movs	r1, #0
 8000f16:	4608      	mov	r0, r1
 8000f18:	e7f5      	b.n	8000f06 <__udivmoddi4+0xa6>
 8000f1a:	fab3 f183 	clz	r1, r3
 8000f1e:	2900      	cmp	r1, #0
 8000f20:	d146      	bne.n	8000fb0 <__udivmoddi4+0x150>
 8000f22:	42a3      	cmp	r3, r4
 8000f24:	d302      	bcc.n	8000f2c <__udivmoddi4+0xcc>
 8000f26:	4290      	cmp	r0, r2
 8000f28:	f0c0 80ee 	bcc.w	8001108 <__udivmoddi4+0x2a8>
 8000f2c:	1a86      	subs	r6, r0, r2
 8000f2e:	eb64 0303 	sbc.w	r3, r4, r3
 8000f32:	2001      	movs	r0, #1
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d0e6      	beq.n	8000f06 <__udivmoddi4+0xa6>
 8000f38:	e9c5 6300 	strd	r6, r3, [r5]
 8000f3c:	e7e3      	b.n	8000f06 <__udivmoddi4+0xa6>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	f040 808f 	bne.w	8001062 <__udivmoddi4+0x202>
 8000f44:	eba1 040c 	sub.w	r4, r1, ip
 8000f48:	2101      	movs	r1, #1
 8000f4a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f4e:	fa1f f78c 	uxth.w	r7, ip
 8000f52:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f56:	fb08 4416 	mls	r4, r8, r6, r4
 8000f5a:	fb07 f006 	mul.w	r0, r7, r6
 8000f5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x11c>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f72:	d202      	bcs.n	8000f7a <__udivmoddi4+0x11a>
 8000f74:	4298      	cmp	r0, r3
 8000f76:	f200 80cb 	bhi.w	8001110 <__udivmoddi4+0x2b0>
 8000f7a:	4626      	mov	r6, r4
 8000f7c:	1a1c      	subs	r4, r3, r0
 8000f7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f82:	fb08 4410 	mls	r4, r8, r0, r4
 8000f86:	fb00 f707 	mul.w	r7, r0, r7
 8000f8a:	fa1f f38e 	uxth.w	r3, lr
 8000f8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f92:	429f      	cmp	r7, r3
 8000f94:	d908      	bls.n	8000fa8 <__udivmoddi4+0x148>
 8000f96:	eb1c 0303 	adds.w	r3, ip, r3
 8000f9a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9e:	d202      	bcs.n	8000fa6 <__udivmoddi4+0x146>
 8000fa0:	429f      	cmp	r7, r3
 8000fa2:	f200 80ae 	bhi.w	8001102 <__udivmoddi4+0x2a2>
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	1bdb      	subs	r3, r3, r7
 8000faa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fae:	e7a5      	b.n	8000efc <__udivmoddi4+0x9c>
 8000fb0:	f1c1 0720 	rsb	r7, r1, #32
 8000fb4:	408b      	lsls	r3, r1
 8000fb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fbe:	fa24 f607 	lsr.w	r6, r4, r7
 8000fc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fc6:	fbb6 f8f9 	udiv	r8, r6, r9
 8000fca:	fa1f fe8c 	uxth.w	lr, ip
 8000fce:	fb09 6618 	mls	r6, r9, r8, r6
 8000fd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000fd6:	408c      	lsls	r4, r1
 8000fd8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000fdc:	fb08 f00e 	mul.w	r0, r8, lr
 8000fe0:	431c      	orrs	r4, r3
 8000fe2:	0c23      	lsrs	r3, r4, #16
 8000fe4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	fa02 f201 	lsl.w	r2, r2, r1
 8000fee:	d90a      	bls.n	8001006 <__udivmoddi4+0x1a6>
 8000ff0:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff4:	f108 36ff 	add.w	r6, r8, #4294967295
 8000ff8:	f080 8081 	bcs.w	80010fe <__udivmoddi4+0x29e>
 8000ffc:	4298      	cmp	r0, r3
 8000ffe:	d97e      	bls.n	80010fe <__udivmoddi4+0x29e>
 8001000:	f1a8 0802 	sub.w	r8, r8, #2
 8001004:	4463      	add	r3, ip
 8001006:	1a1e      	subs	r6, r3, r0
 8001008:	fbb6 f3f9 	udiv	r3, r6, r9
 800100c:	fb09 6613 	mls	r6, r9, r3, r6
 8001010:	fb03 fe0e 	mul.w	lr, r3, lr
 8001014:	b2a4      	uxth	r4, r4
 8001016:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800101a:	45a6      	cmp	lr, r4
 800101c:	d908      	bls.n	8001030 <__udivmoddi4+0x1d0>
 800101e:	eb1c 0404 	adds.w	r4, ip, r4
 8001022:	f103 30ff 	add.w	r0, r3, #4294967295
 8001026:	d266      	bcs.n	80010f6 <__udivmoddi4+0x296>
 8001028:	45a6      	cmp	lr, r4
 800102a:	d964      	bls.n	80010f6 <__udivmoddi4+0x296>
 800102c:	3b02      	subs	r3, #2
 800102e:	4464      	add	r4, ip
 8001030:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001034:	fba0 8302 	umull	r8, r3, r0, r2
 8001038:	eba4 040e 	sub.w	r4, r4, lr
 800103c:	429c      	cmp	r4, r3
 800103e:	46c6      	mov	lr, r8
 8001040:	461e      	mov	r6, r3
 8001042:	d350      	bcc.n	80010e6 <__udivmoddi4+0x286>
 8001044:	d04d      	beq.n	80010e2 <__udivmoddi4+0x282>
 8001046:	b155      	cbz	r5, 800105e <__udivmoddi4+0x1fe>
 8001048:	ebba 030e 	subs.w	r3, sl, lr
 800104c:	eb64 0406 	sbc.w	r4, r4, r6
 8001050:	fa04 f707 	lsl.w	r7, r4, r7
 8001054:	40cb      	lsrs	r3, r1
 8001056:	431f      	orrs	r7, r3
 8001058:	40cc      	lsrs	r4, r1
 800105a:	e9c5 7400 	strd	r7, r4, [r5]
 800105e:	2100      	movs	r1, #0
 8001060:	e751      	b.n	8000f06 <__udivmoddi4+0xa6>
 8001062:	fa0c fc02 	lsl.w	ip, ip, r2
 8001066:	f1c2 0320 	rsb	r3, r2, #32
 800106a:	40d9      	lsrs	r1, r3
 800106c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001070:	fa20 f303 	lsr.w	r3, r0, r3
 8001074:	fa00 fe02 	lsl.w	lr, r0, r2
 8001078:	fbb1 f0f8 	udiv	r0, r1, r8
 800107c:	fb08 1110 	mls	r1, r8, r0, r1
 8001080:	4094      	lsls	r4, r2
 8001082:	431c      	orrs	r4, r3
 8001084:	fa1f f78c 	uxth.w	r7, ip
 8001088:	0c23      	lsrs	r3, r4, #16
 800108a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800108e:	fb00 f107 	mul.w	r1, r0, r7
 8001092:	4299      	cmp	r1, r3
 8001094:	d908      	bls.n	80010a8 <__udivmoddi4+0x248>
 8001096:	eb1c 0303 	adds.w	r3, ip, r3
 800109a:	f100 36ff 	add.w	r6, r0, #4294967295
 800109e:	d22c      	bcs.n	80010fa <__udivmoddi4+0x29a>
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d92a      	bls.n	80010fa <__udivmoddi4+0x29a>
 80010a4:	3802      	subs	r0, #2
 80010a6:	4463      	add	r3, ip
 80010a8:	1a5b      	subs	r3, r3, r1
 80010aa:	fbb3 f1f8 	udiv	r1, r3, r8
 80010ae:	fb08 3311 	mls	r3, r8, r1, r3
 80010b2:	b2a4      	uxth	r4, r4
 80010b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010b8:	fb01 f307 	mul.w	r3, r1, r7
 80010bc:	42a3      	cmp	r3, r4
 80010be:	d908      	bls.n	80010d2 <__udivmoddi4+0x272>
 80010c0:	eb1c 0404 	adds.w	r4, ip, r4
 80010c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80010c8:	d213      	bcs.n	80010f2 <__udivmoddi4+0x292>
 80010ca:	42a3      	cmp	r3, r4
 80010cc:	d911      	bls.n	80010f2 <__udivmoddi4+0x292>
 80010ce:	3902      	subs	r1, #2
 80010d0:	4464      	add	r4, ip
 80010d2:	1ae4      	subs	r4, r4, r3
 80010d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010d8:	e73b      	b.n	8000f52 <__udivmoddi4+0xf2>
 80010da:	4604      	mov	r4, r0
 80010dc:	e6f2      	b.n	8000ec4 <__udivmoddi4+0x64>
 80010de:	4608      	mov	r0, r1
 80010e0:	e708      	b.n	8000ef4 <__udivmoddi4+0x94>
 80010e2:	45c2      	cmp	sl, r8
 80010e4:	d2af      	bcs.n	8001046 <__udivmoddi4+0x1e6>
 80010e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80010ea:	eb63 060c 	sbc.w	r6, r3, ip
 80010ee:	3801      	subs	r0, #1
 80010f0:	e7a9      	b.n	8001046 <__udivmoddi4+0x1e6>
 80010f2:	4631      	mov	r1, r6
 80010f4:	e7ed      	b.n	80010d2 <__udivmoddi4+0x272>
 80010f6:	4603      	mov	r3, r0
 80010f8:	e79a      	b.n	8001030 <__udivmoddi4+0x1d0>
 80010fa:	4630      	mov	r0, r6
 80010fc:	e7d4      	b.n	80010a8 <__udivmoddi4+0x248>
 80010fe:	46b0      	mov	r8, r6
 8001100:	e781      	b.n	8001006 <__udivmoddi4+0x1a6>
 8001102:	4463      	add	r3, ip
 8001104:	3802      	subs	r0, #2
 8001106:	e74f      	b.n	8000fa8 <__udivmoddi4+0x148>
 8001108:	4606      	mov	r6, r0
 800110a:	4623      	mov	r3, r4
 800110c:	4608      	mov	r0, r1
 800110e:	e711      	b.n	8000f34 <__udivmoddi4+0xd4>
 8001110:	3e02      	subs	r6, #2
 8001112:	4463      	add	r3, ip
 8001114:	e732      	b.n	8000f7c <__udivmoddi4+0x11c>
 8001116:	bf00      	nop

08001118 <__aeabi_idiv0>:
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <LCD_sendCmd>:
#include "../Inc/lcd.h"
#include "stdio.h"
#include "stdarg.h"

void LCD_sendCmd( uint8_t data) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <LCD_sendCmd+0x24>)
 800112c:	f001 ff8d 	bl	800304a <HAL_GPIO_WritePin>
    LCD_sendByte(data);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f85e 	bl	80011f4 <LCD_sendByte>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40010c00 	.word	0x40010c00

08001144 <LCD_sendChar>:

void LCD_sendChar(uint8_t data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2180      	movs	r1, #128	@ 0x80
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <LCD_sendChar+0x24>)
 8001154:	f001 ff79 	bl	800304a <HAL_GPIO_WritePin>
    LCD_sendByte(data);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f84a 	bl	80011f4 <LCD_sendByte>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40010c00 	.word	0x40010c00

0800116c <LCD_sendNibble>:

void LCD_sendNibble(uint8_t data) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	2108      	movs	r1, #8
 8001182:	481b      	ldr	r0, [pc, #108]	@ (80011f0 <LCD_sendNibble+0x84>)
 8001184:	f001 ff61 	bl	800304a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	105b      	asrs	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	2110      	movs	r1, #16
 8001198:	4815      	ldr	r0, [pc, #84]	@ (80011f0 <LCD_sendNibble+0x84>)
 800119a:	f001 ff56 	bl	800304a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	109b      	asrs	r3, r3, #2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	2120      	movs	r1, #32
 80011ae:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <LCD_sendNibble+0x84>)
 80011b0:	f001 ff4b 	bl	800304a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	10db      	asrs	r3, r3, #3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	2140      	movs	r1, #64	@ 0x40
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <LCD_sendNibble+0x84>)
 80011c6:	f001 ff40 	bl	800304a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <LCD_sendNibble+0x84>)
 80011d2:	f001 ff3a 	bl	800304a <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f000 ffbc 	bl	8002154 <HAL_Delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011e2:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <LCD_sendNibble+0x84>)
 80011e4:	f001 ff31 	bl	800304a <HAL_GPIO_WritePin>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010c00 	.word	0x40010c00

080011f4 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
    LCD_sendNibble(data >> 4); // High order bit
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffb1 	bl	800116c <LCD_sendNibble>
    LCD_sendNibble(data); // Low order bit
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ffad 	bl	800116c <LCD_sendNibble>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <LCD_puts>:

void LCD_puts(char * data) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
    while (data[0] != '\0') {
 8001222:	e007      	b.n	8001234 <LCD_puts+0x1a>
        LCD_sendChar(data[0]);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff8b 	bl	8001144 <LCD_sendChar>
        data++;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3301      	adds	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
    while (data[0] != '\0') {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f3      	bne.n	8001224 <LCD_puts+0xa>
    }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <LCD_init>:

void LCD_init(){
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
    LCD_sendCmd(0x33); // Initialize controller
 800124a:	2033      	movs	r0, #51	@ 0x33
 800124c:	f7ff ff66 	bl	800111c <LCD_sendCmd>
    LCD_sendCmd(0x32); // Set 4-bit mode
 8001250:	2032      	movs	r0, #50	@ 0x32
 8001252:	f7ff ff63 	bl	800111c <LCD_sendCmd>
    LCD_sendCmd(0x28); // 4 bit, 2 line, 5x7
 8001256:	2028      	movs	r0, #40	@ 0x28
 8001258:	f7ff ff60 	bl	800111c <LCD_sendCmd>
    LCD_sendCmd(0x06); // Cursor direction -> right
 800125c:	2006      	movs	r0, #6
 800125e:	f7ff ff5d 	bl	800111c <LCD_sendCmd>
    LCD_sendCmd(0x0C); // Display on, cursor off
 8001262:	200c      	movs	r0, #12
 8001264:	f7ff ff5a 	bl	800111c <LCD_sendCmd>
    LCD_sendCmd(0x01); // Clear display
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff ff57 	bl	800111c <LCD_sendCmd>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}

08001272 <LCD_clear>:

void LCD_clear(){
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
    LCD_sendCmd(0x01);
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff ff50 	bl	800111c <LCD_sendCmd>
    HAL_Delay(2);
 800127c:	2002      	movs	r0, #2
 800127e:	f000 ff69 	bl	8002154 <HAL_Delay>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}

08001286 <LCD_setCursor>:

void LCD_setCursor(char row, char col){
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	460a      	mov	r2, r1
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	4613      	mov	r3, r2
 8001294:	71bb      	strb	r3, [r7, #6]
	char val = (row == 0) ? 0x00: 0x40;
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <LCD_setCursor+0x1a>
 800129c:	2300      	movs	r3, #0
 800129e:	e000      	b.n	80012a2 <LCD_setCursor+0x1c>
 80012a0:	2340      	movs	r3, #64	@ 0x40
 80012a2:	73fb      	strb	r3, [r7, #15]
	val += col;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	4413      	add	r3, r2
 80012aa:	73fb      	strb	r3, [r7, #15]
	LCD_sendCmd(LCD_SETDDRAMADDR | val );
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff31 	bl	800111c <LCD_sendCmd>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <LCD_printf>:
		LCD_sendCmd(LCD_ENTRYMODESET | LCD_ENTRYSHIFTINCREMENT);
	}
}

int LCD_printf(const char* fmt,...)
{
 80012c4:	b40f      	push	{r0, r1, r2, r3}
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
	int done;
	va_list args;
	static char buffer[256];
	va_start(args,fmt);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	603b      	str	r3, [r7, #0]

	done = vsnprintf(buffer,256,fmt,args);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <LCD_printf+0x34>)
 80012dc:	f002 fd7e 	bl	8003ddc <vsnprintf>
 80012e0:	6078      	str	r0, [r7, #4]

	LCD_puts(buffer);
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <LCD_printf+0x34>)
 80012e4:	f7ff ff99 	bl	800121a <LCD_puts>

	va_end(args);
	return done;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012f4:	b004      	add	sp, #16
 80012f6:	4770      	bx	lr
 80012f8:	200006ec 	.word	0x200006ec

080012fc <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t t) {
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
	volatile unsigned long l = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
	for (uint16_t i = 0; i < t; i++) {
 800130a:	2300      	movs	r3, #0
 800130c:	81fb      	strh	r3, [r7, #14]
 800130e:	e00d      	b.n	800132c <delay+0x30>
		for (l = 0; l < 6000; l++)
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	e002      	b.n	800131c <delay+0x20>
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3301      	adds	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001322:	4293      	cmp	r3, r2
 8001324:	d9f7      	bls.n	8001316 <delay+0x1a>
	for (uint16_t i = 0; i < t; i++) {
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	3301      	adds	r3, #1
 800132a:	81fb      	strh	r3, [r7, #14]
 800132c:	89fa      	ldrh	r2, [r7, #14]
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	429a      	cmp	r2, r3
 8001332:	d3ed      	bcc.n	8001310 <delay+0x14>
			;
	}
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <usart1_recByte>:

uint8_t usart1_recByte() {
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	while ((USART1->SR & (1 << 5)) == 0)
 8001344:	bf00      	nop
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <usart1_recByte+0x20>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f9      	beq.n	8001346 <usart1_recByte+0x6>
		;
	return USART1->DR;
 8001352:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <usart1_recByte+0x20>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	b2db      	uxtb	r3, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40013800 	.word	0x40013800

08001364 <USART1_Init>:

void USART1_Init(void) {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 2) | (1 << 14); // Bật clock cho GPIOA và USART1
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <USART1_Init+0x68>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <USART1_Init+0x68>)
 800136e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6193      	str	r3, [r2, #24]

	/* Cấu hình chân TX (PA9) và RX (PA10) */
	GPIOA->CRH &= ~(0xFF << 4);  // Xóa cấu hình cũ
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <USART1_Init+0x6c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a14      	ldr	r2, [pc, #80]	@ (80013d0 <USART1_Init+0x6c>)
 800137e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001382:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x0B << 4);    // PA9: AF Push-Pull, tốc độ cao
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <USART1_Init+0x6c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <USART1_Init+0x6c>)
 800138a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800138e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x04 << 8);    // PA10: Input pull-up
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <USART1_Init+0x6c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <USART1_Init+0x6c>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139a:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1 << 10);      // Bật pull-up cho PA10
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <USART1_Init+0x6c>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	@ (80013d0 <USART1_Init+0x6c>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013a6:	60d3      	str	r3, [r2, #12]

	/* Cấu hình USART1 */
	USART1->CR1 &= ~(1 << 13);   // Tắt USART1 trước khi cấu hình
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <USART1_Init+0x70>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <USART1_Init+0x70>)
 80013ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80013b2:	60d3      	str	r3, [r2, #12]
	USART1->BRR = 7500;          // Baudrate = 72MHz / 9600
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <USART1_Init+0x70>)
 80013b6:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 80013ba:	609a      	str	r2, [r3, #8]
	USART1->CR1 = (1 << 2) | (1 << 3) | (1 << 13); // Bật RX, TX và USART1
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <USART1_Init+0x70>)
 80013be:	f242 020c 	movw	r2, #8204	@ 0x200c
 80013c2:	60da      	str	r2, [r3, #12]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40013800 	.word	0x40013800

080013d8 <time_init_kitchen_door>:

void time_init_kitchen_door() {
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	// Cấu hình clock cho GPIOA và TIM2
	RCC->APB1ENR |= (1 << 0);
 80013dc:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <time_init_kitchen_door+0xa0>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	4a25      	ldr	r2, [pc, #148]	@ (8001478 <time_init_kitchen_door+0xa0>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= (1 << 2);
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <time_init_kitchen_door+0xa0>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a22      	ldr	r2, [pc, #136]	@ (8001478 <time_init_kitchen_door+0xa0>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]

	TIM2->PSC = 1440 - 1;
 80013f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f8:	f240 529f 	movw	r2, #1439	@ 0x59f
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000 - 1;
 80013fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001402:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Cấu hình PA0 là alter function
	GPIOA->CRL &= ~(0xF << (4 * 0));
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <time_init_kitchen_door+0xa4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <time_init_kitchen_door+0xa4>)
 800140e:	f023 030f 	bic.w	r3, r3, #15
 8001412:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0xB << (4 * 0));
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <time_init_kitchen_door+0xa4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a18      	ldr	r2, [pc, #96]	@ (800147c <time_init_kitchen_door+0xa4>)
 800141a:	f043 030b 	orr.w	r3, r3, #11
 800141e:	6013      	str	r3, [r2, #0]

	TIM2->CCMR1 &= ~(7 << 4);
 8001420:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800142e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (6 << 4);
 8001430:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800143a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800143e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1 << 3);
 8001440:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= (1 << 0);
 8001450:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= (1 << 0); // bật timer
 8001460:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800

08001480 <time_init_main_door>:

void time_init_main_door() {
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1 << 0);
 8001484:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <time_init_main_door+0xb0>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	4a29      	ldr	r2, [pc, #164]	@ (8001530 <time_init_main_door+0xb0>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= (1 << 2);
 8001490:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <time_init_main_door+0xb0>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a26      	ldr	r2, [pc, #152]	@ (8001530 <time_init_main_door+0xb0>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6193      	str	r3, [r2, #24]

	TIM2->PSC = 1440 - 1;
 800149c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014a0:	f240 529f 	movw	r2, #1439	@ 0x59f
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000 - 1;
 80014a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c

	GPIOA->CRL &= ~(0xF << (4 * 1));
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <time_init_main_door+0xb4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001534 <time_init_main_door+0xb4>)
 80014b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0xB << (4 * 1));
 80014bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <time_init_main_door+0xb4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <time_init_main_door+0xb4>)
 80014c2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80014c6:	6013      	str	r3, [r2, #0]

	TIM2->CCMR1 &= ~(7 << 12);
 80014c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80014d6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (6 << 12);
 80014d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014e2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80014e6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1 << 11);
 80014e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014f6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~(3 << 8);
 80014f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001506:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= (1 << 4);
 8001508:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= (1 << 0); // bật timer
 8001518:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010800 	.word	0x40010800

08001538 <time_init_bedroom_door>:

void time_init_bedroom_door() {
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1 << 0);
 800153c:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <time_init_bedroom_door+0xb0>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	4a29      	ldr	r2, [pc, #164]	@ (80015e8 <time_init_bedroom_door+0xb0>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= (1 << 2);
 8001548:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <time_init_bedroom_door+0xb0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a26      	ldr	r2, [pc, #152]	@ (80015e8 <time_init_bedroom_door+0xb0>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6193      	str	r3, [r2, #24]

	TIM2->PSC = 1440 - 1;
 8001554:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001558:	f240 529f 	movw	r2, #1439	@ 0x59f
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000 - 1;
 800155e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001562:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c

	GPIOA->CRL &= ~(0xF << (4 * 2));
 8001568:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <time_init_bedroom_door+0xb4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1f      	ldr	r2, [pc, #124]	@ (80015ec <time_init_bedroom_door+0xb4>)
 800156e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001572:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0xB << (4 * 2));
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <time_init_bedroom_door+0xb4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <time_init_bedroom_door+0xb4>)
 800157a:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800157e:	6013      	str	r3, [r2, #0]

	TIM2->CCMR2 &= ~(7 << 4);
 8001580:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800158a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800158e:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= (6 << 4);
 8001590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800159e:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= (1 << 3);
 80015a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~(3 << 0);
 80015b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ba:	f023 0303 	bic.w	r3, r3, #3
 80015be:	61d3      	str	r3, [r2, #28]

	TIM2->CCER |= (1 << 8);
 80015c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ce:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= (1 << 0);
 80015d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010800 	.word	0x40010800

080015f0 <kitchen_door_on>:

void kitchen_door_on() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	time_init_kitchen_door();
 80015f4:	f7ff fef0 	bl	80013d8 <time_init_kitchen_door>
	TIM2->CCR1 = 80;
 80015f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015fc:	2250      	movs	r2, #80	@ 0x50
 80015fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <kitchen_door_of>:

void kitchen_door_of() {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	time_init_kitchen_door();
 8001608:	f7ff fee6 	bl	80013d8 <time_init_kitchen_door>
	TIM2->CCR1 = 30;
 800160c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001610:	221e      	movs	r2, #30
 8001612:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <main_door_on>:

void main_door_on() {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	time_init_main_door();
 800161c:	f7ff ff30 	bl	8001480 <time_init_main_door>
	TIM2->CCR2 = 30;
 8001620:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001624:	221e      	movs	r2, #30
 8001626:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <main_door_of>:

void main_door_of() {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	time_init_main_door();
 8001630:	f7ff ff26 	bl	8001480 <time_init_main_door>
	TIM2->CCR2 = 80;
 8001634:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001638:	2250      	movs	r2, #80	@ 0x50
 800163a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <bedroom_door_on>:

void bedroom_door_on() {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	time_init_bedroom_door();
 8001644:	f7ff ff78 	bl	8001538 <time_init_bedroom_door>
	TIM2->CCR3 = 30;
 8001648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800164c:	221e      	movs	r2, #30
 800164e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <bedroom_door_of>:

void bedroom_door_of() {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	time_init_bedroom_door();
 8001658:	f7ff ff6e 	bl	8001538 <time_init_bedroom_door>
	TIM2->CCR3 = 80;
 800165c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001660:	2250      	movs	r2, #80	@ 0x50
 8001662:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <light_living_on>:

void light_living_on() {
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 0);
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <light_living_on+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <light_living_on+0x18>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	40010c00 	.word	0x40010c00

08001684 <light_living_of>:

void light_living_of() {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(1 << 0);
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <light_living_of+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a03      	ldr	r2, [pc, #12]	@ (800169c <light_living_of+0x18>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	40010c00 	.word	0x40010c00

080016a0 <light_bedroom_on>:

void light_bedroom_on() {
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 9);
 80016a4:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <light_bedroom_on+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4a03      	ldr	r2, [pc, #12]	@ (80016b8 <light_bedroom_on+0x18>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40010c00 	.word	0x40010c00

080016bc <light_bedroom_of>:

void light_bedroom_of() {
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(1 << 9);
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <light_bedroom_of+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a03      	ldr	r2, [pc, #12]	@ (80016d4 <light_bedroom_of+0x18>)
 80016c6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40010c00 	.word	0x40010c00

080016d8 <light_kitchen_on>:

void light_kitchen_on() {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 10);
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <light_kitchen_on+0x18>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4a03      	ldr	r2, [pc, #12]	@ (80016f0 <light_kitchen_on+0x18>)
 80016e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40010c00 	.word	0x40010c00

080016f4 <light_kitchen_of>:

void light_kitchen_of() {
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(1 << 10);
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <light_kitchen_of+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a03      	ldr	r2, [pc, #12]	@ (800170c <light_kitchen_of+0x18>)
 80016fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40010c00 	.word	0x40010c00

08001710 <light_bathroom_on>:

void light_bathroom_on() {
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 11);
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <light_bathroom_on+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4a03      	ldr	r2, [pc, #12]	@ (8001728 <light_bathroom_on+0x18>)
 800171a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40010c00 	.word	0x40010c00

0800172c <light_bathroom_of>:

void light_bathroom_of() {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(1 << 11);
 8001730:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <light_bathroom_of+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4a03      	ldr	r2, [pc, #12]	@ (8001744 <light_bathroom_of+0x18>)
 8001736:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40010c00 	.word	0x40010c00

08001748 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	adc1_value = HAL_ADC_GetValue(&hadc1);
 8001750:	485d      	ldr	r0, [pc, #372]	@ (80018c8 <HAL_ADC_ConvCpltCallback+0x180>)
 8001752:	f000 feb1 	bl	80024b8 <HAL_ADC_GetValue>
 8001756:	4603      	mov	r3, r0
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa9b 	bl	8000c94 <__aeabi_ui2f>
 800175e:	4603      	mov	r3, r0
 8001760:	4a5a      	ldr	r2, [pc, #360]	@ (80018cc <HAL_ADC_ConvCpltCallback+0x184>)
 8001762:	6013      	str	r3, [r2, #0]
	float voltage = (adc1_value / 4096.0) * 5.0;
 8001764:	4b59      	ldr	r3, [pc, #356]	@ (80018cc <HAL_ADC_ConvCpltCallback+0x184>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fe5d 	bl	8000428 <__aeabi_f2d>
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b57      	ldr	r3, [pc, #348]	@ (80018d0 <HAL_ADC_ConvCpltCallback+0x188>)
 8001774:	f7fe ffda 	bl	800072c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001786:	f7fe fea7 	bl	80004d8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f979 	bl	8000a88 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	617b      	str	r3, [r7, #20]
	float RS = ((5.0 - voltage) * 10.0) / voltage;
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7fe fe44 	bl	8000428 <__aeabi_f2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	494a      	ldr	r1, [pc, #296]	@ (80018d4 <HAL_ADC_ConvCpltCallback+0x18c>)
 80017aa:	f7fe fcdd 	bl	8000168 <__aeabi_dsub>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b47      	ldr	r3, [pc, #284]	@ (80018d8 <HAL_ADC_ConvCpltCallback+0x190>)
 80017bc:	f7fe fe8c 	bl	80004d8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4614      	mov	r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	6978      	ldr	r0, [r7, #20]
 80017ca:	f7fe fe2d 	bl	8000428 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4620      	mov	r0, r4
 80017d4:	4629      	mov	r1, r5
 80017d6:	f7fe ffa9 	bl	800072c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f951 	bl	8000a88 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	613b      	str	r3, [r7, #16]
	float ratio = RS / 76.63;
 80017ea:	6938      	ldr	r0, [r7, #16]
 80017ec:	f7fe fe1c 	bl	8000428 <__aeabi_f2d>
 80017f0:	a32f      	add	r3, pc, #188	@ (adr r3, 80018b0 <HAL_ADC_ConvCpltCallback+0x168>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe ff99 	bl	800072c <__aeabi_ddiv>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f941 	bl	8000a88 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	60fb      	str	r3, [r7, #12]
	ppm = 105.19 * pow(ratio, -2.773);
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7fe fe0c 	bl	8000428 <__aeabi_f2d>
 8001810:	a329      	add	r3, pc, #164	@ (adr r3, 80018b8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f006 fed9 	bl	80085cc <pow>
 800181a:	a329      	add	r3, pc, #164	@ (adr r3, 80018c0 <HAL_ADC_ConvCpltCallback+0x178>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe fe5a 	bl	80004d8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f92c 	bl	8000a88 <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	4a2a      	ldr	r2, [pc, #168]	@ (80018dc <HAL_ADC_ConvCpltCallback+0x194>)
 8001834:	6013      	str	r3, [r2, #0]
	if (ppm > 1200) {
 8001836:	4b29      	ldr	r3, [pc, #164]	@ (80018dc <HAL_ADC_ConvCpltCallback+0x194>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4929      	ldr	r1, [pc, #164]	@ (80018e0 <HAL_ADC_ConvCpltCallback+0x198>)
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff faed 	bl	8000e1c <__aeabi_fcmpgt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d024      	beq.n	8001892 <HAL_ADC_ConvCpltCallback+0x14a>
		GPIOB->BSRR |= (1 << 12);
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_ADC_ConvCpltCallback+0x19c>)
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	4a25      	ldr	r2, [pc, #148]	@ (80018e4 <HAL_ADC_ConvCpltCallback+0x19c>)
 800184e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001852:	6113      	str	r3, [r2, #16]
		delay(100);
 8001854:	2064      	movs	r0, #100	@ 0x64
 8001856:	f7ff fd51 	bl	80012fc <delay>
		GPIOB->BSRR |= (1 << 28);
 800185a:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <HAL_ADC_ConvCpltCallback+0x19c>)
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	4a21      	ldr	r2, [pc, #132]	@ (80018e4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	6113      	str	r3, [r2, #16]
		delay(100);
 8001866:	2064      	movs	r0, #100	@ 0x64
 8001868:	f7ff fd48 	bl	80012fc <delay>
		time_init_kitchen_door();
 800186c:	f7ff fdb4 	bl	80013d8 <time_init_kitchen_door>
		TIM2->CCR1 = 80;
 8001870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001874:	2250      	movs	r2, #80	@ 0x50
 8001876:	635a      	str	r2, [r3, #52]	@ 0x34
		time_init_main_door();
 8001878:	f7ff fe02 	bl	8001480 <time_init_main_door>
		TIM2->CCR2 = 30;
 800187c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001880:	221e      	movs	r2, #30
 8001882:	639a      	str	r2, [r3, #56]	@ 0x38
		time_init_bedroom_door();
 8001884:	f7ff fe58 	bl	8001538 <time_init_bedroom_door>
		TIM2->CCR3 = 30;
 8001888:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800188c:	221e      	movs	r2, #30
 800188e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001890:	e005      	b.n	800189e <HAL_ADC_ConvCpltCallback+0x156>
	} else {
		GPIOB->BSRR |= (1 << 28);
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	4a13      	ldr	r2, [pc, #76]	@ (80018e4 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189c:	6113      	str	r3, [r2, #16]
	}
	HAL_ADC_Start_IT(&hadc1);
 800189e:	480a      	ldr	r0, [pc, #40]	@ (80018c8 <HAL_ADC_ConvCpltCallback+0x180>)
 80018a0:	f000 fd54 	bl	800234c <HAL_ADC_Start_IT>
}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bdb0      	pop	{r4, r5, r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	eb851eb8 	.word	0xeb851eb8
 80018b4:	40532851 	.word	0x40532851
 80018b8:	9fbe76c9 	.word	0x9fbe76c9
 80018bc:	c0062f1a 	.word	0xc0062f1a
 80018c0:	f5c28f5c 	.word	0xf5c28f5c
 80018c4:	405a4c28 	.word	0x405a4c28
 80018c8:	200007ec 	.word	0x200007ec
 80018cc:	2000081c 	.word	0x2000081c
 80018d0:	40b00000 	.word	0x40b00000
 80018d4:	40140000 	.word	0x40140000
 80018d8:	40240000 	.word	0x40240000
 80018dc:	20000820 	.word	0x20000820
 80018e0:	44960000 	.word	0x44960000
 80018e4:	40010c00 	.word	0x40010c00

080018e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7) {
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	2b80      	cmp	r3, #128	@ 0x80
 80018f6:	d113      	bne.n	8001920 <HAL_GPIO_EXTI_Callback+0x38>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) {
 80018f8:	2180      	movs	r1, #128	@ 0x80
 80018fa:	480b      	ldr	r0, [pc, #44]	@ (8001928 <HAL_GPIO_EXTI_Callback+0x40>)
 80018fc:	f001 fb8e 	bl	800301c <HAL_GPIO_ReadPin>
 8001900:	4603      	mov	r3, r0
 8001902:	2b01      	cmp	r3, #1
 8001904:	d106      	bne.n	8001914 <HAL_GPIO_EXTI_Callback+0x2c>
			GPIOB->ODR |= (1 << 1);
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_GPIO_EXTI_Callback+0x44>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	4a08      	ldr	r2, [pc, #32]	@ (800192c <HAL_GPIO_EXTI_Callback+0x44>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	60d3      	str	r3, [r2, #12]
		} else {
			GPIOB->ODR &= ~(1 << 1);
		}

	}
}
 8001912:	e005      	b.n	8001920 <HAL_GPIO_EXTI_Callback+0x38>
			GPIOB->ODR &= ~(1 << 1);
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <HAL_GPIO_EXTI_Callback+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a04      	ldr	r2, [pc, #16]	@ (800192c <HAL_GPIO_EXTI_Callback+0x44>)
 800191a:	f023 0302 	bic.w	r3, r3, #2
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010800 	.word	0x40010800
 800192c:	40010c00 	.word	0x40010c00

08001930 <tivi_bat>:

void tivi_bat() {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	LCD_setCursor(0, 0);
 8001934:	2100      	movs	r1, #0
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff fca5 	bl	8001286 <LCD_setCursor>
	LCD_printf("Fetel HCMUS");
 800193c:	4805      	ldr	r0, [pc, #20]	@ (8001954 <tivi_bat+0x24>)
 800193e:	f7ff fcc1 	bl	80012c4 <LCD_printf>
	LCD_setCursor(1, 0);
 8001942:	2100      	movs	r1, #0
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff fc9e 	bl	8001286 <LCD_setCursor>
	LCD_printf("Welcome home");
 800194a:	4803      	ldr	r0, [pc, #12]	@ (8001958 <tivi_bat+0x28>)
 800194c:	f7ff fcba 	bl	80012c4 <LCD_printf>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08009400 	.word	0x08009400
 8001958:	0800940c 	.word	0x0800940c

0800195c <tivi_tat>:

void tivi_tat() {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	LCD_clear();
 8001960:	f7ff fc87 	bl	8001272 <LCD_clear>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800196e:	f000 fb8f 	bl	8002090 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001972:	f000 f8d9 	bl	8001b28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001976:	f000 f971 	bl	8001c5c <MX_GPIO_Init>
	MX_ADC1_Init();
 800197a:	f000 f931 	bl	8001be0 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	RCC->APB2ENR = 0xFC | (1 << 9);
 800197e:	4b61      	ldr	r3, [pc, #388]	@ (8001b04 <main+0x19c>)
 8001980:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8001984:	619a      	str	r2, [r3, #24]
	GPIOA->CRL = 0x44404444;
 8001986:	4b60      	ldr	r3, [pc, #384]	@ (8001b08 <main+0x1a0>)
 8001988:	4a60      	ldr	r2, [pc, #384]	@ (8001b0c <main+0x1a4>)
 800198a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0x44433333;
 800198c:	4b60      	ldr	r3, [pc, #384]	@ (8001b10 <main+0x1a8>)
 800198e:	4a61      	ldr	r2, [pc, #388]	@ (8001b14 <main+0x1ac>)
 8001990:	605a      	str	r2, [r3, #4]
	GPIOB->CRL = 0x33333433;
 8001992:	4b5f      	ldr	r3, [pc, #380]	@ (8001b10 <main+0x1a8>)
 8001994:	4a60      	ldr	r2, [pc, #384]	@ (8001b18 <main+0x1b0>)
 8001996:	601a      	str	r2, [r3, #0]
	LCD_init();
 8001998:	f7ff fc55 	bl	8001246 <LCD_init>
	LCD_clear();
 800199c:	f7ff fc69 	bl	8001272 <LCD_clear>
	USART1_Init();
 80019a0:	f7ff fce0 	bl	8001364 <USART1_Init>
	time_init_kitchen_door();
 80019a4:	f7ff fd18 	bl	80013d8 <time_init_kitchen_door>
	TIM2->CCR1 = 30;
 80019a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ac:	221e      	movs	r2, #30
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34
	time_init_main_door();
 80019b0:	f7ff fd66 	bl	8001480 <time_init_main_door>
	TIM2->CCR2 = 80;
 80019b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019b8:	2250      	movs	r2, #80	@ 0x50
 80019ba:	639a      	str	r2, [r3, #56]	@ 0x38
	time_init_bedroom_door();
 80019bc:	f7ff fdbc 	bl	8001538 <time_init_bedroom_door>
	TIM2->CCR3 = 80;
 80019c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019c4:	2250      	movs	r2, #80	@ 0x50
 80019c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_ADCEx_Calibration_Start(&hadc1);
 80019c8:	4854      	ldr	r0, [pc, #336]	@ (8001b1c <main+0x1b4>)
 80019ca:	f000 ffdd 	bl	8002988 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80019ce:	4853      	ldr	r0, [pc, #332]	@ (8001b1c <main+0x1b4>)
 80019d0:	f000 fcbc 	bl	800234c <HAL_ADC_Start_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		char signals = usart1_recByte();
 80019d4:	f7ff fcb4 	bl	8001340 <usart1_recByte>
 80019d8:	4603      	mov	r3, r0
 80019da:	71fb      	strb	r3, [r7, #7]
		switch (signals) {
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	3b41      	subs	r3, #65	@ 0x41
 80019e0:	2b19      	cmp	r3, #25
 80019e2:	d8f7      	bhi.n	80019d4 <main+0x6c>
 80019e4:	a201      	add	r2, pc, #4	@ (adr r2, 80019ec <main+0x84>)
 80019e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ea:	bf00      	nop
 80019ec:	08001a55 	.word	0x08001a55
 80019f0:	08001a5b 	.word	0x08001a5b
 80019f4:	080019d5 	.word	0x080019d5
 80019f8:	080019d5 	.word	0x080019d5
 80019fc:	08001a61 	.word	0x08001a61
 8001a00:	08001a67 	.word	0x08001a67
 8001a04:	08001a6d 	.word	0x08001a6d
 8001a08:	08001a73 	.word	0x08001a73
 8001a0c:	08001a85 	.word	0x08001a85
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a91 	.word	0x08001a91
 8001a18:	08001a97 	.word	0x08001a97
 8001a1c:	08001a9d 	.word	0x08001a9d
 8001a20:	08001aa3 	.word	0x08001aa3
 8001a24:	08001aa9 	.word	0x08001aa9
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	080019d5 	.word	0x080019d5
 8001a30:	080019d5 	.word	0x080019d5
 8001a34:	08001ab5 	.word	0x08001ab5
 8001a38:	080019d5 	.word	0x080019d5
 8001a3c:	08001adb 	.word	0x08001adb
 8001a40:	080019d5 	.word	0x080019d5
 8001a44:	080019d5 	.word	0x080019d5
 8001a48:	080019d5 	.word	0x080019d5
 8001a4c:	08001a79 	.word	0x08001a79
 8001a50:	08001a7f 	.word	0x08001a7f
		case 'A':
			light_living_on();
 8001a54:	f7ff fe08 	bl	8001668 <light_living_on>
			break;
 8001a58:	e053      	b.n	8001b02 <main+0x19a>
		case 'B':
			light_living_of();
 8001a5a:	f7ff fe13 	bl	8001684 <light_living_of>
			break;
 8001a5e:	e050      	b.n	8001b02 <main+0x19a>
		case 'E':
			tivi_bat();
 8001a60:	f7ff ff66 	bl	8001930 <tivi_bat>
			break;
 8001a64:	e04d      	b.n	8001b02 <main+0x19a>
		case 'F':
			tivi_tat();
 8001a66:	f7ff ff79 	bl	800195c <tivi_tat>
			break;
 8001a6a:	e04a      	b.n	8001b02 <main+0x19a>
		case 'G':
			main_door_on();
 8001a6c:	f7ff fdd4 	bl	8001618 <main_door_on>
			break;
 8001a70:	e047      	b.n	8001b02 <main+0x19a>
		case 'H':
			main_door_of();
 8001a72:	f7ff fddb 	bl	800162c <main_door_of>
			break;
 8001a76:	e044      	b.n	8001b02 <main+0x19a>
		case 'Y':
			kitchen_door_on();
 8001a78:	f7ff fdba 	bl	80015f0 <kitchen_door_on>
			break;
 8001a7c:	e041      	b.n	8001b02 <main+0x19a>
		case 'Z':
			kitchen_door_of();
 8001a7e:	f7ff fdc1 	bl	8001604 <kitchen_door_of>
			break;
 8001a82:	e03e      	b.n	8001b02 <main+0x19a>
		case 'I':
			light_kitchen_on();
 8001a84:	f7ff fe28 	bl	80016d8 <light_kitchen_on>
			break;
 8001a88:	e03b      	b.n	8001b02 <main+0x19a>
		case 'J':
			light_kitchen_of();
 8001a8a:	f7ff fe33 	bl	80016f4 <light_kitchen_of>
			break;
 8001a8e:	e038      	b.n	8001b02 <main+0x19a>
		case 'K':
			light_bedroom_on();
 8001a90:	f7ff fe06 	bl	80016a0 <light_bedroom_on>
			break;
 8001a94:	e035      	b.n	8001b02 <main+0x19a>
		case 'L':
			light_bedroom_of();
 8001a96:	f7ff fe11 	bl	80016bc <light_bedroom_of>
			break;
 8001a9a:	e032      	b.n	8001b02 <main+0x19a>
		case 'M':
			bedroom_door_on();
 8001a9c:	f7ff fdd0 	bl	8001640 <bedroom_door_on>
			break;
 8001aa0:	e02f      	b.n	8001b02 <main+0x19a>
		case 'N':
			bedroom_door_of();
 8001aa2:	f7ff fdd7 	bl	8001654 <bedroom_door_of>
			break;
 8001aa6:	e02c      	b.n	8001b02 <main+0x19a>
		case 'O':
			light_bathroom_on();
 8001aa8:	f7ff fe32 	bl	8001710 <light_bathroom_on>
			break;
 8001aac:	e029      	b.n	8001b02 <main+0x19a>
		case 'P':
			light_bathroom_of();
 8001aae:	f7ff fe3d 	bl	800172c <light_bathroom_of>
			break;
 8001ab2:	e026      	b.n	8001b02 <main+0x19a>
		case 'S':
			bedroom_door_on();
 8001ab4:	f7ff fdc4 	bl	8001640 <bedroom_door_on>
			main_door_on();
 8001ab8:	f7ff fdae 	bl	8001618 <main_door_on>
			kitchen_door_on();
 8001abc:	f7ff fd98 	bl	80015f0 <kitchen_door_on>
			LCD_clear();
 8001ac0:	f7ff fbd7 	bl	8001272 <LCD_clear>
			LCD_setCursor(0,0);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fbdd 	bl	8001286 <LCD_setCursor>
			LCD_printf("SOS");
 8001acc:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <main+0x1b8>)
 8001ace:	f7ff fbf9 	bl	80012c4 <LCD_printf>
			delay(100);
 8001ad2:	2064      	movs	r0, #100	@ 0x64
 8001ad4:	f7ff fc12 	bl	80012fc <delay>
			break;
 8001ad8:	e013      	b.n	8001b02 <main+0x19a>
		case 'U':
			bedroom_door_of();
 8001ada:	f7ff fdbb 	bl	8001654 <bedroom_door_of>
			kitchen_door_of();
 8001ade:	f7ff fd91 	bl	8001604 <kitchen_door_of>
			main_door_of();
 8001ae2:	f7ff fda3 	bl	800162c <main_door_of>
			LCD_clear();
 8001ae6:	f7ff fbc4 	bl	8001272 <LCD_clear>
			LCD_setCursor(1,0);
 8001aea:	2100      	movs	r1, #0
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff fbca 	bl	8001286 <LCD_setCursor>
			LCD_printf("Safety");
 8001af2:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <main+0x1bc>)
 8001af4:	f7ff fbe6 	bl	80012c4 <LCD_printf>
			delay(100);
 8001af8:	2064      	movs	r0, #100	@ 0x64
 8001afa:	f7ff fbff 	bl	80012fc <delay>
			break;
 8001afe:	bf00      	nop
 8001b00:	e768      	b.n	80019d4 <main+0x6c>
	while (1) {
 8001b02:	e767      	b.n	80019d4 <main+0x6c>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010800 	.word	0x40010800
 8001b0c:	44404444 	.word	0x44404444
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	44433333 	.word	0x44433333
 8001b18:	33333433 	.word	0x33333433
 8001b1c:	200007ec 	.word	0x200007ec
 8001b20:	0800941c 	.word	0x0800941c
 8001b24:	08009420 	.word	0x08009420

08001b28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b094      	sub	sp, #80	@ 0x50
 8001b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b32:	2228      	movs	r2, #40	@ 0x28
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 f95e 	bl	8003df8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b66:	2301      	movs	r3, #1
 8001b68:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b72:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b74:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 fa94 	bl	80030ac <HAL_RCC_OscConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0x66>
		Error_Handler();
 8001b8a:	f000 f8d7 	bl	8001d3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b8e:	230f      	movs	r3, #15
 8001b90:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b9e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f001 fd00 	bl	80035b0 <HAL_RCC_ClockConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <SystemClock_Config+0x92>
		Error_Handler();
 8001bb6:	f000 f8c1 	bl	8001d3c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bc2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fe6c 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SystemClock_Config+0xae>
		Error_Handler();
 8001bd2:	f000 f8b3 	bl	8001d3c <Error_Handler>
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3750      	adds	r7, #80	@ 0x50
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001bf2:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <MX_ADC1_Init+0x78>)
 8001bf4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c02:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001c0a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001c0e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001c1c:	480d      	ldr	r0, [pc, #52]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001c1e:	f000 fabd 	bl	800219c <HAL_ADC_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001c28:	f000 f888 	bl	8001d3c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001c34:	2307      	movs	r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_ADC1_Init+0x74>)
 8001c3e:	f000 fd0f 	bl	8002660 <HAL_ADC_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001c48:	f000 f878 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200007ec 	.word	0x200007ec
 8001c58:	40012400 	.word	0x40012400

08001c5c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c70:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a2d      	ldr	r2, [pc, #180]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a27      	ldr	r2, [pc, #156]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c8e:	f043 0320 	orr.w	r3, r3, #32
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a21      	ldr	r2, [pc, #132]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cbe:	f043 0308 	orr.w	r3, r3, #8
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <MX_GPIO_Init+0xd0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8001cd6:	4816      	ldr	r0, [pc, #88]	@ (8001d30 <MX_GPIO_Init+0xd4>)
 8001cd8:	f001 f9b7 	bl	800304a <HAL_GPIO_WritePin>
	D4_Pin | D5_Pin | D6_Pin | D7_Pin | RS_Pin | EN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001cdc:	23c0      	movs	r3, #192	@ 0xc0
 8001cde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <MX_GPIO_Init+0xd8>)
 8001ce2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	4812      	ldr	r0, [pc, #72]	@ (8001d38 <MX_GPIO_Init+0xdc>)
 8001cf0:	f001 f810 	bl	8002d14 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	 RS_Pin EN_Pin */
	GPIO_InitStruct.Pin = D4_Pin | D5_Pin | D6_Pin | D7_Pin | RS_Pin | EN_Pin;
 8001cf4:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8001cf8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4808      	ldr	r0, [pc, #32]	@ (8001d30 <MX_GPIO_Init+0xd4>)
 8001d0e:	f001 f801 	bl	8002d14 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2017      	movs	r0, #23
 8001d18:	f000 ffc5 	bl	8002ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d1c:	2017      	movs	r0, #23
 8001d1e:	f000 ffde 	bl	8002cde <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d22:	bf00      	nop
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	10110000 	.word	0x10110000
 8001d38:	40010800 	.word	0x40010800

08001d3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <Error_Handler+0x8>

08001d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6193      	str	r3, [r2, #24]
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_MspInit+0x60>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <HAL_MspInit+0x60>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000

08001dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a18      	ldr	r2, [pc, #96]	@ (8001e28 <HAL_ADC_MspInit+0x7c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d129      	bne.n	8001e20 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dcc:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <HAL_ADC_MspInit+0x80>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a16      	ldr	r2, [pc, #88]	@ (8001e2c <HAL_ADC_MspInit+0x80>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <HAL_ADC_MspInit+0x80>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_ADC_MspInit+0x80>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <HAL_ADC_MspInit+0x80>)
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_ADC_MspInit+0x80>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e00:	2303      	movs	r3, #3
 8001e02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4809      	ldr	r0, [pc, #36]	@ (8001e30 <HAL_ADC_MspInit+0x84>)
 8001e0c:	f000 ff82 	bl	8002d14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2012      	movs	r0, #18
 8001e16:	f000 ff46 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e1a:	2012      	movs	r0, #18
 8001e1c:	f000 ff5f 	bl	8002cde <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012400 	.word	0x40012400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010800 	.word	0x40010800

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <NMI_Handler+0x4>

08001e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e84:	f000 f94a 	bl	800211c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <ADC1_2_IRQHandler+0x10>)
 8001e92:	f000 fb1d 	bl	80024d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200007ec 	.word	0x200007ec

08001ea0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ea4:	2040      	movs	r0, #64	@ 0x40
 8001ea6:	f001 f8e9 	bl	800307c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001eaa:	2080      	movs	r0, #128	@ 0x80
 8001eac:	f001 f8e6 	bl	800307c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return 1;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <_kill>:

int _kill(int pid, int sig)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ecc:	f001 ffe2 	bl	8003e94 <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2216      	movs	r2, #22
 8001ed4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_exit>:

void _exit (int status)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eea:	f04f 31ff 	mov.w	r1, #4294967295
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffe7 	bl	8001ec2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <_exit+0x12>

08001ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e00a      	b.n	8001f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0a:	f3af 8000 	nop.w
 8001f0e:	4601      	mov	r1, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	b2ca      	uxtb	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dbf0      	blt.n	8001f0a <_read+0x12>
  }

  return len;
 8001f28:	687b      	ldr	r3, [r7, #4]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e009      	b.n	8001f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbf1      	blt.n	8001f44 <_write+0x12>
  }
  return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_close>:

int _close(int file)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f90:	605a      	str	r2, [r3, #4]
  return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <_isatty>:

int _isatty(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
	...

08001fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd4:	4a14      	ldr	r2, [pc, #80]	@ (8002028 <_sbrk+0x5c>)
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <_sbrk+0x60>)
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <_sbrk+0x64>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <_sbrk+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d207      	bcs.n	800200c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ffc:	f001 ff4a 	bl	8003e94 <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	220c      	movs	r2, #12
 8002004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	e009      	b.n	8002020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002012:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <_sbrk+0x64>)
 800201c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20005000 	.word	0x20005000
 800202c:	00000400 	.word	0x00000400
 8002030:	20000824 	.word	0x20000824
 8002034:	20000b38 	.word	0x20000b38

08002038 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
bl  SystemInit
 8002044:	f7ff fff8 	bl	8002038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480b      	ldr	r0, [pc, #44]	@ (8002078 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800204a:	490c      	ldr	r1, [pc, #48]	@ (800207c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800204c:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <LoopFillZerobss+0x16>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a09      	ldr	r2, [pc, #36]	@ (8002084 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002060:	4c09      	ldr	r4, [pc, #36]	@ (8002088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f001 ff17 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002072:	f7ff fc79 	bl	8001968 <main>
  bx lr
 8002076:	4770      	bx	lr
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	200006d0 	.word	0x200006d0
  ldr r2, =_sidata
 8002080:	08009834 	.word	0x08009834
  ldr r2, =_sbss
 8002084:	200006d0 	.word	0x200006d0
  ldr r4, =_ebss
 8002088:	20000b38 	.word	0x20000b38

0800208c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800208c:	e7fe      	b.n	800208c <CAN1_RX1_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <HAL_Init+0x28>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a07      	ldr	r2, [pc, #28]	@ (80020b8 <HAL_Init+0x28>)
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f000 fdf5 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a6:	200f      	movs	r0, #15
 80020a8:	f000 f808 	bl	80020bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ac:	f7ff fe4c 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000

080020bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <HAL_InitTick+0x54>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <HAL_InitTick+0x58>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fe0d 	bl	8002cfa <HAL_SYSTICK_Config>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00e      	b.n	8002108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b0f      	cmp	r3, #15
 80020ee:	d80a      	bhi.n	8002106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f0:	2200      	movs	r2, #0
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f000 fdd5 	bl	8002ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020fc:	4a06      	ldr	r2, [pc, #24]	@ (8002118 <HAL_InitTick+0x5c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000000 	.word	0x20000000
 8002114:	20000008 	.word	0x20000008
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_IncTick+0x1c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_IncTick+0x20>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a03      	ldr	r2, [pc, #12]	@ (800213c <HAL_IncTick+0x20>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000008 	.word	0x20000008
 800213c:	20000828 	.word	0x20000828

08002140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b02      	ldr	r3, [pc, #8]	@ (8002150 <HAL_GetTick+0x10>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000828 	.word	0x20000828

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff fff0 	bl	8002140 <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffe0 	bl	8002140 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0be      	b.n	800233c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fde6 	bl	8001dac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fb8f 	bl	8002904 <ADC_ConversionStop_Disable>
 80021e6:	4603      	mov	r3, r0
 80021e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8099 	bne.w	800232a <HAL_ADC_Init+0x18e>
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 8095 	bne.w	800232a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002204:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002208:	f023 0302 	bic.w	r3, r3, #2
 800220c:	f043 0202 	orr.w	r2, r3, #2
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800221c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7b1b      	ldrb	r3, [r3, #12]
 8002222:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002224:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4313      	orrs	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002234:	d003      	beq.n	800223e <HAL_ADC_Init+0xa2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_ADC_Init+0xa8>
 800223e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002242:	e000      	b.n	8002246 <HAL_ADC_Init+0xaa>
 8002244:	2300      	movs	r3, #0
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7d1b      	ldrb	r3, [r3, #20]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d119      	bne.n	8002288 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7b1b      	ldrb	r3, [r3, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	3b01      	subs	r3, #1
 8002262:	035a      	lsls	r2, r3, #13
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	e00b      	b.n	8002288 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b28      	ldr	r3, [pc, #160]	@ (8002344 <HAL_ADC_Init+0x1a8>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b8:	d003      	beq.n	80022c2 <HAL_ADC_Init+0x126>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d104      	bne.n	80022cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	051b      	lsls	r3, r3, #20
 80022ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	430a      	orrs	r2, r1
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <HAL_ADC_Init+0x1ac>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d10b      	bne.n	8002308 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002306:	e018      	b.n	800233a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	f023 0312 	bic.w	r3, r3, #18
 8002310:	f043 0210 	orr.w	r2, r3, #16
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	f043 0201 	orr.w	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002328:	e007      	b.n	800233a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800233a:	7dfb      	ldrb	r3, [r7, #23]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	ffe1f7fd 	.word	0xffe1f7fd
 8002348:	ff1f0efe 	.word	0xff1f0efe

0800234c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Start_IT+0x1a>
 8002362:	2302      	movs	r3, #2
 8002364:	e0a0      	b.n	80024a8 <HAL_ADC_Start_IT+0x15c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa6e 	bl	8002850 <ADC_Enable>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 808f 	bne.w	800249e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002384:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a45      	ldr	r2, [pc, #276]	@ (80024b0 <HAL_ADC_Start_IT+0x164>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d105      	bne.n	80023aa <HAL_ADC_Start_IT+0x5e>
 800239e:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <HAL_ADC_Start_IT+0x168>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d115      	bne.n	80023d6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d026      	beq.n	8002412 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023d4:	e01d      	b.n	8002412 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a33      	ldr	r2, [pc, #204]	@ (80024b4 <HAL_ADC_Start_IT+0x168>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d004      	beq.n	80023f6 <HAL_ADC_Start_IT+0xaa>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2f      	ldr	r2, [pc, #188]	@ (80024b0 <HAL_ADC_Start_IT+0x164>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10d      	bne.n	8002412 <HAL_ADC_Start_IT+0xc6>
 80023f6:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_ADC_Start_IT+0x168>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002406:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800240a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	f023 0206 	bic.w	r2, r3, #6
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	62da      	str	r2, [r3, #44]	@ 0x2c
 800242a:	e002      	b.n	8002432 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f06f 0202 	mvn.w	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0220 	orr.w	r2, r2, #32
 8002452:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800245e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002462:	d113      	bne.n	800248c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002468:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <HAL_ADC_Start_IT+0x164>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d105      	bne.n	800247a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800246e:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_ADC_Start_IT+0x168>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d108      	bne.n	800248c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	e00c      	b.n	80024a6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	e003      	b.n	80024a6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40012800 	.word	0x40012800
 80024b4:	40012400 	.word	0x40012400

080024b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d03e      	beq.n	8002570 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d039      	beq.n	8002570 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800251e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002522:	d11d      	bne.n	8002560 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002528:	2b00      	cmp	r3, #0
 800252a:	d119      	bne.n	8002560 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0220 	bic.w	r2, r2, #32
 800253a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff f8f1 	bl	8001748 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f06f 0212 	mvn.w	r2, #18
 800256e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04d      	beq.n	8002616 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d048      	beq.n	8002616 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80025a6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80025aa:	d012      	beq.n	80025d2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d125      	bne.n	8002606 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025c4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025c8:	d11d      	bne.n	8002606 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d119      	bne.n	8002606 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa6c 	bl	8002ae4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 020c 	mvn.w	r2, #12
 8002614:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f809 	bl	800264e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0201 	mvn.w	r2, #1
 8002644:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x20>
 800267c:	2302      	movs	r3, #2
 800267e:	e0dc      	b.n	800283a <HAL_ADC_ConfigChannel+0x1da>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b06      	cmp	r3, #6
 800268e:	d81c      	bhi.n	80026ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	3b05      	subs	r3, #5
 80026a2:	221f      	movs	r2, #31
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	4019      	ands	r1, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	3b05      	subs	r3, #5
 80026bc:	fa00 f203 	lsl.w	r2, r0, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80026c8:	e03c      	b.n	8002744 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d81c      	bhi.n	800270c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b23      	subs	r3, #35	@ 0x23
 80026e4:	221f      	movs	r2, #31
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	4019      	ands	r1, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b23      	subs	r3, #35	@ 0x23
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	631a      	str	r2, [r3, #48]	@ 0x30
 800270a:	e01b      	b.n	8002744 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	3b41      	subs	r3, #65	@ 0x41
 800271e:	221f      	movs	r2, #31
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	4019      	ands	r1, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3b41      	subs	r3, #65	@ 0x41
 8002738:	fa00 f203 	lsl.w	r2, r0, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b09      	cmp	r3, #9
 800274a:	d91c      	bls.n	8002786 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68d9      	ldr	r1, [r3, #12]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	3b1e      	subs	r3, #30
 800275e:	2207      	movs	r2, #7
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	4019      	ands	r1, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6898      	ldr	r0, [r3, #8]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	3b1e      	subs	r3, #30
 8002778:	fa00 f203 	lsl.w	r2, r0, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	e019      	b.n	80027ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6919      	ldr	r1, [r3, #16]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	2207      	movs	r2, #7
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	4019      	ands	r1, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6898      	ldr	r0, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	fa00 f203 	lsl.w	r2, r0, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d003      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027c6:	2b11      	cmp	r3, #17
 80027c8:	d132      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002844 <HAL_ADC_ConfigChannel+0x1e4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d125      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d126      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d11a      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027fa:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <HAL_ADC_ConfigChannel+0x1e8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a13      	ldr	r2, [pc, #76]	@ (800284c <HAL_ADC_ConfigChannel+0x1ec>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	0c9a      	lsrs	r2, r3, #18
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002810:	e002      	b.n	8002818 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3b01      	subs	r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f9      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x1b2>
 800281e:	e007      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40012400 	.word	0x40012400
 8002848:	20000000 	.word	0x20000000
 800284c:	431bde83 	.word	0x431bde83

08002850 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d040      	beq.n	80028f0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800287e:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <ADC_Enable+0xac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1f      	ldr	r2, [pc, #124]	@ (8002900 <ADC_Enable+0xb0>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800288c:	e002      	b.n	8002894 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800289a:	f7ff fc51 	bl	8002140 <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028a0:	e01f      	b.n	80028e2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028a2:	f7ff fc4d 	bl	8002140 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d918      	bls.n	80028e2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d011      	beq.n	80028e2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c2:	f043 0210 	orr.w	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	f043 0201 	orr.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e007      	b.n	80028f2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d1d8      	bne.n	80028a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000
 8002900:	431bde83 	.word	0x431bde83

08002904 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d12e      	bne.n	800297c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800292e:	f7ff fc07 	bl	8002140 <HAL_GetTick>
 8002932:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002934:	e01b      	b.n	800296e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002936:	f7ff fc03 	bl	8002140 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d914      	bls.n	800296e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d10d      	bne.n	800296e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	f043 0210 	orr.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e007      	b.n	800297e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d0dc      	beq.n	8002936 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADCEx_Calibration_Start+0x1e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e097      	b.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x14e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffa8 	bl	8002904 <ADC_ConversionStop_Disable>
 80029b4:	4603      	mov	r3, r0
 80029b6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff49 	bl	8002850 <ADC_Enable>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f040 8081 	bne.w	8002acc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029d2:	f023 0302 	bic.w	r3, r3, #2
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029de:	4b40      	ldr	r3, [pc, #256]	@ (8002ae0 <HAL_ADCEx_Calibration_Start+0x158>)
 80029e0:	681c      	ldr	r4, [r3, #0]
 80029e2:	2002      	movs	r0, #2
 80029e4:	f001 f814 	bl	8003a10 <HAL_RCCEx_GetPeriphCLKFreq>
 80029e8:	4603      	mov	r3, r0
 80029ea:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80029ee:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80029f0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80029f2:	e002      	b.n	80029fa <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f9      	bne.n	80029f4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0208 	orr.w	r2, r2, #8
 8002a0e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a10:	f7ff fb96 	bl	8002140 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a16:	e01b      	b.n	8002a50 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a18:	f7ff fb92 	bl	8002140 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b0a      	cmp	r3, #10
 8002a24:	d914      	bls.n	8002a50 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00d      	beq.n	8002a50 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a38:	f023 0312 	bic.w	r3, r3, #18
 8002a3c:	f043 0210 	orr.w	r2, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e042      	b.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1dc      	bne.n	8002a18 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0204 	orr.w	r2, r2, #4
 8002a6c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a6e:	f7ff fb67 	bl	8002140 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a74:	e01b      	b.n	8002aae <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a76:	f7ff fb63 	bl	8002140 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b0a      	cmp	r3, #10
 8002a82:	d914      	bls.n	8002aae <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	f023 0312 	bic.w	r3, r3, #18
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e013      	b.n	8002ad6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1dc      	bne.n	8002a76 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	f023 0303 	bic.w	r3, r3, #3
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd90      	pop	{r4, r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b44:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <__NVIC_GetPriorityGrouping+0x18>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0307 	and.w	r3, r3, #7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db0b      	blt.n	8002b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4906      	ldr	r1, [pc, #24]	@ (8002b90 <__NVIC_EnableIRQ+0x34>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	@ (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	@ (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	@ 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff90 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff2d 	bl	8002af8 <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff42 	bl	8002b40 <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff90 	bl	8002be8 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5f 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff35 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa2 	bl	8002c4c <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b08b      	sub	sp, #44	@ 0x2c
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d26:	e169      	b.n	8002ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d28:	2201      	movs	r2, #1
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	f040 8158 	bne.w	8002ff6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a9a      	ldr	r2, [pc, #616]	@ (8002fb4 <HAL_GPIO_Init+0x2a0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d05e      	beq.n	8002e0e <HAL_GPIO_Init+0xfa>
 8002d50:	4a98      	ldr	r2, [pc, #608]	@ (8002fb4 <HAL_GPIO_Init+0x2a0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d875      	bhi.n	8002e42 <HAL_GPIO_Init+0x12e>
 8002d56:	4a98      	ldr	r2, [pc, #608]	@ (8002fb8 <HAL_GPIO_Init+0x2a4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d058      	beq.n	8002e0e <HAL_GPIO_Init+0xfa>
 8002d5c:	4a96      	ldr	r2, [pc, #600]	@ (8002fb8 <HAL_GPIO_Init+0x2a4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d86f      	bhi.n	8002e42 <HAL_GPIO_Init+0x12e>
 8002d62:	4a96      	ldr	r2, [pc, #600]	@ (8002fbc <HAL_GPIO_Init+0x2a8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d052      	beq.n	8002e0e <HAL_GPIO_Init+0xfa>
 8002d68:	4a94      	ldr	r2, [pc, #592]	@ (8002fbc <HAL_GPIO_Init+0x2a8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d869      	bhi.n	8002e42 <HAL_GPIO_Init+0x12e>
 8002d6e:	4a94      	ldr	r2, [pc, #592]	@ (8002fc0 <HAL_GPIO_Init+0x2ac>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d04c      	beq.n	8002e0e <HAL_GPIO_Init+0xfa>
 8002d74:	4a92      	ldr	r2, [pc, #584]	@ (8002fc0 <HAL_GPIO_Init+0x2ac>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d863      	bhi.n	8002e42 <HAL_GPIO_Init+0x12e>
 8002d7a:	4a92      	ldr	r2, [pc, #584]	@ (8002fc4 <HAL_GPIO_Init+0x2b0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d046      	beq.n	8002e0e <HAL_GPIO_Init+0xfa>
 8002d80:	4a90      	ldr	r2, [pc, #576]	@ (8002fc4 <HAL_GPIO_Init+0x2b0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d85d      	bhi.n	8002e42 <HAL_GPIO_Init+0x12e>
 8002d86:	2b12      	cmp	r3, #18
 8002d88:	d82a      	bhi.n	8002de0 <HAL_GPIO_Init+0xcc>
 8002d8a:	2b12      	cmp	r3, #18
 8002d8c:	d859      	bhi.n	8002e42 <HAL_GPIO_Init+0x12e>
 8002d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d94 <HAL_GPIO_Init+0x80>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002e0f 	.word	0x08002e0f
 8002d98:	08002de9 	.word	0x08002de9
 8002d9c:	08002dfb 	.word	0x08002dfb
 8002da0:	08002e3d 	.word	0x08002e3d
 8002da4:	08002e43 	.word	0x08002e43
 8002da8:	08002e43 	.word	0x08002e43
 8002dac:	08002e43 	.word	0x08002e43
 8002db0:	08002e43 	.word	0x08002e43
 8002db4:	08002e43 	.word	0x08002e43
 8002db8:	08002e43 	.word	0x08002e43
 8002dbc:	08002e43 	.word	0x08002e43
 8002dc0:	08002e43 	.word	0x08002e43
 8002dc4:	08002e43 	.word	0x08002e43
 8002dc8:	08002e43 	.word	0x08002e43
 8002dcc:	08002e43 	.word	0x08002e43
 8002dd0:	08002e43 	.word	0x08002e43
 8002dd4:	08002e43 	.word	0x08002e43
 8002dd8:	08002df1 	.word	0x08002df1
 8002ddc:	08002e05 	.word	0x08002e05
 8002de0:	4a79      	ldr	r2, [pc, #484]	@ (8002fc8 <HAL_GPIO_Init+0x2b4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002de6:	e02c      	b.n	8002e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	623b      	str	r3, [r7, #32]
          break;
 8002dee:	e029      	b.n	8002e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	3304      	adds	r3, #4
 8002df6:	623b      	str	r3, [r7, #32]
          break;
 8002df8:	e024      	b.n	8002e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	623b      	str	r3, [r7, #32]
          break;
 8002e02:	e01f      	b.n	8002e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	330c      	adds	r3, #12
 8002e0a:	623b      	str	r3, [r7, #32]
          break;
 8002e0c:	e01a      	b.n	8002e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e16:	2304      	movs	r3, #4
 8002e18:	623b      	str	r3, [r7, #32]
          break;
 8002e1a:	e013      	b.n	8002e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e24:	2308      	movs	r3, #8
 8002e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	611a      	str	r2, [r3, #16]
          break;
 8002e2e:	e009      	b.n	8002e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e30:	2308      	movs	r3, #8
 8002e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	615a      	str	r2, [r3, #20]
          break;
 8002e3a:	e003      	b.n	8002e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
          break;
 8002e40:	e000      	b.n	8002e44 <HAL_GPIO_Init+0x130>
          break;
 8002e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2bff      	cmp	r3, #255	@ 0xff
 8002e48:	d801      	bhi.n	8002e4e <HAL_GPIO_Init+0x13a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	e001      	b.n	8002e52 <HAL_GPIO_Init+0x13e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2bff      	cmp	r3, #255	@ 0xff
 8002e58:	d802      	bhi.n	8002e60 <HAL_GPIO_Init+0x14c>
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	e002      	b.n	8002e66 <HAL_GPIO_Init+0x152>
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	3b08      	subs	r3, #8
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	401a      	ands	r2, r3
 8002e78:	6a39      	ldr	r1, [r7, #32]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	431a      	orrs	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80b1 	beq.w	8002ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e94:	4b4d      	ldr	r3, [pc, #308]	@ (8002fcc <HAL_GPIO_Init+0x2b8>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4a4c      	ldr	r2, [pc, #304]	@ (8002fcc <HAL_GPIO_Init+0x2b8>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6193      	str	r3, [r2, #24]
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	@ (8002fcc <HAL_GPIO_Init+0x2b8>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002eac:	4a48      	ldr	r2, [pc, #288]	@ (8002fd0 <HAL_GPIO_Init+0x2bc>)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a40      	ldr	r2, [pc, #256]	@ (8002fd4 <HAL_GPIO_Init+0x2c0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_GPIO_Init+0x1ec>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd8 <HAL_GPIO_Init+0x2c4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00d      	beq.n	8002efc <HAL_GPIO_Init+0x1e8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fdc <HAL_GPIO_Init+0x2c8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <HAL_GPIO_Init+0x1e4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3d      	ldr	r2, [pc, #244]	@ (8002fe0 <HAL_GPIO_Init+0x2cc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_GPIO_Init+0x1e0>
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e006      	b.n	8002f02 <HAL_GPIO_Init+0x1ee>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	e004      	b.n	8002f02 <HAL_GPIO_Init+0x1ee>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e002      	b.n	8002f02 <HAL_GPIO_Init+0x1ee>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_GPIO_Init+0x1ee>
 8002f00:	2300      	movs	r3, #0
 8002f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f04:	f002 0203 	and.w	r2, r2, #3
 8002f08:	0092      	lsls	r2, r2, #2
 8002f0a:	4093      	lsls	r3, r2
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f12:	492f      	ldr	r1, [pc, #188]	@ (8002fd0 <HAL_GPIO_Init+0x2bc>)
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	492c      	ldr	r1, [pc, #176]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	4928      	ldr	r1, [pc, #160]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f54:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	4922      	ldr	r1, [pc, #136]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60cb      	str	r3, [r1, #12]
 8002f60:	e006      	b.n	8002f70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f62:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	491e      	ldr	r1, [pc, #120]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4918      	ldr	r1, [pc, #96]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f8a:	4b16      	ldr	r3, [pc, #88]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	4914      	ldr	r1, [pc, #80]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d021      	beq.n	8002fe8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	490e      	ldr	r1, [pc, #56]	@ (8002fe4 <HAL_GPIO_Init+0x2d0>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]
 8002fb0:	e021      	b.n	8002ff6 <HAL_GPIO_Init+0x2e2>
 8002fb2:	bf00      	nop
 8002fb4:	10320000 	.word	0x10320000
 8002fb8:	10310000 	.word	0x10310000
 8002fbc:	10220000 	.word	0x10220000
 8002fc0:	10210000 	.word	0x10210000
 8002fc4:	10120000 	.word	0x10120000
 8002fc8:	10110000 	.word	0x10110000
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40010800 	.word	0x40010800
 8002fd8:	40010c00 	.word	0x40010c00
 8002fdc:	40011000 	.word	0x40011000
 8002fe0:	40011400 	.word	0x40011400
 8002fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_GPIO_Init+0x304>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	4909      	ldr	r1, [pc, #36]	@ (8003018 <HAL_GPIO_Init+0x304>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	f47f ae8e 	bne.w	8002d28 <HAL_GPIO_Init+0x14>
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	372c      	adds	r7, #44	@ 0x2c
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	40010400 	.word	0x40010400

0800301c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e001      	b.n	800303e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	807b      	strh	r3, [r7, #2]
 8003056:	4613      	mov	r3, r2
 8003058:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800305a:	787b      	ldrb	r3, [r7, #1]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003060:	887a      	ldrh	r2, [r7, #2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003066:	e003      	b.n	8003070 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	041a      	lsls	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	611a      	str	r2, [r3, #16]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
	...

0800307c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d006      	beq.n	80030a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003092:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fc24 	bl	80018e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40010400 	.word	0x40010400

080030ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e272      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8087 	beq.w	80031da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030cc:	4b92      	ldr	r3, [pc, #584]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d00c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d112      	bne.n	800310a <HAL_RCC_OscConfig+0x5e>
 80030e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f0:	d10b      	bne.n	800310a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f2:	4b89      	ldr	r3, [pc, #548]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d06c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x12c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d168      	bne.n	80031d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e24c      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x76>
 8003114:	4b80      	ldr	r3, [pc, #512]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a7f      	ldr	r2, [pc, #508]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e02e      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x98>
 800312a:	4b7b      	ldr	r3, [pc, #492]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7a      	ldr	r2, [pc, #488]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b78      	ldr	r3, [pc, #480]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a77      	ldr	r2, [pc, #476]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800313c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0xbc>
 800314e:	4b72      	ldr	r3, [pc, #456]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a71      	ldr	r2, [pc, #452]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b6f      	ldr	r3, [pc, #444]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6e      	ldr	r2, [pc, #440]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003168:	4b6b      	ldr	r3, [pc, #428]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6a      	ldr	r2, [pc, #424]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b68      	ldr	r3, [pc, #416]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a67      	ldr	r2, [pc, #412]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe ffda 	bl	8002140 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fe ffd6 	bl	8002140 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	@ 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e200      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xe4>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe ffc6 	bl	8002140 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe ffc2 	bl	8002140 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	@ 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1ec      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b53      	ldr	r3, [pc, #332]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x10c>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031f2:	4b49      	ldr	r3, [pc, #292]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x18c>
 80031fe:	4b46      	ldr	r3, [pc, #280]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b43      	ldr	r3, [pc, #268]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x176>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1c0      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b3d      	ldr	r3, [pc, #244]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4939      	ldr	r1, [pc, #228]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b36      	ldr	r3, [pc, #216]	@ (800331c <HAL_RCC_OscConfig+0x270>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fe ff7b 	bl	8002140 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324e:	f7fe ff77 	bl	8002140 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1a1      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b2d      	ldr	r3, [pc, #180]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4927      	ldr	r1, [pc, #156]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	e015      	b.n	80032ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b26      	ldr	r3, [pc, #152]	@ (800331c <HAL_RCC_OscConfig+0x270>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe ff5a 	bl	8002140 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003290:	f7fe ff56 	bl	8002140 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e180      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d03a      	beq.n	8003330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d019      	beq.n	80032f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c2:	4b17      	ldr	r3, [pc, #92]	@ (8003320 <HAL_RCC_OscConfig+0x274>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c8:	f7fe ff3a 	bl	8002140 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fe ff36 	bl	8002140 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e160      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f000 faba 	bl	8003868 <RCC_Delay>
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <HAL_RCC_OscConfig+0x274>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fc:	f7fe ff20 	bl	8002140 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003302:	e00f      	b.n	8003324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003304:	f7fe ff1c 	bl	8002140 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d908      	bls.n	8003324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e146      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	42420000 	.word	0x42420000
 8003320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	4b92      	ldr	r3, [pc, #584]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e9      	bne.n	8003304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80a6 	beq.w	800348a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b8b      	ldr	r3, [pc, #556]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	4b88      	ldr	r3, [pc, #544]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4a87      	ldr	r2, [pc, #540]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003358:	61d3      	str	r3, [r2, #28]
 800335a:	4b85      	ldr	r3, [pc, #532]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b82      	ldr	r3, [pc, #520]	@ (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b7f      	ldr	r3, [pc, #508]	@ (8003574 <HAL_RCC_OscConfig+0x4c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7e      	ldr	r2, [pc, #504]	@ (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fe fedd 	bl	8002140 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fe fed9 	bl	8002140 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	@ 0x64
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e103      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b75      	ldr	r3, [pc, #468]	@ (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x312>
 80033b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6213      	str	r3, [r2, #32]
 80033bc:	e02d      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x334>
 80033c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a69      	ldr	r2, [pc, #420]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	4b67      	ldr	r3, [pc, #412]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a66      	ldr	r2, [pc, #408]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	e01c      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d10c      	bne.n	8003402 <HAL_RCC_OscConfig+0x356>
 80033e8:	4b61      	ldr	r3, [pc, #388]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4a60      	ldr	r2, [pc, #384]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	f043 0304 	orr.w	r3, r3, #4
 80033f2:	6213      	str	r3, [r2, #32]
 80033f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6213      	str	r3, [r2, #32]
 8003400:	e00b      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 8003402:	4b5b      	ldr	r3, [pc, #364]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a5a      	ldr	r2, [pc, #360]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	4b58      	ldr	r3, [pc, #352]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4a57      	ldr	r2, [pc, #348]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d015      	beq.n	800344e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fe fe8d 	bl	8002140 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe fe89 	bl	8002140 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0b1      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	4b4b      	ldr	r3, [pc, #300]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ee      	beq.n	800342a <HAL_RCC_OscConfig+0x37e>
 800344c:	e014      	b.n	8003478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fe fe77 	bl	8002140 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fe73 	bl	8002140 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e09b      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ee      	bne.n	8003456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	4b3c      	ldr	r3, [pc, #240]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a3b      	ldr	r2, [pc, #236]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8087 	beq.w	80035a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003494:	4b36      	ldr	r3, [pc, #216]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d061      	beq.n	8003564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d146      	bne.n	8003536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a8:	4b33      	ldr	r3, [pc, #204]	@ (8003578 <HAL_RCC_OscConfig+0x4cc>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe fe47 	bl	8002140 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe fe43 	bl	8002140 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e06d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c8:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034dc:	d108      	bne.n	80034f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034de:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4921      	ldr	r1, [pc, #132]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a19      	ldr	r1, [r3, #32]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	430b      	orrs	r3, r1
 8003502:	491b      	ldr	r1, [pc, #108]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003508:	4b1b      	ldr	r3, [pc, #108]	@ (8003578 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe fe17 	bl	8002140 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe fe13 	bl	8002140 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e03d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003528:	4b11      	ldr	r3, [pc, #68]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x46a>
 8003534:	e035      	b.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003536:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <HAL_RCC_OscConfig+0x4cc>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe fe00 	bl	8002140 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe fdfc 	bl	8002140 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e026      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x498>
 8003562:	e01e      	b.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e019      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_RCC_OscConfig+0x500>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	429a      	cmp	r2, r3
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d0      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b67      	ldr	r3, [pc, #412]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 0207 	bic.w	r2, r3, #7
 80035da:	4965      	ldr	r1, [pc, #404]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b63      	ldr	r3, [pc, #396]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b59      	ldr	r3, [pc, #356]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a58      	ldr	r2, [pc, #352]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b53      	ldr	r3, [pc, #332]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a52      	ldr	r2, [pc, #328]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800362e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b50      	ldr	r3, [pc, #320]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494d      	ldr	r1, [pc, #308]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d040      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b47      	ldr	r3, [pc, #284]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e073      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3d      	ldr	r3, [pc, #244]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06b      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b39      	ldr	r3, [pc, #228]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4936      	ldr	r1, [pc, #216]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a0:	f7fe fd4e 	bl	8002140 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fe fd4a 	bl	8002140 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e053      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	4922      	ldr	r1, [pc, #136]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e032      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372a:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490e      	ldr	r1, [pc, #56]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f821 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490a      	ldr	r1, [pc, #40]	@ (8003778 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	4a09      	ldr	r2, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x1cc>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <HAL_RCC_ClockConfig+0x1d0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fcac 	bl	80020bc <HAL_InitTick>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40022000 	.word	0x40022000
 8003774:	40021000 	.word	0x40021000
 8003778:	08009428 	.word	0x08009428
 800377c:	20000000 	.word	0x20000000
 8003780:	20000004 	.word	0x20000004

08003784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800379e:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x94>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x36>
 80037b2:	e027      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037b4:	4b19      	ldr	r3, [pc, #100]	@ (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037b6:	613b      	str	r3, [r7, #16]
      break;
 80037b8:	e027      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0c9b      	lsrs	r3, r3, #18
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a17      	ldr	r2, [pc, #92]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037d2:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x94>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	0c5b      	lsrs	r3, r3, #17
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	4a11      	ldr	r2, [pc, #68]	@ (8003824 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037e6:	fb03 f202 	mul.w	r2, r3, r2
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e004      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003828 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	613b      	str	r3, [r7, #16]
      break;
 8003802:	e002      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 8003806:	613b      	str	r3, [r7, #16]
      break;
 8003808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380a:	693b      	ldr	r3, [r7, #16]
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	007a1200 	.word	0x007a1200
 8003820:	08009440 	.word	0x08009440
 8003824:	08009450 	.word	0x08009450
 8003828:	003d0900 	.word	0x003d0900

0800382c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003830:	4b02      	ldr	r3, [pc, #8]	@ (800383c <HAL_RCC_GetHCLKFreq+0x10>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	20000000 	.word	0x20000000

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003844:	f7ff fff2 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	0adb      	lsrs	r3, r3, #11
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	@ (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	08009438 	.word	0x08009438

08003868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <RCC_Delay+0x34>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <RCC_Delay+0x38>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0a5b      	lsrs	r3, r3, #9
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003884:	bf00      	nop
  }
  while (Delay --);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	60fa      	str	r2, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f9      	bne.n	8003884 <RCC_Delay+0x1c>
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	20000000 	.word	0x20000000
 80038a0:	10624dd3 	.word	0x10624dd3

080038a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d07d      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038c0:	2300      	movs	r3, #0
 80038c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10d      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038da:	61d3      	str	r3, [r2, #28]
 80038dc:	4b49      	ldr	r3, [pc, #292]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e8:	2301      	movs	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	4b46      	ldr	r3, [pc, #280]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d118      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f8:	4b43      	ldr	r3, [pc, #268]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a42      	ldr	r2, [pc, #264]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003902:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003904:	f7fe fc1c 	bl	8002140 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	e008      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390c:	f7fe fc18 	bl	8002140 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	@ 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e06d      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800392a:	4b36      	ldr	r3, [pc, #216]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003932:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02e      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	429a      	cmp	r2, r3
 8003946:	d027      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003948:	4b2e      	ldr	r3, [pc, #184]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003950:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	4b2e      	ldr	r3, [pc, #184]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003958:	4b2c      	ldr	r3, [pc, #176]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800395e:	4a29      	ldr	r2, [pc, #164]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d014      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fe fbe7 	bl	8002140 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fe fbe3 	bl	8002140 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e036      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ee      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003998:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4917      	ldr	r1, [pc, #92]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	490b      	ldr	r1, [pc, #44]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e6:	4b07      	ldr	r3, [pc, #28]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	4904      	ldr	r1, [pc, #16]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40007000 	.word	0x40007000
 8003a0c:	42420440 	.word	0x42420440

08003a10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	f200 808a 	bhi.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d045      	beq.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d075      	beq.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a46:	e082      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003a48:	4b46      	ldr	r3, [pc, #280]	@ (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a4e:	4b45      	ldr	r3, [pc, #276]	@ (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d07b      	beq.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	0c9b      	lsrs	r3, r3, #18
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	4a41      	ldr	r2, [pc, #260]	@ (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a72:	4b3c      	ldr	r3, [pc, #240]	@ (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	0c5b      	lsrs	r3, r3, #17
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a8c:	4a38      	ldr	r2, [pc, #224]	@ (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e004      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4a34      	ldr	r2, [pc, #208]	@ (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ab4:	d102      	bne.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	61bb      	str	r3, [r7, #24]
      break;
 8003aba:	e04a      	b.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	61bb      	str	r3, [r7, #24]
      break;
 8003aca:	e042      	b.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003acc:	4b25      	ldr	r3, [pc, #148]	@ (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003adc:	d108      	bne.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003ae8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e01f      	b.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afa:	d109      	bne.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003b08:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e00f      	b.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b1a:	d11c      	bne.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d016      	beq.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003b28:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003b2c:	61bb      	str	r3, [r7, #24]
      break;
 8003b2e:	e012      	b.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b30:	e011      	b.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b32:	f7ff fe85 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8003b36:	4602      	mov	r2, r0
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0b9b      	lsrs	r3, r3, #14
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	61bb      	str	r3, [r7, #24]
      break;
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b56:	bf00      	nop
    }
  }
  return (frequency);
 8003b58:	69bb      	ldr	r3, [r7, #24]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08009454 	.word	0x08009454
 8003b6c:	08009464 	.word	0x08009464
 8003b70:	007a1200 	.word	0x007a1200
 8003b74:	003d0900 	.word	0x003d0900
 8003b78:	aaaaaaab 	.word	0xaaaaaaab

08003b7c <std>:
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	4604      	mov	r4, r0
 8003b82:	e9c0 3300 	strd	r3, r3, [r0]
 8003b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b8a:	6083      	str	r3, [r0, #8]
 8003b8c:	8181      	strh	r1, [r0, #12]
 8003b8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b90:	81c2      	strh	r2, [r0, #14]
 8003b92:	6183      	str	r3, [r0, #24]
 8003b94:	4619      	mov	r1, r3
 8003b96:	2208      	movs	r2, #8
 8003b98:	305c      	adds	r0, #92	@ 0x5c
 8003b9a:	f000 f92d 	bl	8003df8 <memset>
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <std+0x58>)
 8003ba0:	61e4      	str	r4, [r4, #28]
 8003ba2:	6223      	str	r3, [r4, #32]
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <std+0x5c>)
 8003ba6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <std+0x60>)
 8003baa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003bac:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <std+0x64>)
 8003bae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <std+0x68>)
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	d006      	beq.n	8003bc4 <std+0x48>
 8003bb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bba:	4294      	cmp	r4, r2
 8003bbc:	d002      	beq.n	8003bc4 <std+0x48>
 8003bbe:	33d0      	adds	r3, #208	@ 0xd0
 8003bc0:	429c      	cmp	r4, r3
 8003bc2:	d105      	bne.n	8003bd0 <std+0x54>
 8003bc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bcc:	f000 b98c 	b.w	8003ee8 <__retarget_lock_init_recursive>
 8003bd0:	bd10      	pop	{r4, pc}
 8003bd2:	bf00      	nop
 8003bd4:	08003d01 	.word	0x08003d01
 8003bd8:	08003d23 	.word	0x08003d23
 8003bdc:	08003d5b 	.word	0x08003d5b
 8003be0:	08003d7f 	.word	0x08003d7f
 8003be4:	2000082c 	.word	0x2000082c

08003be8 <stdio_exit_handler>:
 8003be8:	4a02      	ldr	r2, [pc, #8]	@ (8003bf4 <stdio_exit_handler+0xc>)
 8003bea:	4903      	ldr	r1, [pc, #12]	@ (8003bf8 <stdio_exit_handler+0x10>)
 8003bec:	4803      	ldr	r0, [pc, #12]	@ (8003bfc <stdio_exit_handler+0x14>)
 8003bee:	f000 b869 	b.w	8003cc4 <_fwalk_sglue>
 8003bf2:	bf00      	nop
 8003bf4:	2000000c 	.word	0x2000000c
 8003bf8:	08005941 	.word	0x08005941
 8003bfc:	20000020 	.word	0x20000020

08003c00 <cleanup_stdio>:
 8003c00:	6841      	ldr	r1, [r0, #4]
 8003c02:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <cleanup_stdio+0x34>)
 8003c04:	b510      	push	{r4, lr}
 8003c06:	4299      	cmp	r1, r3
 8003c08:	4604      	mov	r4, r0
 8003c0a:	d001      	beq.n	8003c10 <cleanup_stdio+0x10>
 8003c0c:	f001 fe98 	bl	8005940 <_fclose_r>
 8003c10:	68a1      	ldr	r1, [r4, #8]
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <cleanup_stdio+0x38>)
 8003c14:	4299      	cmp	r1, r3
 8003c16:	d002      	beq.n	8003c1e <cleanup_stdio+0x1e>
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f001 fe91 	bl	8005940 <_fclose_r>
 8003c1e:	68e1      	ldr	r1, [r4, #12]
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <cleanup_stdio+0x3c>)
 8003c22:	4299      	cmp	r1, r3
 8003c24:	d004      	beq.n	8003c30 <cleanup_stdio+0x30>
 8003c26:	4620      	mov	r0, r4
 8003c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c2c:	f001 be88 	b.w	8005940 <_fclose_r>
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	bf00      	nop
 8003c34:	2000082c 	.word	0x2000082c
 8003c38:	20000894 	.word	0x20000894
 8003c3c:	200008fc 	.word	0x200008fc

08003c40 <global_stdio_init.part.0>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <global_stdio_init.part.0+0x30>)
 8003c44:	4c0b      	ldr	r4, [pc, #44]	@ (8003c74 <global_stdio_init.part.0+0x34>)
 8003c46:	4a0c      	ldr	r2, [pc, #48]	@ (8003c78 <global_stdio_init.part.0+0x38>)
 8003c48:	4620      	mov	r0, r4
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f7ff ff94 	bl	8003b7c <std>
 8003c54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c58:	2201      	movs	r2, #1
 8003c5a:	2109      	movs	r1, #9
 8003c5c:	f7ff ff8e 	bl	8003b7c <std>
 8003c60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c64:	2202      	movs	r2, #2
 8003c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c6a:	2112      	movs	r1, #18
 8003c6c:	f7ff bf86 	b.w	8003b7c <std>
 8003c70:	20000964 	.word	0x20000964
 8003c74:	2000082c 	.word	0x2000082c
 8003c78:	08003be9 	.word	0x08003be9

08003c7c <__sfp_lock_acquire>:
 8003c7c:	4801      	ldr	r0, [pc, #4]	@ (8003c84 <__sfp_lock_acquire+0x8>)
 8003c7e:	f000 b935 	b.w	8003eec <__retarget_lock_acquire_recursive>
 8003c82:	bf00      	nop
 8003c84:	2000096e 	.word	0x2000096e

08003c88 <__sfp_lock_release>:
 8003c88:	4801      	ldr	r0, [pc, #4]	@ (8003c90 <__sfp_lock_release+0x8>)
 8003c8a:	f000 b930 	b.w	8003eee <__retarget_lock_release_recursive>
 8003c8e:	bf00      	nop
 8003c90:	2000096e 	.word	0x2000096e

08003c94 <__sinit>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4604      	mov	r4, r0
 8003c98:	f7ff fff0 	bl	8003c7c <__sfp_lock_acquire>
 8003c9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c9e:	b11b      	cbz	r3, 8003ca8 <__sinit+0x14>
 8003ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca4:	f7ff bff0 	b.w	8003c88 <__sfp_lock_release>
 8003ca8:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <__sinit+0x28>)
 8003caa:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <__sinit+0x2c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f5      	bne.n	8003ca0 <__sinit+0xc>
 8003cb4:	f7ff ffc4 	bl	8003c40 <global_stdio_init.part.0>
 8003cb8:	e7f2      	b.n	8003ca0 <__sinit+0xc>
 8003cba:	bf00      	nop
 8003cbc:	08003c01 	.word	0x08003c01
 8003cc0:	20000964 	.word	0x20000964

08003cc4 <_fwalk_sglue>:
 8003cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc8:	4607      	mov	r7, r0
 8003cca:	4688      	mov	r8, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	2600      	movs	r6, #0
 8003cd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cd4:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd8:	d505      	bpl.n	8003ce6 <_fwalk_sglue+0x22>
 8003cda:	6824      	ldr	r4, [r4, #0]
 8003cdc:	2c00      	cmp	r4, #0
 8003cde:	d1f7      	bne.n	8003cd0 <_fwalk_sglue+0xc>
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce6:	89ab      	ldrh	r3, [r5, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d907      	bls.n	8003cfc <_fwalk_sglue+0x38>
 8003cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	d003      	beq.n	8003cfc <_fwalk_sglue+0x38>
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	47c0      	blx	r8
 8003cfa:	4306      	orrs	r6, r0
 8003cfc:	3568      	adds	r5, #104	@ 0x68
 8003cfe:	e7e9      	b.n	8003cd4 <_fwalk_sglue+0x10>

08003d00 <__sread>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	460c      	mov	r4, r1
 8003d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d08:	f000 f8a0 	bl	8003e4c <_read_r>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	bfab      	itete	ge
 8003d10:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8003d12:	89a3      	ldrhlt	r3, [r4, #12]
 8003d14:	181b      	addge	r3, r3, r0
 8003d16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d1a:	bfac      	ite	ge
 8003d1c:	6523      	strge	r3, [r4, #80]	@ 0x50
 8003d1e:	81a3      	strhlt	r3, [r4, #12]
 8003d20:	bd10      	pop	{r4, pc}

08003d22 <__swrite>:
 8003d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d26:	461f      	mov	r7, r3
 8003d28:	898b      	ldrh	r3, [r1, #12]
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	05db      	lsls	r3, r3, #23
 8003d2e:	460c      	mov	r4, r1
 8003d30:	4616      	mov	r6, r2
 8003d32:	d505      	bpl.n	8003d40 <__swrite+0x1e>
 8003d34:	2302      	movs	r3, #2
 8003d36:	2200      	movs	r2, #0
 8003d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3c:	f000 f874 	bl	8003e28 <_lseek_r>
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	4632      	mov	r2, r6
 8003d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d56:	f000 b88b 	b.w	8003e70 <_write_r>

08003d5a <__sseek>:
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d62:	f000 f861 	bl	8003e28 <_lseek_r>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	bf15      	itete	ne
 8003d6c:	6520      	strne	r0, [r4, #80]	@ 0x50
 8003d6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d76:	81a3      	strheq	r3, [r4, #12]
 8003d78:	bf18      	it	ne
 8003d7a:	81a3      	strhne	r3, [r4, #12]
 8003d7c:	bd10      	pop	{r4, pc}

08003d7e <__sclose>:
 8003d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d82:	f000 b841 	b.w	8003e08 <_close_r>

08003d86 <_vsnprintf_r>:
 8003d86:	b530      	push	{r4, r5, lr}
 8003d88:	4614      	mov	r4, r2
 8003d8a:	2c00      	cmp	r4, #0
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	461a      	mov	r2, r3
 8003d90:	b09b      	sub	sp, #108	@ 0x6c
 8003d92:	da05      	bge.n	8003da0 <_vsnprintf_r+0x1a>
 8003d94:	238b      	movs	r3, #139	@ 0x8b
 8003d96:	6003      	str	r3, [r0, #0]
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9c:	b01b      	add	sp, #108	@ 0x6c
 8003d9e:	bd30      	pop	{r4, r5, pc}
 8003da0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003da4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003da8:	bf0c      	ite	eq
 8003daa:	4623      	moveq	r3, r4
 8003dac:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003db0:	9302      	str	r3, [sp, #8]
 8003db2:	9305      	str	r3, [sp, #20]
 8003db4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003db8:	9100      	str	r1, [sp, #0]
 8003dba:	9104      	str	r1, [sp, #16]
 8003dbc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003dc0:	4669      	mov	r1, sp
 8003dc2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003dc4:	f000 fc00 	bl	80045c8 <_svfprintf_r>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	bfbc      	itt	lt
 8003dcc:	238b      	movlt	r3, #139	@ 0x8b
 8003dce:	602b      	strlt	r3, [r5, #0]
 8003dd0:	2c00      	cmp	r4, #0
 8003dd2:	d0e3      	beq.n	8003d9c <_vsnprintf_r+0x16>
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	9b00      	ldr	r3, [sp, #0]
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e7df      	b.n	8003d9c <_vsnprintf_r+0x16>

08003ddc <vsnprintf>:
 8003ddc:	b507      	push	{r0, r1, r2, lr}
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	460a      	mov	r2, r1
 8003de4:	4601      	mov	r1, r0
 8003de6:	4803      	ldr	r0, [pc, #12]	@ (8003df4 <vsnprintf+0x18>)
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	f7ff ffcc 	bl	8003d86 <_vsnprintf_r>
 8003dee:	b003      	add	sp, #12
 8003df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003df4:	20000018 	.word	0x20000018

08003df8 <memset>:
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4402      	add	r2, r0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <memset+0xa>
 8003e00:	4770      	bx	lr
 8003e02:	f803 1b01 	strb.w	r1, [r3], #1
 8003e06:	e7f9      	b.n	8003dfc <memset+0x4>

08003e08 <_close_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4d05      	ldr	r5, [pc, #20]	@ (8003e24 <_close_r+0x1c>)
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fe f8a9 	bl	8001f6a <_close>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_close_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_close_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000968 	.word	0x20000968

08003e28 <_lseek_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	2200      	movs	r2, #0
 8003e32:	4d05      	ldr	r5, [pc, #20]	@ (8003e48 <_lseek_r+0x20>)
 8003e34:	602a      	str	r2, [r5, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f7fe f8bb 	bl	8001fb2 <_lseek>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_lseek_r+0x1e>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_lseek_r+0x1e>
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	20000968 	.word	0x20000968

08003e4c <_read_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	2200      	movs	r2, #0
 8003e56:	4d05      	ldr	r5, [pc, #20]	@ (8003e6c <_read_r+0x20>)
 8003e58:	602a      	str	r2, [r5, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f7fe f84c 	bl	8001ef8 <_read>
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	d102      	bne.n	8003e6a <_read_r+0x1e>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b103      	cbz	r3, 8003e6a <_read_r+0x1e>
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	20000968 	.word	0x20000968

08003e70 <_write_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4604      	mov	r4, r0
 8003e74:	4608      	mov	r0, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4d05      	ldr	r5, [pc, #20]	@ (8003e90 <_write_r+0x20>)
 8003e7c:	602a      	str	r2, [r5, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f7fe f857 	bl	8001f32 <_write>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_write_r+0x1e>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_write_r+0x1e>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	20000968 	.word	0x20000968

08003e94 <__errno>:
 8003e94:	4b01      	ldr	r3, [pc, #4]	@ (8003e9c <__errno+0x8>)
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20000018 	.word	0x20000018

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	4d0c      	ldr	r5, [pc, #48]	@ (8003ed8 <__libc_init_array+0x38>)
 8003ea6:	4c0d      	ldr	r4, [pc, #52]	@ (8003edc <__libc_init_array+0x3c>)
 8003ea8:	1b64      	subs	r4, r4, r5
 8003eaa:	10a4      	asrs	r4, r4, #2
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	f005 fa9a 	bl	80093e8 <_init>
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	4d0a      	ldr	r5, [pc, #40]	@ (8003ee0 <__libc_init_array+0x40>)
 8003eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ee4 <__libc_init_array+0x44>)
 8003eba:	1b64      	subs	r4, r4, r5
 8003ebc:	10a4      	asrs	r4, r4, #2
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	08009828 	.word	0x08009828
 8003edc:	08009828 	.word	0x08009828
 8003ee0:	08009828 	.word	0x08009828
 8003ee4:	08009830 	.word	0x08009830

08003ee8 <__retarget_lock_init_recursive>:
 8003ee8:	4770      	bx	lr

08003eea <__retarget_lock_close_recursive>:
 8003eea:	4770      	bx	lr

08003eec <__retarget_lock_acquire_recursive>:
 8003eec:	4770      	bx	lr

08003eee <__retarget_lock_release_recursive>:
 8003eee:	4770      	bx	lr

08003ef0 <register_fini>:
 8003ef0:	4b02      	ldr	r3, [pc, #8]	@ (8003efc <register_fini+0xc>)
 8003ef2:	b113      	cbz	r3, 8003efa <register_fini+0xa>
 8003ef4:	4802      	ldr	r0, [pc, #8]	@ (8003f00 <register_fini+0x10>)
 8003ef6:	f000 b805 	b.w	8003f04 <atexit>
 8003efa:	4770      	bx	lr
 8003efc:	00000000 	.word	0x00000000
 8003f00:	08005b8d 	.word	0x08005b8d

08003f04 <atexit>:
 8003f04:	2300      	movs	r3, #0
 8003f06:	4601      	mov	r1, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f001 bea0 	b.w	8005c50 <__register_exitproc>

08003f10 <_malloc_trim_r>:
 8003f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f14:	4606      	mov	r6, r0
 8003f16:	2008      	movs	r0, #8
 8003f18:	4689      	mov	r9, r1
 8003f1a:	f001 fe4b 	bl	8005bb4 <sysconf>
 8003f1e:	4680      	mov	r8, r0
 8003f20:	4f23      	ldr	r7, [pc, #140]	@ (8003fb0 <_malloc_trim_r+0xa0>)
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 fb44 	bl	80045b0 <__malloc_lock>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	685d      	ldr	r5, [r3, #4]
 8003f2c:	f025 0503 	bic.w	r5, r5, #3
 8003f30:	f1a5 0411 	sub.w	r4, r5, #17
 8003f34:	eba4 0409 	sub.w	r4, r4, r9
 8003f38:	4444      	add	r4, r8
 8003f3a:	fbb4 f4f8 	udiv	r4, r4, r8
 8003f3e:	3c01      	subs	r4, #1
 8003f40:	fb08 f404 	mul.w	r4, r8, r4
 8003f44:	45a0      	cmp	r8, r4
 8003f46:	dd05      	ble.n	8003f54 <_malloc_trim_r+0x44>
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 fb37 	bl	80045bc <__malloc_unlock>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f54:	2100      	movs	r1, #0
 8003f56:	4630      	mov	r0, r6
 8003f58:	f001 fe08 	bl	8005b6c <_sbrk_r>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	442b      	add	r3, r5
 8003f60:	4298      	cmp	r0, r3
 8003f62:	d1f1      	bne.n	8003f48 <_malloc_trim_r+0x38>
 8003f64:	4630      	mov	r0, r6
 8003f66:	4261      	negs	r1, r4
 8003f68:	f001 fe00 	bl	8005b6c <_sbrk_r>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d110      	bne.n	8003f92 <_malloc_trim_r+0x82>
 8003f70:	2100      	movs	r1, #0
 8003f72:	4630      	mov	r0, r6
 8003f74:	f001 fdfa 	bl	8005b6c <_sbrk_r>
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	1a83      	subs	r3, r0, r2
 8003f7c:	2b0f      	cmp	r3, #15
 8003f7e:	dde3      	ble.n	8003f48 <_malloc_trim_r+0x38>
 8003f80:	490c      	ldr	r1, [pc, #48]	@ (8003fb4 <_malloc_trim_r+0xa4>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6809      	ldr	r1, [r1, #0]
 8003f88:	6053      	str	r3, [r2, #4]
 8003f8a:	1a40      	subs	r0, r0, r1
 8003f8c:	490a      	ldr	r1, [pc, #40]	@ (8003fb8 <_malloc_trim_r+0xa8>)
 8003f8e:	6008      	str	r0, [r1, #0]
 8003f90:	e7da      	b.n	8003f48 <_malloc_trim_r+0x38>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4a08      	ldr	r2, [pc, #32]	@ (8003fb8 <_malloc_trim_r+0xa8>)
 8003f96:	1b2d      	subs	r5, r5, r4
 8003f98:	f045 0501 	orr.w	r5, r5, #1
 8003f9c:	605d      	str	r5, [r3, #4]
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	1b1b      	subs	r3, r3, r4
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	f000 fb09 	bl	80045bc <__malloc_unlock>
 8003faa:	2001      	movs	r0, #1
 8003fac:	e7d0      	b.n	8003f50 <_malloc_trim_r+0x40>
 8003fae:	bf00      	nop
 8003fb0:	2000014c 	.word	0x2000014c
 8003fb4:	20000144 	.word	0x20000144
 8003fb8:	20000974 	.word	0x20000974

08003fbc <_free_r>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	460f      	mov	r7, r1
 8003fc2:	2900      	cmp	r1, #0
 8003fc4:	f000 80b1 	beq.w	800412a <_free_r+0x16e>
 8003fc8:	f000 faf2 	bl	80045b0 <__malloc_lock>
 8003fcc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8003fd0:	4d56      	ldr	r5, [pc, #344]	@ (800412c <_free_r+0x170>)
 8003fd2:	f022 0001 	bic.w	r0, r2, #1
 8003fd6:	f1a7 0308 	sub.w	r3, r7, #8
 8003fda:	eb03 0c00 	add.w	ip, r3, r0
 8003fde:	68a9      	ldr	r1, [r5, #8]
 8003fe0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8003fe4:	4561      	cmp	r1, ip
 8003fe6:	f026 0603 	bic.w	r6, r6, #3
 8003fea:	f002 0201 	and.w	r2, r2, #1
 8003fee:	d11b      	bne.n	8004028 <_free_r+0x6c>
 8003ff0:	4406      	add	r6, r0
 8003ff2:	b93a      	cbnz	r2, 8004004 <_free_r+0x48>
 8003ff4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	4416      	add	r6, r2
 8003ffc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004000:	60ca      	str	r2, [r1, #12]
 8004002:	6091      	str	r1, [r2, #8]
 8004004:	f046 0201 	orr.w	r2, r6, #1
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	60ab      	str	r3, [r5, #8]
 800400c:	4b48      	ldr	r3, [pc, #288]	@ (8004130 <_free_r+0x174>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	42b3      	cmp	r3, r6
 8004012:	d804      	bhi.n	800401e <_free_r+0x62>
 8004014:	4b47      	ldr	r3, [pc, #284]	@ (8004134 <_free_r+0x178>)
 8004016:	4620      	mov	r0, r4
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	f7ff ff79 	bl	8003f10 <_malloc_trim_r>
 800401e:	4620      	mov	r0, r4
 8004020:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004024:	f000 baca 	b.w	80045bc <__malloc_unlock>
 8004028:	f8cc 6004 	str.w	r6, [ip, #4]
 800402c:	2a00      	cmp	r2, #0
 800402e:	d138      	bne.n	80040a2 <_free_r+0xe6>
 8004030:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8004034:	f105 0708 	add.w	r7, r5, #8
 8004038:	1a5b      	subs	r3, r3, r1
 800403a:	4408      	add	r0, r1
 800403c:	6899      	ldr	r1, [r3, #8]
 800403e:	42b9      	cmp	r1, r7
 8004040:	d031      	beq.n	80040a6 <_free_r+0xea>
 8004042:	68df      	ldr	r7, [r3, #12]
 8004044:	60cf      	str	r7, [r1, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	eb0c 0106 	add.w	r1, ip, r6
 800404c:	6849      	ldr	r1, [r1, #4]
 800404e:	07c9      	lsls	r1, r1, #31
 8004050:	d40b      	bmi.n	800406a <_free_r+0xae>
 8004052:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004056:	4430      	add	r0, r6
 8004058:	bb3a      	cbnz	r2, 80040aa <_free_r+0xee>
 800405a:	4e37      	ldr	r6, [pc, #220]	@ (8004138 <_free_r+0x17c>)
 800405c:	42b1      	cmp	r1, r6
 800405e:	d124      	bne.n	80040aa <_free_r+0xee>
 8004060:	2201      	movs	r2, #1
 8004062:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8004066:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800406a:	f040 0101 	orr.w	r1, r0, #1
 800406e:	6059      	str	r1, [r3, #4]
 8004070:	5018      	str	r0, [r3, r0]
 8004072:	2a00      	cmp	r2, #0
 8004074:	d1d3      	bne.n	800401e <_free_r+0x62>
 8004076:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800407a:	d21b      	bcs.n	80040b4 <_free_r+0xf8>
 800407c:	2101      	movs	r1, #1
 800407e:	08c2      	lsrs	r2, r0, #3
 8004080:	0940      	lsrs	r0, r0, #5
 8004082:	4081      	lsls	r1, r0
 8004084:	6868      	ldr	r0, [r5, #4]
 8004086:	3201      	adds	r2, #1
 8004088:	4301      	orrs	r1, r0
 800408a:	6069      	str	r1, [r5, #4]
 800408c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8004090:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8004094:	3908      	subs	r1, #8
 8004096:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800409a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800409e:	60c3      	str	r3, [r0, #12]
 80040a0:	e7bd      	b.n	800401e <_free_r+0x62>
 80040a2:	2200      	movs	r2, #0
 80040a4:	e7d0      	b.n	8004048 <_free_r+0x8c>
 80040a6:	2201      	movs	r2, #1
 80040a8:	e7ce      	b.n	8004048 <_free_r+0x8c>
 80040aa:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80040ae:	60ce      	str	r6, [r1, #12]
 80040b0:	60b1      	str	r1, [r6, #8]
 80040b2:	e7da      	b.n	800406a <_free_r+0xae>
 80040b4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 80040b8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80040bc:	d214      	bcs.n	80040e8 <_free_r+0x12c>
 80040be:	0982      	lsrs	r2, r0, #6
 80040c0:	3238      	adds	r2, #56	@ 0x38
 80040c2:	1c51      	adds	r1, r2, #1
 80040c4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80040c8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80040cc:	428e      	cmp	r6, r1
 80040ce:	d125      	bne.n	800411c <_free_r+0x160>
 80040d0:	2001      	movs	r0, #1
 80040d2:	1092      	asrs	r2, r2, #2
 80040d4:	fa00 f202 	lsl.w	r2, r0, r2
 80040d8:	6868      	ldr	r0, [r5, #4]
 80040da:	4302      	orrs	r2, r0
 80040dc:	606a      	str	r2, [r5, #4]
 80040de:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80040e2:	60b3      	str	r3, [r6, #8]
 80040e4:	60cb      	str	r3, [r1, #12]
 80040e6:	e79a      	b.n	800401e <_free_r+0x62>
 80040e8:	2a14      	cmp	r2, #20
 80040ea:	d801      	bhi.n	80040f0 <_free_r+0x134>
 80040ec:	325b      	adds	r2, #91	@ 0x5b
 80040ee:	e7e8      	b.n	80040c2 <_free_r+0x106>
 80040f0:	2a54      	cmp	r2, #84	@ 0x54
 80040f2:	d802      	bhi.n	80040fa <_free_r+0x13e>
 80040f4:	0b02      	lsrs	r2, r0, #12
 80040f6:	326e      	adds	r2, #110	@ 0x6e
 80040f8:	e7e3      	b.n	80040c2 <_free_r+0x106>
 80040fa:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80040fe:	d802      	bhi.n	8004106 <_free_r+0x14a>
 8004100:	0bc2      	lsrs	r2, r0, #15
 8004102:	3277      	adds	r2, #119	@ 0x77
 8004104:	e7dd      	b.n	80040c2 <_free_r+0x106>
 8004106:	f240 5154 	movw	r1, #1364	@ 0x554
 800410a:	428a      	cmp	r2, r1
 800410c:	bf96      	itet	ls
 800410e:	0c82      	lsrls	r2, r0, #18
 8004110:	227e      	movhi	r2, #126	@ 0x7e
 8004112:	327c      	addls	r2, #124	@ 0x7c
 8004114:	e7d5      	b.n	80040c2 <_free_r+0x106>
 8004116:	6889      	ldr	r1, [r1, #8]
 8004118:	428e      	cmp	r6, r1
 800411a:	d004      	beq.n	8004126 <_free_r+0x16a>
 800411c:	684a      	ldr	r2, [r1, #4]
 800411e:	f022 0203 	bic.w	r2, r2, #3
 8004122:	4282      	cmp	r2, r0
 8004124:	d8f7      	bhi.n	8004116 <_free_r+0x15a>
 8004126:	68ce      	ldr	r6, [r1, #12]
 8004128:	e7d9      	b.n	80040de <_free_r+0x122>
 800412a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800412c:	2000014c 	.word	0x2000014c
 8004130:	20000148 	.word	0x20000148
 8004134:	200009a4 	.word	0x200009a4
 8004138:	20000154 	.word	0x20000154

0800413c <_malloc_r>:
 800413c:	f101 030b 	add.w	r3, r1, #11
 8004140:	2b16      	cmp	r3, #22
 8004142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004146:	4605      	mov	r5, r0
 8004148:	d906      	bls.n	8004158 <_malloc_r+0x1c>
 800414a:	f033 0707 	bics.w	r7, r3, #7
 800414e:	d504      	bpl.n	800415a <_malloc_r+0x1e>
 8004150:	230c      	movs	r3, #12
 8004152:	602b      	str	r3, [r5, #0]
 8004154:	2400      	movs	r4, #0
 8004156:	e1a1      	b.n	800449c <_malloc_r+0x360>
 8004158:	2710      	movs	r7, #16
 800415a:	42b9      	cmp	r1, r7
 800415c:	d8f8      	bhi.n	8004150 <_malloc_r+0x14>
 800415e:	4628      	mov	r0, r5
 8004160:	f000 fa26 	bl	80045b0 <__malloc_lock>
 8004164:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8004168:	4eae      	ldr	r6, [pc, #696]	@ (8004424 <_malloc_r+0x2e8>)
 800416a:	d237      	bcs.n	80041dc <_malloc_r+0xa0>
 800416c:	f107 0208 	add.w	r2, r7, #8
 8004170:	4432      	add	r2, r6
 8004172:	6854      	ldr	r4, [r2, #4]
 8004174:	f1a2 0108 	sub.w	r1, r2, #8
 8004178:	428c      	cmp	r4, r1
 800417a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800417e:	d102      	bne.n	8004186 <_malloc_r+0x4a>
 8004180:	68d4      	ldr	r4, [r2, #12]
 8004182:	42a2      	cmp	r2, r4
 8004184:	d010      	beq.n	80041a8 <_malloc_r+0x6c>
 8004186:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800418a:	6863      	ldr	r3, [r4, #4]
 800418c:	60ca      	str	r2, [r1, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	6091      	str	r1, [r2, #8]
 8004194:	4423      	add	r3, r4
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 fa0c 	bl	80045bc <__malloc_unlock>
 80041a4:	3408      	adds	r4, #8
 80041a6:	e179      	b.n	800449c <_malloc_r+0x360>
 80041a8:	3302      	adds	r3, #2
 80041aa:	6934      	ldr	r4, [r6, #16]
 80041ac:	499e      	ldr	r1, [pc, #632]	@ (8004428 <_malloc_r+0x2ec>)
 80041ae:	428c      	cmp	r4, r1
 80041b0:	d077      	beq.n	80042a2 <_malloc_r+0x166>
 80041b2:	6862      	ldr	r2, [r4, #4]
 80041b4:	f022 0c03 	bic.w	ip, r2, #3
 80041b8:	ebac 0007 	sub.w	r0, ip, r7
 80041bc:	280f      	cmp	r0, #15
 80041be:	dd48      	ble.n	8004252 <_malloc_r+0x116>
 80041c0:	19e2      	adds	r2, r4, r7
 80041c2:	f040 0301 	orr.w	r3, r0, #1
 80041c6:	f047 0701 	orr.w	r7, r7, #1
 80041ca:	6067      	str	r7, [r4, #4]
 80041cc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80041d0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80041d4:	6053      	str	r3, [r2, #4]
 80041d6:	f844 000c 	str.w	r0, [r4, ip]
 80041da:	e7e0      	b.n	800419e <_malloc_r+0x62>
 80041dc:	0a7b      	lsrs	r3, r7, #9
 80041de:	d02a      	beq.n	8004236 <_malloc_r+0xfa>
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d812      	bhi.n	800420a <_malloc_r+0xce>
 80041e4:	09bb      	lsrs	r3, r7, #6
 80041e6:	3338      	adds	r3, #56	@ 0x38
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80041ee:	6854      	ldr	r4, [r2, #4]
 80041f0:	f1a2 0c08 	sub.w	ip, r2, #8
 80041f4:	4564      	cmp	r4, ip
 80041f6:	d006      	beq.n	8004206 <_malloc_r+0xca>
 80041f8:	6862      	ldr	r2, [r4, #4]
 80041fa:	f022 0203 	bic.w	r2, r2, #3
 80041fe:	1bd0      	subs	r0, r2, r7
 8004200:	280f      	cmp	r0, #15
 8004202:	dd1c      	ble.n	800423e <_malloc_r+0x102>
 8004204:	3b01      	subs	r3, #1
 8004206:	3301      	adds	r3, #1
 8004208:	e7cf      	b.n	80041aa <_malloc_r+0x6e>
 800420a:	2b14      	cmp	r3, #20
 800420c:	d801      	bhi.n	8004212 <_malloc_r+0xd6>
 800420e:	335b      	adds	r3, #91	@ 0x5b
 8004210:	e7ea      	b.n	80041e8 <_malloc_r+0xac>
 8004212:	2b54      	cmp	r3, #84	@ 0x54
 8004214:	d802      	bhi.n	800421c <_malloc_r+0xe0>
 8004216:	0b3b      	lsrs	r3, r7, #12
 8004218:	336e      	adds	r3, #110	@ 0x6e
 800421a:	e7e5      	b.n	80041e8 <_malloc_r+0xac>
 800421c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8004220:	d802      	bhi.n	8004228 <_malloc_r+0xec>
 8004222:	0bfb      	lsrs	r3, r7, #15
 8004224:	3377      	adds	r3, #119	@ 0x77
 8004226:	e7df      	b.n	80041e8 <_malloc_r+0xac>
 8004228:	f240 5254 	movw	r2, #1364	@ 0x554
 800422c:	4293      	cmp	r3, r2
 800422e:	d804      	bhi.n	800423a <_malloc_r+0xfe>
 8004230:	0cbb      	lsrs	r3, r7, #18
 8004232:	337c      	adds	r3, #124	@ 0x7c
 8004234:	e7d8      	b.n	80041e8 <_malloc_r+0xac>
 8004236:	233f      	movs	r3, #63	@ 0x3f
 8004238:	e7d6      	b.n	80041e8 <_malloc_r+0xac>
 800423a:	237e      	movs	r3, #126	@ 0x7e
 800423c:	e7d4      	b.n	80041e8 <_malloc_r+0xac>
 800423e:	2800      	cmp	r0, #0
 8004240:	68e1      	ldr	r1, [r4, #12]
 8004242:	db04      	blt.n	800424e <_malloc_r+0x112>
 8004244:	68a3      	ldr	r3, [r4, #8]
 8004246:	60d9      	str	r1, [r3, #12]
 8004248:	608b      	str	r3, [r1, #8]
 800424a:	18a3      	adds	r3, r4, r2
 800424c:	e7a3      	b.n	8004196 <_malloc_r+0x5a>
 800424e:	460c      	mov	r4, r1
 8004250:	e7d0      	b.n	80041f4 <_malloc_r+0xb8>
 8004252:	2800      	cmp	r0, #0
 8004254:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8004258:	db07      	blt.n	800426a <_malloc_r+0x12e>
 800425a:	44a4      	add	ip, r4
 800425c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	f8cc 3004 	str.w	r3, [ip, #4]
 8004268:	e799      	b.n	800419e <_malloc_r+0x62>
 800426a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800426e:	6870      	ldr	r0, [r6, #4]
 8004270:	f080 8093 	bcs.w	800439a <_malloc_r+0x25e>
 8004274:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8004278:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800427c:	f04f 0c01 	mov.w	ip, #1
 8004280:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004284:	ea4c 0000 	orr.w	r0, ip, r0
 8004288:	3201      	adds	r2, #1
 800428a:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800428e:	6070      	str	r0, [r6, #4]
 8004290:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8004294:	3808      	subs	r0, #8
 8004296:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800429a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800429e:	f8cc 400c 	str.w	r4, [ip, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	1098      	asrs	r0, r3, #2
 80042a6:	4082      	lsls	r2, r0
 80042a8:	6870      	ldr	r0, [r6, #4]
 80042aa:	4290      	cmp	r0, r2
 80042ac:	d326      	bcc.n	80042fc <_malloc_r+0x1c0>
 80042ae:	4210      	tst	r0, r2
 80042b0:	d106      	bne.n	80042c0 <_malloc_r+0x184>
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	0052      	lsls	r2, r2, #1
 80042b8:	4210      	tst	r0, r2
 80042ba:	f103 0304 	add.w	r3, r3, #4
 80042be:	d0fa      	beq.n	80042b6 <_malloc_r+0x17a>
 80042c0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80042c4:	46c1      	mov	r9, r8
 80042c6:	469e      	mov	lr, r3
 80042c8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80042cc:	454c      	cmp	r4, r9
 80042ce:	f040 80b7 	bne.w	8004440 <_malloc_r+0x304>
 80042d2:	f10e 0e01 	add.w	lr, lr, #1
 80042d6:	f01e 0f03 	tst.w	lr, #3
 80042da:	f109 0908 	add.w	r9, r9, #8
 80042de:	d1f3      	bne.n	80042c8 <_malloc_r+0x18c>
 80042e0:	0798      	lsls	r0, r3, #30
 80042e2:	f040 80e1 	bne.w	80044a8 <_malloc_r+0x36c>
 80042e6:	6873      	ldr	r3, [r6, #4]
 80042e8:	ea23 0302 	bic.w	r3, r3, r2
 80042ec:	6073      	str	r3, [r6, #4]
 80042ee:	6870      	ldr	r0, [r6, #4]
 80042f0:	0052      	lsls	r2, r2, #1
 80042f2:	4290      	cmp	r0, r2
 80042f4:	d302      	bcc.n	80042fc <_malloc_r+0x1c0>
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	f040 80e2 	bne.w	80044c0 <_malloc_r+0x384>
 80042fc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8004300:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004304:	f023 0903 	bic.w	r9, r3, #3
 8004308:	45b9      	cmp	r9, r7
 800430a:	d304      	bcc.n	8004316 <_malloc_r+0x1da>
 800430c:	eba9 0207 	sub.w	r2, r9, r7
 8004310:	2a0f      	cmp	r2, #15
 8004312:	f300 8140 	bgt.w	8004596 <_malloc_r+0x45a>
 8004316:	4b45      	ldr	r3, [pc, #276]	@ (800442c <_malloc_r+0x2f0>)
 8004318:	2008      	movs	r0, #8
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	eb0a 0b09 	add.w	fp, sl, r9
 8004320:	3110      	adds	r1, #16
 8004322:	4439      	add	r1, r7
 8004324:	9101      	str	r1, [sp, #4]
 8004326:	f001 fc45 	bl	8005bb4 <sysconf>
 800432a:	4a41      	ldr	r2, [pc, #260]	@ (8004430 <_malloc_r+0x2f4>)
 800432c:	9901      	ldr	r1, [sp, #4]
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	4680      	mov	r8, r0
 8004332:	3301      	adds	r3, #1
 8004334:	bf1f      	itttt	ne
 8004336:	f101 31ff 	addne.w	r1, r1, #4294967295
 800433a:	1809      	addne	r1, r1, r0
 800433c:	4243      	negne	r3, r0
 800433e:	4019      	andne	r1, r3
 8004340:	4628      	mov	r0, r5
 8004342:	9101      	str	r1, [sp, #4]
 8004344:	f001 fc12 	bl	8005b6c <_sbrk_r>
 8004348:	1c42      	adds	r2, r0, #1
 800434a:	4604      	mov	r4, r0
 800434c:	f000 80f6 	beq.w	800453c <_malloc_r+0x400>
 8004350:	4583      	cmp	fp, r0
 8004352:	9901      	ldr	r1, [sp, #4]
 8004354:	4a36      	ldr	r2, [pc, #216]	@ (8004430 <_malloc_r+0x2f4>)
 8004356:	d902      	bls.n	800435e <_malloc_r+0x222>
 8004358:	45b2      	cmp	sl, r6
 800435a:	f040 80ef 	bne.w	800453c <_malloc_r+0x400>
 800435e:	4b35      	ldr	r3, [pc, #212]	@ (8004434 <_malloc_r+0x2f8>)
 8004360:	45a3      	cmp	fp, r4
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	f108 3cff 	add.w	ip, r8, #4294967295
 8004368:	4408      	add	r0, r1
 800436a:	6018      	str	r0, [r3, #0]
 800436c:	f040 80aa 	bne.w	80044c4 <_malloc_r+0x388>
 8004370:	ea1b 0f0c 	tst.w	fp, ip
 8004374:	f040 80a6 	bne.w	80044c4 <_malloc_r+0x388>
 8004378:	68b2      	ldr	r2, [r6, #8]
 800437a:	4449      	add	r1, r9
 800437c:	f041 0101 	orr.w	r1, r1, #1
 8004380:	6051      	str	r1, [r2, #4]
 8004382:	4a2d      	ldr	r2, [pc, #180]	@ (8004438 <_malloc_r+0x2fc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6811      	ldr	r1, [r2, #0]
 8004388:	428b      	cmp	r3, r1
 800438a:	bf88      	it	hi
 800438c:	6013      	strhi	r3, [r2, #0]
 800438e:	4a2b      	ldr	r2, [pc, #172]	@ (800443c <_malloc_r+0x300>)
 8004390:	6811      	ldr	r1, [r2, #0]
 8004392:	428b      	cmp	r3, r1
 8004394:	bf88      	it	hi
 8004396:	6013      	strhi	r3, [r2, #0]
 8004398:	e0d0      	b.n	800453c <_malloc_r+0x400>
 800439a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800439e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80043a2:	d218      	bcs.n	80043d6 <_malloc_r+0x29a>
 80043a4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80043a8:	3238      	adds	r2, #56	@ 0x38
 80043aa:	f102 0e01 	add.w	lr, r2, #1
 80043ae:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80043b2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80043b6:	45f0      	cmp	r8, lr
 80043b8:	d12b      	bne.n	8004412 <_malloc_r+0x2d6>
 80043ba:	f04f 0c01 	mov.w	ip, #1
 80043be:	1092      	asrs	r2, r2, #2
 80043c0:	fa0c f202 	lsl.w	r2, ip, r2
 80043c4:	4302      	orrs	r2, r0
 80043c6:	6072      	str	r2, [r6, #4]
 80043c8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80043cc:	f8c8 4008 	str.w	r4, [r8, #8]
 80043d0:	f8ce 400c 	str.w	r4, [lr, #12]
 80043d4:	e765      	b.n	80042a2 <_malloc_r+0x166>
 80043d6:	2a14      	cmp	r2, #20
 80043d8:	d801      	bhi.n	80043de <_malloc_r+0x2a2>
 80043da:	325b      	adds	r2, #91	@ 0x5b
 80043dc:	e7e5      	b.n	80043aa <_malloc_r+0x26e>
 80043de:	2a54      	cmp	r2, #84	@ 0x54
 80043e0:	d803      	bhi.n	80043ea <_malloc_r+0x2ae>
 80043e2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80043e6:	326e      	adds	r2, #110	@ 0x6e
 80043e8:	e7df      	b.n	80043aa <_malloc_r+0x26e>
 80043ea:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80043ee:	d803      	bhi.n	80043f8 <_malloc_r+0x2bc>
 80043f0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80043f4:	3277      	adds	r2, #119	@ 0x77
 80043f6:	e7d8      	b.n	80043aa <_malloc_r+0x26e>
 80043f8:	f240 5e54 	movw	lr, #1364	@ 0x554
 80043fc:	4572      	cmp	r2, lr
 80043fe:	bf96      	itet	ls
 8004400:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8004404:	227e      	movhi	r2, #126	@ 0x7e
 8004406:	327c      	addls	r2, #124	@ 0x7c
 8004408:	e7cf      	b.n	80043aa <_malloc_r+0x26e>
 800440a:	f8de e008 	ldr.w	lr, [lr, #8]
 800440e:	45f0      	cmp	r8, lr
 8004410:	d005      	beq.n	800441e <_malloc_r+0x2e2>
 8004412:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004416:	f022 0203 	bic.w	r2, r2, #3
 800441a:	4562      	cmp	r2, ip
 800441c:	d8f5      	bhi.n	800440a <_malloc_r+0x2ce>
 800441e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8004422:	e7d1      	b.n	80043c8 <_malloc_r+0x28c>
 8004424:	2000014c 	.word	0x2000014c
 8004428:	20000154 	.word	0x20000154
 800442c:	200009a4 	.word	0x200009a4
 8004430:	20000144 	.word	0x20000144
 8004434:	20000974 	.word	0x20000974
 8004438:	200009a0 	.word	0x200009a0
 800443c:	2000099c 	.word	0x2000099c
 8004440:	6860      	ldr	r0, [r4, #4]
 8004442:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8004446:	f020 0003 	bic.w	r0, r0, #3
 800444a:	eba0 0a07 	sub.w	sl, r0, r7
 800444e:	f1ba 0f0f 	cmp.w	sl, #15
 8004452:	dd12      	ble.n	800447a <_malloc_r+0x33e>
 8004454:	68a3      	ldr	r3, [r4, #8]
 8004456:	19e2      	adds	r2, r4, r7
 8004458:	f047 0701 	orr.w	r7, r7, #1
 800445c:	6067      	str	r7, [r4, #4]
 800445e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8004462:	f8cc 3008 	str.w	r3, [ip, #8]
 8004466:	f04a 0301 	orr.w	r3, sl, #1
 800446a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800446e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8004472:	6053      	str	r3, [r2, #4]
 8004474:	f844 a000 	str.w	sl, [r4, r0]
 8004478:	e691      	b.n	800419e <_malloc_r+0x62>
 800447a:	f1ba 0f00 	cmp.w	sl, #0
 800447e:	db11      	blt.n	80044a4 <_malloc_r+0x368>
 8004480:	4420      	add	r0, r4
 8004482:	6843      	ldr	r3, [r0, #4]
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6043      	str	r3, [r0, #4]
 800448a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800448e:	4628      	mov	r0, r5
 8004490:	f8c3 c00c 	str.w	ip, [r3, #12]
 8004494:	f8cc 3008 	str.w	r3, [ip, #8]
 8004498:	f000 f890 	bl	80045bc <__malloc_unlock>
 800449c:	4620      	mov	r0, r4
 800449e:	b003      	add	sp, #12
 80044a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a4:	4664      	mov	r4, ip
 80044a6:	e711      	b.n	80042cc <_malloc_r+0x190>
 80044a8:	f858 0908 	ldr.w	r0, [r8], #-8
 80044ac:	3b01      	subs	r3, #1
 80044ae:	4540      	cmp	r0, r8
 80044b0:	f43f af16 	beq.w	80042e0 <_malloc_r+0x1a4>
 80044b4:	e71b      	b.n	80042ee <_malloc_r+0x1b2>
 80044b6:	3304      	adds	r3, #4
 80044b8:	0052      	lsls	r2, r2, #1
 80044ba:	4210      	tst	r0, r2
 80044bc:	d0fb      	beq.n	80044b6 <_malloc_r+0x37a>
 80044be:	e6ff      	b.n	80042c0 <_malloc_r+0x184>
 80044c0:	4673      	mov	r3, lr
 80044c2:	e7fa      	b.n	80044ba <_malloc_r+0x37e>
 80044c4:	f8d2 e000 	ldr.w	lr, [r2]
 80044c8:	f1be 3fff 	cmp.w	lr, #4294967295
 80044cc:	bf1b      	ittet	ne
 80044ce:	eba4 0b0b 	subne.w	fp, r4, fp
 80044d2:	eb0b 0200 	addne.w	r2, fp, r0
 80044d6:	6014      	streq	r4, [r2, #0]
 80044d8:	601a      	strne	r2, [r3, #0]
 80044da:	f014 0b07 	ands.w	fp, r4, #7
 80044de:	bf0e      	itee	eq
 80044e0:	4658      	moveq	r0, fp
 80044e2:	f1cb 0008 	rsbne	r0, fp, #8
 80044e6:	1824      	addne	r4, r4, r0
 80044e8:	1862      	adds	r2, r4, r1
 80044ea:	ea02 010c 	and.w	r1, r2, ip
 80044ee:	4480      	add	r8, r0
 80044f0:	eba8 0801 	sub.w	r8, r8, r1
 80044f4:	ea08 080c 	and.w	r8, r8, ip
 80044f8:	4641      	mov	r1, r8
 80044fa:	4628      	mov	r0, r5
 80044fc:	9201      	str	r2, [sp, #4]
 80044fe:	f001 fb35 	bl	8005b6c <_sbrk_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	9a01      	ldr	r2, [sp, #4]
 8004506:	4b29      	ldr	r3, [pc, #164]	@ (80045ac <_malloc_r+0x470>)
 8004508:	d107      	bne.n	800451a <_malloc_r+0x3de>
 800450a:	f1bb 0f00 	cmp.w	fp, #0
 800450e:	d023      	beq.n	8004558 <_malloc_r+0x41c>
 8004510:	f04f 0800 	mov.w	r8, #0
 8004514:	f1ab 0008 	sub.w	r0, fp, #8
 8004518:	4410      	add	r0, r2
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	1b00      	subs	r0, r0, r4
 800451e:	4440      	add	r0, r8
 8004520:	4442      	add	r2, r8
 8004522:	f040 0001 	orr.w	r0, r0, #1
 8004526:	45b2      	cmp	sl, r6
 8004528:	60b4      	str	r4, [r6, #8]
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	6060      	str	r0, [r4, #4]
 800452e:	f43f af28 	beq.w	8004382 <_malloc_r+0x246>
 8004532:	f1b9 0f0f 	cmp.w	r9, #15
 8004536:	d812      	bhi.n	800455e <_malloc_r+0x422>
 8004538:	2301      	movs	r3, #1
 800453a:	6063      	str	r3, [r4, #4]
 800453c:	68b3      	ldr	r3, [r6, #8]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 0303 	bic.w	r3, r3, #3
 8004544:	42bb      	cmp	r3, r7
 8004546:	eba3 0207 	sub.w	r2, r3, r7
 800454a:	d301      	bcc.n	8004550 <_malloc_r+0x414>
 800454c:	2a0f      	cmp	r2, #15
 800454e:	dc22      	bgt.n	8004596 <_malloc_r+0x45a>
 8004550:	4628      	mov	r0, r5
 8004552:	f000 f833 	bl	80045bc <__malloc_unlock>
 8004556:	e5fd      	b.n	8004154 <_malloc_r+0x18>
 8004558:	4610      	mov	r0, r2
 800455a:	46d8      	mov	r8, fp
 800455c:	e7dd      	b.n	800451a <_malloc_r+0x3de>
 800455e:	2105      	movs	r1, #5
 8004560:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004564:	f1a9 090c 	sub.w	r9, r9, #12
 8004568:	f029 0907 	bic.w	r9, r9, #7
 800456c:	f002 0201 	and.w	r2, r2, #1
 8004570:	ea42 0209 	orr.w	r2, r2, r9
 8004574:	f8ca 2004 	str.w	r2, [sl, #4]
 8004578:	f1b9 0f0f 	cmp.w	r9, #15
 800457c:	eb0a 0209 	add.w	r2, sl, r9
 8004580:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8004584:	f67f aefd 	bls.w	8004382 <_malloc_r+0x246>
 8004588:	4628      	mov	r0, r5
 800458a:	f10a 0108 	add.w	r1, sl, #8
 800458e:	f7ff fd15 	bl	8003fbc <_free_r>
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <_malloc_r+0x470>)
 8004594:	e6f5      	b.n	8004382 <_malloc_r+0x246>
 8004596:	68b4      	ldr	r4, [r6, #8]
 8004598:	f047 0301 	orr.w	r3, r7, #1
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	4427      	add	r7, r4
 80045a2:	6063      	str	r3, [r4, #4]
 80045a4:	60b7      	str	r7, [r6, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	e5f9      	b.n	800419e <_malloc_r+0x62>
 80045aa:	bf00      	nop
 80045ac:	20000974 	.word	0x20000974

080045b0 <__malloc_lock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <__malloc_lock+0x8>)
 80045b2:	f7ff bc9b 	b.w	8003eec <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	2000096c 	.word	0x2000096c

080045bc <__malloc_unlock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	@ (80045c4 <__malloc_unlock+0x8>)
 80045be:	f7ff bc96 	b.w	8003eee <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	2000096c 	.word	0x2000096c

080045c8 <_svfprintf_r>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	b0d7      	sub	sp, #348	@ 0x15c
 80045ce:	4688      	mov	r8, r1
 80045d0:	4691      	mov	r9, r2
 80045d2:	461e      	mov	r6, r3
 80045d4:	9007      	str	r0, [sp, #28]
 80045d6:	f001 fac5 	bl	8005b64 <_localeconv_r>
 80045da:	6803      	ldr	r3, [r0, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	931a      	str	r3, [sp, #104]	@ 0x68
 80045e0:	f7fb fdb6 	bl	8000150 <strlen>
 80045e4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80045e8:	9011      	str	r0, [sp, #68]	@ 0x44
 80045ea:	0619      	lsls	r1, r3, #24
 80045ec:	d515      	bpl.n	800461a <_svfprintf_r+0x52>
 80045ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80045f2:	b993      	cbnz	r3, 800461a <_svfprintf_r+0x52>
 80045f4:	2140      	movs	r1, #64	@ 0x40
 80045f6:	9807      	ldr	r0, [sp, #28]
 80045f8:	f7ff fda0 	bl	800413c <_malloc_r>
 80045fc:	f8c8 0000 	str.w	r0, [r8]
 8004600:	f8c8 0010 	str.w	r0, [r8, #16]
 8004604:	b930      	cbnz	r0, 8004614 <_svfprintf_r+0x4c>
 8004606:	230c      	movs	r3, #12
 8004608:	9a07      	ldr	r2, [sp, #28]
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004612:	e1ef      	b.n	80049f4 <_svfprintf_r+0x42c>
 8004614:	2340      	movs	r3, #64	@ 0x40
 8004616:	f8c8 3014 	str.w	r3, [r8, #20]
 800461a:	2300      	movs	r3, #0
 800461c:	2200      	movs	r2, #0
 800461e:	e9cd 332b 	strd	r3, r3, [sp, #172]	@ 0xac
 8004622:	9308      	str	r3, [sp, #32]
 8004624:	2300      	movs	r3, #0
 8004626:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800462a:	2300      	movs	r3, #0
 800462c:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8004630:	ac2d      	add	r4, sp, #180	@ 0xb4
 8004632:	942a      	str	r4, [sp, #168]	@ 0xa8
 8004634:	930d      	str	r3, [sp, #52]	@ 0x34
 8004636:	9316      	str	r3, [sp, #88]	@ 0x58
 8004638:	931b      	str	r3, [sp, #108]	@ 0x6c
 800463a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800463c:	464b      	mov	r3, r9
 800463e:	461d      	mov	r5, r3
 8004640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004644:	b10a      	cbz	r2, 800464a <_svfprintf_r+0x82>
 8004646:	2a25      	cmp	r2, #37	@ 0x25
 8004648:	d1f9      	bne.n	800463e <_svfprintf_r+0x76>
 800464a:	ebb5 0709 	subs.w	r7, r5, r9
 800464e:	d00d      	beq.n	800466c <_svfprintf_r+0xa4>
 8004650:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8004652:	e9c4 9700 	strd	r9, r7, [r4]
 8004656:	443b      	add	r3, r7
 8004658:	932c      	str	r3, [sp, #176]	@ 0xb0
 800465a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800465c:	3301      	adds	r3, #1
 800465e:	2b07      	cmp	r3, #7
 8004660:	932b      	str	r3, [sp, #172]	@ 0xac
 8004662:	dc75      	bgt.n	8004750 <_svfprintf_r+0x188>
 8004664:	3408      	adds	r4, #8
 8004666:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004668:	443b      	add	r3, r7
 800466a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800466c:	782b      	ldrb	r3, [r5, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f001 8124 	beq.w	80058bc <_svfprintf_r+0x12f4>
 8004674:	2200      	movs	r2, #0
 8004676:	1c6b      	adds	r3, r5, #1
 8004678:	4693      	mov	fp, r2
 800467a:	f04f 35ff 	mov.w	r5, #4294967295
 800467e:	f88d 208b 	strb.w	r2, [sp, #139]	@ 0x8b
 8004682:	9212      	str	r2, [sp, #72]	@ 0x48
 8004684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004688:	920a      	str	r2, [sp, #40]	@ 0x28
 800468a:	9310      	str	r3, [sp, #64]	@ 0x40
 800468c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800468e:	3b20      	subs	r3, #32
 8004690:	2b5a      	cmp	r3, #90	@ 0x5a
 8004692:	f200 8596 	bhi.w	80051c2 <_svfprintf_r+0xbfa>
 8004696:	e8df f013 	tbh	[pc, r3, lsl #1]
 800469a:	009e      	.short	0x009e
 800469c:	05940594 	.word	0x05940594
 80046a0:	059400a6 	.word	0x059400a6
 80046a4:	05940594 	.word	0x05940594
 80046a8:	05940086 	.word	0x05940086
 80046ac:	00a90594 	.word	0x00a90594
 80046b0:	059400b3 	.word	0x059400b3
 80046b4:	00b500b0 	.word	0x00b500b0
 80046b8:	00ce0594 	.word	0x00ce0594
 80046bc:	00d100d1 	.word	0x00d100d1
 80046c0:	00d100d1 	.word	0x00d100d1
 80046c4:	00d100d1 	.word	0x00d100d1
 80046c8:	00d100d1 	.word	0x00d100d1
 80046cc:	059400d1 	.word	0x059400d1
 80046d0:	05940594 	.word	0x05940594
 80046d4:	05940594 	.word	0x05940594
 80046d8:	05940594 	.word	0x05940594
 80046dc:	05940140 	.word	0x05940140
 80046e0:	011100ff 	.word	0x011100ff
 80046e4:	01400140 	.word	0x01400140
 80046e8:	05940140 	.word	0x05940140
 80046ec:	05940594 	.word	0x05940594
 80046f0:	00e20594 	.word	0x00e20594
 80046f4:	05940594 	.word	0x05940594
 80046f8:	0594048f 	.word	0x0594048f
 80046fc:	05940594 	.word	0x05940594
 8004700:	059404d7 	.word	0x059404d7
 8004704:	059404f6 	.word	0x059404f6
 8004708:	05180594 	.word	0x05180594
 800470c:	05940594 	.word	0x05940594
 8004710:	05940594 	.word	0x05940594
 8004714:	05940594 	.word	0x05940594
 8004718:	05940594 	.word	0x05940594
 800471c:	05940140 	.word	0x05940140
 8004720:	011300ff 	.word	0x011300ff
 8004724:	01400140 	.word	0x01400140
 8004728:	00e50140 	.word	0x00e50140
 800472c:	00f90113 	.word	0x00f90113
 8004730:	00f20594 	.word	0x00f20594
 8004734:	046c0594 	.word	0x046c0594
 8004738:	04c60491 	.word	0x04c60491
 800473c:	059400f9 	.word	0x059400f9
 8004740:	009c04d7 	.word	0x009c04d7
 8004744:	059404f8 	.word	0x059404f8
 8004748:	00650594 	.word	0x00650594
 800474c:	009c0594 	.word	0x009c0594
 8004750:	4641      	mov	r1, r8
 8004752:	9807      	ldr	r0, [sp, #28]
 8004754:	aa2a      	add	r2, sp, #168	@ 0xa8
 8004756:	f002 fc21 	bl	8006f9c <__ssprint_r>
 800475a:	2800      	cmp	r0, #0
 800475c:	f040 8145 	bne.w	80049ea <_svfprintf_r+0x422>
 8004760:	ac2d      	add	r4, sp, #180	@ 0xb4
 8004762:	e780      	b.n	8004666 <_svfprintf_r+0x9e>
 8004764:	4ba6      	ldr	r3, [pc, #664]	@ (8004a00 <_svfprintf_r+0x438>)
 8004766:	931d      	str	r3, [sp, #116]	@ 0x74
 8004768:	f01b 0320 	ands.w	r3, fp, #32
 800476c:	f000 84b0 	beq.w	80050d0 <_svfprintf_r+0xb08>
 8004770:	3607      	adds	r6, #7
 8004772:	f026 0307 	bic.w	r3, r6, #7
 8004776:	461a      	mov	r2, r3
 8004778:	f852 6b08 	ldr.w	r6, [r2], #8
 800477c:	685f      	ldr	r7, [r3, #4]
 800477e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004780:	f01b 0f01 	tst.w	fp, #1
 8004784:	d00a      	beq.n	800479c <_svfprintf_r+0x1d4>
 8004786:	ea56 0307 	orrs.w	r3, r6, r7
 800478a:	d007      	beq.n	800479c <_svfprintf_r+0x1d4>
 800478c:	2330      	movs	r3, #48	@ 0x30
 800478e:	f88d 308c 	strb.w	r3, [sp, #140]	@ 0x8c
 8004792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004794:	f04b 0b02 	orr.w	fp, fp, #2
 8004798:	f88d 308d 	strb.w	r3, [sp, #141]	@ 0x8d
 800479c:	2302      	movs	r3, #2
 800479e:	f42b 6b80 	bic.w	fp, fp, #1024	@ 0x400
 80047a2:	f000 bc19 	b.w	8004fd8 <_svfprintf_r+0xa10>
 80047a6:	9807      	ldr	r0, [sp, #28]
 80047a8:	f001 f9dc 	bl	8005b64 <_localeconv_r>
 80047ac:	6843      	ldr	r3, [r0, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80047b2:	f7fb fccd 	bl	8000150 <strlen>
 80047b6:	9016      	str	r0, [sp, #88]	@ 0x58
 80047b8:	9807      	ldr	r0, [sp, #28]
 80047ba:	f001 f9d3 	bl	8005b64 <_localeconv_r>
 80047be:	6883      	ldr	r3, [r0, #8]
 80047c0:	930d      	str	r3, [sp, #52]	@ 0x34
 80047c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80047c4:	b12b      	cbz	r3, 80047d2 <_svfprintf_r+0x20a>
 80047c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047c8:	b11b      	cbz	r3, 80047d2 <_svfprintf_r+0x20a>
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b10b      	cbz	r3, 80047d2 <_svfprintf_r+0x20a>
 80047ce:	f44b 6b80 	orr.w	fp, fp, #1024	@ 0x400
 80047d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80047d4:	e756      	b.n	8004684 <_svfprintf_r+0xbc>
 80047d6:	f89d 308b 	ldrb.w	r3, [sp, #139]	@ 0x8b
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f9      	bne.n	80047d2 <_svfprintf_r+0x20a>
 80047de:	2320      	movs	r3, #32
 80047e0:	f88d 308b 	strb.w	r3, [sp, #139]	@ 0x8b
 80047e4:	e7f5      	b.n	80047d2 <_svfprintf_r+0x20a>
 80047e6:	f04b 0b01 	orr.w	fp, fp, #1
 80047ea:	e7f2      	b.n	80047d2 <_svfprintf_r+0x20a>
 80047ec:	f856 3b04 	ldr.w	r3, [r6], #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	9312      	str	r3, [sp, #72]	@ 0x48
 80047f4:	daed      	bge.n	80047d2 <_svfprintf_r+0x20a>
 80047f6:	425b      	negs	r3, r3
 80047f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80047fa:	f04b 0b04 	orr.w	fp, fp, #4
 80047fe:	e7e8      	b.n	80047d2 <_svfprintf_r+0x20a>
 8004800:	232b      	movs	r3, #43	@ 0x2b
 8004802:	e7ed      	b.n	80047e0 <_svfprintf_r+0x218>
 8004804:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800480a:	2a2a      	cmp	r2, #42	@ 0x2a
 800480c:	920a      	str	r2, [sp, #40]	@ 0x28
 800480e:	d10f      	bne.n	8004830 <_svfprintf_r+0x268>
 8004810:	f856 5b04 	ldr.w	r5, [r6], #4
 8004814:	9310      	str	r3, [sp, #64]	@ 0x40
 8004816:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800481a:	e7da      	b.n	80047d2 <_svfprintf_r+0x20a>
 800481c:	fb01 2505 	mla	r5, r1, r5, r2
 8004820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004824:	920a      	str	r2, [sp, #40]	@ 0x28
 8004826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004828:	3a30      	subs	r2, #48	@ 0x30
 800482a:	2a09      	cmp	r2, #9
 800482c:	d9f6      	bls.n	800481c <_svfprintf_r+0x254>
 800482e:	e72c      	b.n	800468a <_svfprintf_r+0xc2>
 8004830:	2500      	movs	r5, #0
 8004832:	210a      	movs	r1, #10
 8004834:	e7f7      	b.n	8004826 <_svfprintf_r+0x25e>
 8004836:	f04b 0b80 	orr.w	fp, fp, #128	@ 0x80
 800483a:	e7ca      	b.n	80047d2 <_svfprintf_r+0x20a>
 800483c:	2200      	movs	r2, #0
 800483e:	210a      	movs	r1, #10
 8004840:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004842:	9212      	str	r2, [sp, #72]	@ 0x48
 8004844:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004846:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004848:	3a30      	subs	r2, #48	@ 0x30
 800484a:	fb01 2200 	mla	r2, r1, r0, r2
 800484e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004854:	920a      	str	r2, [sp, #40]	@ 0x28
 8004856:	3a30      	subs	r2, #48	@ 0x30
 8004858:	2a09      	cmp	r2, #9
 800485a:	d9f3      	bls.n	8004844 <_svfprintf_r+0x27c>
 800485c:	e715      	b.n	800468a <_svfprintf_r+0xc2>
 800485e:	f04b 0b08 	orr.w	fp, fp, #8
 8004862:	e7b6      	b.n	80047d2 <_svfprintf_r+0x20a>
 8004864:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b68      	cmp	r3, #104	@ 0x68
 800486a:	bf01      	itttt	eq
 800486c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800486e:	f44b 7b00 	orreq.w	fp, fp, #512	@ 0x200
 8004872:	3301      	addeq	r3, #1
 8004874:	9310      	streq	r3, [sp, #64]	@ 0x40
 8004876:	bf18      	it	ne
 8004878:	f04b 0b40 	orrne.w	fp, fp, #64	@ 0x40
 800487c:	e7a9      	b.n	80047d2 <_svfprintf_r+0x20a>
 800487e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b6c      	cmp	r3, #108	@ 0x6c
 8004884:	d105      	bne.n	8004892 <_svfprintf_r+0x2ca>
 8004886:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004888:	3301      	adds	r3, #1
 800488a:	9310      	str	r3, [sp, #64]	@ 0x40
 800488c:	f04b 0b20 	orr.w	fp, fp, #32
 8004890:	e79f      	b.n	80047d2 <_svfprintf_r+0x20a>
 8004892:	f04b 0b10 	orr.w	fp, fp, #16
 8004896:	e79c      	b.n	80047d2 <_svfprintf_r+0x20a>
 8004898:	4632      	mov	r2, r6
 800489a:	f852 3b04 	ldr.w	r3, [r2], #4
 800489e:	f88d 30f4 	strb.w	r3, [sp, #244]	@ 0xf4
 80048a2:	2300      	movs	r3, #0
 80048a4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80048a6:	f88d 308b 	strb.w	r3, [sp, #139]	@ 0x8b
 80048aa:	469a      	mov	sl, r3
 80048ac:	2501      	movs	r5, #1
 80048ae:	461f      	mov	r7, r3
 80048b0:	461e      	mov	r6, r3
 80048b2:	9314      	str	r3, [sp, #80]	@ 0x50
 80048b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80048b6:	f10d 09f4 	add.w	r9, sp, #244	@ 0xf4
 80048ba:	e1cd      	b.n	8004c58 <_svfprintf_r+0x690>
 80048bc:	f04b 0b10 	orr.w	fp, fp, #16
 80048c0:	f01b 0f20 	tst.w	fp, #32
 80048c4:	d011      	beq.n	80048ea <_svfprintf_r+0x322>
 80048c6:	3607      	adds	r6, #7
 80048c8:	f026 0307 	bic.w	r3, r6, #7
 80048cc:	461a      	mov	r2, r3
 80048ce:	f852 6b08 	ldr.w	r6, [r2], #8
 80048d2:	685f      	ldr	r7, [r3, #4]
 80048d4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80048d6:	2f00      	cmp	r7, #0
 80048d8:	da05      	bge.n	80048e6 <_svfprintf_r+0x31e>
 80048da:	232d      	movs	r3, #45	@ 0x2d
 80048dc:	4276      	negs	r6, r6
 80048de:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80048e2:	f88d 308b 	strb.w	r3, [sp, #139]	@ 0x8b
 80048e6:	2301      	movs	r3, #1
 80048e8:	e379      	b.n	8004fde <_svfprintf_r+0xa16>
 80048ea:	4633      	mov	r3, r6
 80048ec:	f853 7b04 	ldr.w	r7, [r3], #4
 80048f0:	f01b 0f10 	tst.w	fp, #16
 80048f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048f6:	d002      	beq.n	80048fe <_svfprintf_r+0x336>
 80048f8:	463e      	mov	r6, r7
 80048fa:	17ff      	asrs	r7, r7, #31
 80048fc:	e7eb      	b.n	80048d6 <_svfprintf_r+0x30e>
 80048fe:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 8004902:	d003      	beq.n	800490c <_svfprintf_r+0x344>
 8004904:	b23e      	sxth	r6, r7
 8004906:	f347 37c0 	sbfx	r7, r7, #15, #1
 800490a:	e7e4      	b.n	80048d6 <_svfprintf_r+0x30e>
 800490c:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8004910:	d0f2      	beq.n	80048f8 <_svfprintf_r+0x330>
 8004912:	b27e      	sxtb	r6, r7
 8004914:	f347 17c0 	sbfx	r7, r7, #7, #1
 8004918:	e7dd      	b.n	80048d6 <_svfprintf_r+0x30e>
 800491a:	3607      	adds	r6, #7
 800491c:	f026 0307 	bic.w	r3, r6, #7
 8004920:	4619      	mov	r1, r3
 8004922:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004926:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800492a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800492c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800492e:	931e      	str	r3, [sp, #120]	@ 0x78
 8004930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800493a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800493c:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
 8004940:	4b30      	ldr	r3, [pc, #192]	@ (8004a04 <_svfprintf_r+0x43c>)
 8004942:	f7fc f863 	bl	8000a0c <__aeabi_dcmpun>
 8004946:	bb08      	cbnz	r0, 800498c <_svfprintf_r+0x3c4>
 8004948:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
 800494c:	f04f 32ff 	mov.w	r2, #4294967295
 8004950:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <_svfprintf_r+0x43c>)
 8004952:	f7fc f83d 	bl	80009d0 <__aeabi_dcmple>
 8004956:	b9c8      	cbnz	r0, 800498c <_svfprintf_r+0x3c4>
 8004958:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	f7fc f82c 	bl	80009bc <__aeabi_dcmplt>
 8004964:	b110      	cbz	r0, 800496c <_svfprintf_r+0x3a4>
 8004966:	232d      	movs	r3, #45	@ 0x2d
 8004968:	f88d 308b 	strb.w	r3, [sp, #139]	@ 0x8b
 800496c:	4a26      	ldr	r2, [pc, #152]	@ (8004a08 <_svfprintf_r+0x440>)
 800496e:	4b27      	ldr	r3, [pc, #156]	@ (8004a0c <_svfprintf_r+0x444>)
 8004970:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004972:	f04f 0a00 	mov.w	sl, #0
 8004976:	2947      	cmp	r1, #71	@ 0x47
 8004978:	bfd4      	ite	le
 800497a:	4691      	movle	r9, r2
 800497c:	4699      	movgt	r9, r3
 800497e:	2503      	movs	r5, #3
 8004980:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 8004984:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 8004988:	f000 bfd0 	b.w	800592c <_svfprintf_r+0x1364>
 800498c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	f7fc f83a 	bl	8000a0c <__aeabi_dcmpun>
 8004998:	4682      	mov	sl, r0
 800499a:	b140      	cbz	r0, 80049ae <_svfprintf_r+0x3e6>
 800499c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800499e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a10 <_svfprintf_r+0x448>)
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bfbc      	itt	lt
 80049a4:	232d      	movlt	r3, #45	@ 0x2d
 80049a6:	f88d 308b 	strblt.w	r3, [sp, #139]	@ 0x8b
 80049aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004a14 <_svfprintf_r+0x44c>)
 80049ac:	e7e0      	b.n	8004970 <_svfprintf_r+0x3a8>
 80049ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049b0:	2b61      	cmp	r3, #97	@ 0x61
 80049b2:	d023      	beq.n	80049fc <_svfprintf_r+0x434>
 80049b4:	2b41      	cmp	r3, #65	@ 0x41
 80049b6:	d12f      	bne.n	8004a18 <_svfprintf_r+0x450>
 80049b8:	2358      	movs	r3, #88	@ 0x58
 80049ba:	2230      	movs	r2, #48	@ 0x30
 80049bc:	2d63      	cmp	r5, #99	@ 0x63
 80049be:	f88d 208c 	strb.w	r2, [sp, #140]	@ 0x8c
 80049c2:	f88d 308d 	strb.w	r3, [sp, #141]	@ 0x8d
 80049c6:	f04b 0b02 	orr.w	fp, fp, #2
 80049ca:	f340 80a8 	ble.w	8004b1e <_svfprintf_r+0x556>
 80049ce:	9807      	ldr	r0, [sp, #28]
 80049d0:	1c69      	adds	r1, r5, #1
 80049d2:	f7ff fbb3 	bl	800413c <_malloc_r>
 80049d6:	4681      	mov	r9, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	f040 80a5 	bne.w	8004b28 <_svfprintf_r+0x560>
 80049de:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80049e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049e6:	f8a8 300c 	strh.w	r3, [r8, #12]
 80049ea:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80049ee:	065b      	lsls	r3, r3, #25
 80049f0:	f53f ae0c 	bmi.w	800460c <_svfprintf_r+0x44>
 80049f4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80049f6:	b057      	add	sp, #348	@ 0x15c
 80049f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fc:	2378      	movs	r3, #120	@ 0x78
 80049fe:	e7dc      	b.n	80049ba <_svfprintf_r+0x3f2>
 8004a00:	08009476 	.word	0x08009476
 8004a04:	7fefffff 	.word	0x7fefffff
 8004a08:	08009466 	.word	0x08009466
 8004a0c:	0800946a 	.word	0x0800946a
 8004a10:	0800946e 	.word	0x0800946e
 8004a14:	08009472 	.word	0x08009472
 8004a18:	1c6a      	adds	r2, r5, #1
 8004a1a:	f000 8087 	beq.w	8004b2c <_svfprintf_r+0x564>
 8004a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a20:	f023 0320 	bic.w	r3, r3, #32
 8004a24:	2b47      	cmp	r3, #71	@ 0x47
 8004a26:	d102      	bne.n	8004a2e <_svfprintf_r+0x466>
 8004a28:	b90d      	cbnz	r5, 8004a2e <_svfprintf_r+0x466>
 8004a2a:	46aa      	mov	sl, r5
 8004a2c:	2501      	movs	r5, #1
 8004a2e:	f44b 7380 	orr.w	r3, fp, #256	@ 0x100
 8004a32:	9315      	str	r3, [sp, #84]	@ 0x54
 8004a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da7a      	bge.n	8004b30 <_svfprintf_r+0x568>
 8004a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a3c:	9318      	str	r3, [sp, #96]	@ 0x60
 8004a3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a40:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004a44:	9319      	str	r3, [sp, #100]	@ 0x64
 8004a46:	232d      	movs	r3, #45	@ 0x2d
 8004a48:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a4c:	f023 0320 	bic.w	r3, r3, #32
 8004a50:	2b41      	cmp	r3, #65	@ 0x41
 8004a52:	930c      	str	r3, [sp, #48]	@ 0x30
 8004a54:	f040 81d6 	bne.w	8004e04 <_svfprintf_r+0x83c>
 8004a58:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8004a5c:	aa24      	add	r2, sp, #144	@ 0x90
 8004a5e:	f001 f8c3 	bl	8005be8 <frexp>
 8004a62:	2200      	movs	r2, #0
 8004a64:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004a68:	f7fb fd36 	bl	80004d8 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2300      	movs	r3, #0
 8004a78:	f7fb ff96 	bl	80009a8 <__aeabi_dcmpeq>
 8004a7c:	b108      	cbz	r0, 8004a82 <_svfprintf_r+0x4ba>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	9324      	str	r3, [sp, #144]	@ 0x90
 8004a82:	4a2f      	ldr	r2, [pc, #188]	@ (8004b40 <_svfprintf_r+0x578>)
 8004a84:	4b2f      	ldr	r3, [pc, #188]	@ (8004b44 <_svfprintf_r+0x57c>)
 8004a86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004a88:	464e      	mov	r6, r9
 8004a8a:	2961      	cmp	r1, #97	@ 0x61
 8004a8c:	bf18      	it	ne
 8004a8e:	461a      	movne	r2, r3
 8004a90:	1e6f      	subs	r7, r5, #1
 8004a92:	9214      	str	r2, [sp, #80]	@ 0x50
 8004a94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b48 <_svfprintf_r+0x580>)
 8004a9c:	f7fb fd1c 	bl	80004d8 <__aeabi_dmul>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004aa8:	f7fb ffc6 	bl	8000a38 <__aeabi_d2iz>
 8004aac:	9017      	str	r0, [sp, #92]	@ 0x5c
 8004aae:	f7fb fca9 	bl	8000404 <__aeabi_i2d>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004aba:	f7fb fb55 	bl	8000168 <__aeabi_dsub>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ac6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ac8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
 8004acc:	f806 3b01 	strb.w	r3, [r6], #1
 8004ad0:	1c7b      	adds	r3, r7, #1
 8004ad2:	d006      	beq.n	8004ae2 <_svfprintf_r+0x51a>
 8004ad4:	1e7b      	subs	r3, r7, #1
 8004ad6:	9321      	str	r3, [sp, #132]	@ 0x84
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2300      	movs	r3, #0
 8004adc:	f7fb ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8004ae0:	b360      	cbz	r0, 8004b3c <_svfprintf_r+0x574>
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ae8:	4b18      	ldr	r3, [pc, #96]	@ (8004b4c <_svfprintf_r+0x584>)
 8004aea:	f7fb ff85 	bl	80009f8 <__aeabi_dcmpgt>
 8004aee:	bb78      	cbnz	r0, 8004b50 <_svfprintf_r+0x588>
 8004af0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004af4:	2200      	movs	r2, #0
 8004af6:	4b15      	ldr	r3, [pc, #84]	@ (8004b4c <_svfprintf_r+0x584>)
 8004af8:	f7fb ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8004afc:	b110      	cbz	r0, 8004b04 <_svfprintf_r+0x53c>
 8004afe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004b00:	07da      	lsls	r2, r3, #31
 8004b02:	d425      	bmi.n	8004b50 <_svfprintf_r+0x588>
 8004b04:	4633      	mov	r3, r6
 8004b06:	2030      	movs	r0, #48	@ 0x30
 8004b08:	19f1      	adds	r1, r6, r7
 8004b0a:	1aca      	subs	r2, r1, r3
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	f280 8176 	bge.w	8004dfe <_svfprintf_r+0x836>
 8004b12:	1c7b      	adds	r3, r7, #1
 8004b14:	3701      	adds	r7, #1
 8004b16:	bfb8      	it	lt
 8004b18:	2300      	movlt	r3, #0
 8004b1a:	441e      	add	r6, r3
 8004b1c:	e02c      	b.n	8004b78 <_svfprintf_r+0x5b0>
 8004b1e:	f04f 0a00 	mov.w	sl, #0
 8004b22:	f10d 09f4 	add.w	r9, sp, #244	@ 0xf4
 8004b26:	e782      	b.n	8004a2e <_svfprintf_r+0x466>
 8004b28:	4682      	mov	sl, r0
 8004b2a:	e780      	b.n	8004a2e <_svfprintf_r+0x466>
 8004b2c:	2506      	movs	r5, #6
 8004b2e:	e77e      	b.n	8004a2e <_svfprintf_r+0x466>
 8004b30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004b34:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e785      	b.n	8004a48 <_svfprintf_r+0x480>
 8004b3c:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8004b3e:	e7a9      	b.n	8004a94 <_svfprintf_r+0x4cc>
 8004b40:	08009476 	.word	0x08009476
 8004b44:	08009487 	.word	0x08009487
 8004b48:	40300000 	.word	0x40300000
 8004b4c:	3fe00000 	.word	0x3fe00000
 8004b50:	2030      	movs	r0, #48	@ 0x30
 8004b52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b54:	9628      	str	r6, [sp, #160]	@ 0xa0
 8004b56:	7bd9      	ldrb	r1, [r3, #15]
 8004b58:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8004b5a:	1e53      	subs	r3, r2, #1
 8004b5c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8004b5e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004b62:	428b      	cmp	r3, r1
 8004b64:	f000 8148 	beq.w	8004df8 <_svfprintf_r+0x830>
 8004b68:	2b39      	cmp	r3, #57	@ 0x39
 8004b6a:	bf0b      	itete	eq
 8004b6c:	9b14      	ldreq	r3, [sp, #80]	@ 0x50
 8004b6e:	3301      	addne	r3, #1
 8004b70:	7a9b      	ldrbeq	r3, [r3, #10]
 8004b72:	b2db      	uxtbne	r3, r3
 8004b74:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b78:	eba6 0309 	sub.w	r3, r6, r9
 8004b7c:	9308      	str	r3, [sp, #32]
 8004b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004b80:	9e24      	ldr	r6, [sp, #144]	@ 0x90
 8004b82:	2b47      	cmp	r3, #71	@ 0x47
 8004b84:	f040 8187 	bne.w	8004e96 <_svfprintf_r+0x8ce>
 8004b88:	1cf3      	adds	r3, r6, #3
 8004b8a:	db02      	blt.n	8004b92 <_svfprintf_r+0x5ca>
 8004b8c:	42ae      	cmp	r6, r5
 8004b8e:	f340 81a5 	ble.w	8004edc <_svfprintf_r+0x914>
 8004b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b94:	3b02      	subs	r3, #2
 8004b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b9a:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8004b9e:	f021 0120 	bic.w	r1, r1, #32
 8004ba2:	2941      	cmp	r1, #65	@ 0x41
 8004ba4:	bf08      	it	eq
 8004ba6:	320f      	addeq	r2, #15
 8004ba8:	f106 33ff 	add.w	r3, r6, #4294967295
 8004bac:	bf06      	itte	eq
 8004bae:	b2d2      	uxtbeq	r2, r2
 8004bb0:	2101      	moveq	r1, #1
 8004bb2:	2100      	movne	r1, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f88d 2098 	strb.w	r2, [sp, #152]	@ 0x98
 8004bba:	bfb4      	ite	lt
 8004bbc:	222d      	movlt	r2, #45	@ 0x2d
 8004bbe:	222b      	movge	r2, #43	@ 0x2b
 8004bc0:	9324      	str	r3, [sp, #144]	@ 0x90
 8004bc2:	bfb8      	it	lt
 8004bc4:	f1c6 0301 	rsblt	r3, r6, #1
 8004bc8:	2b09      	cmp	r3, #9
 8004bca:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8004bce:	f340 8178 	ble.w	8004ec2 <_svfprintf_r+0x8fa>
 8004bd2:	260a      	movs	r6, #10
 8004bd4:	f10d 00a7 	add.w	r0, sp, #167	@ 0xa7
 8004bd8:	fbb3 f5f6 	udiv	r5, r3, r6
 8004bdc:	4602      	mov	r2, r0
 8004bde:	fb06 3115 	mls	r1, r6, r5, r3
 8004be2:	3130      	adds	r1, #48	@ 0x30
 8004be4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004be8:	4619      	mov	r1, r3
 8004bea:	2963      	cmp	r1, #99	@ 0x63
 8004bec:	462b      	mov	r3, r5
 8004bee:	f100 30ff 	add.w	r0, r0, #4294967295
 8004bf2:	dcf1      	bgt.n	8004bd8 <_svfprintf_r+0x610>
 8004bf4:	3330      	adds	r3, #48	@ 0x30
 8004bf6:	1e91      	subs	r1, r2, #2
 8004bf8:	f800 3c01 	strb.w	r3, [r0, #-1]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	f10d 0599 	add.w	r5, sp, #153	@ 0x99
 8004c02:	f10d 00a7 	add.w	r0, sp, #167	@ 0xa7
 8004c06:	4283      	cmp	r3, r0
 8004c08:	f0c0 8156 	bcc.w	8004eb8 <_svfprintf_r+0x8f0>
 8004c0c:	f10d 03a9 	add.w	r3, sp, #169	@ 0xa9
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	4281      	cmp	r1, r0
 8004c14:	bf88      	it	hi
 8004c16:	2300      	movhi	r3, #0
 8004c18:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8004c1c:	441a      	add	r2, r3
 8004c1e:	ab26      	add	r3, sp, #152	@ 0x98
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	9a08      	ldr	r2, [sp, #32]
 8004c24:	931c      	str	r3, [sp, #112]	@ 0x70
 8004c26:	2a01      	cmp	r2, #1
 8004c28:	eb03 0502 	add.w	r5, r3, r2
 8004c2c:	dc02      	bgt.n	8004c34 <_svfprintf_r+0x66c>
 8004c2e:	f01b 0f01 	tst.w	fp, #1
 8004c32:	d001      	beq.n	8004c38 <_svfprintf_r+0x670>
 8004c34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004c36:	441d      	add	r5, r3
 8004c38:	2700      	movs	r7, #0
 8004c3a:	463e      	mov	r6, r7
 8004c3c:	f42b 6380 	bic.w	r3, fp, #1024	@ 0x400
 8004c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c44:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c46:	970c      	str	r7, [sp, #48]	@ 0x30
 8004c48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 818d 	bne.w	8004f6a <_svfprintf_r+0x9a2>
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8dd b054 	ldr.w	fp, [sp, #84]	@ 0x54
 8004c56:	9314      	str	r3, [sp, #80]	@ 0x50
 8004c58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c5a:	42ab      	cmp	r3, r5
 8004c5c:	bfb8      	it	lt
 8004c5e:	462b      	movlt	r3, r5
 8004c60:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c62:	f89d 308b 	ldrb.w	r3, [sp, #139]	@ 0x8b
 8004c66:	b113      	cbz	r3, 8004c6e <_svfprintf_r+0x6a6>
 8004c68:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c6e:	f01b 0302 	ands.w	r3, fp, #2
 8004c72:	9320      	str	r3, [sp, #128]	@ 0x80
 8004c74:	bf1e      	ittt	ne
 8004c76:	9b15      	ldrne	r3, [sp, #84]	@ 0x54
 8004c78:	3302      	addne	r3, #2
 8004c7a:	9315      	strne	r3, [sp, #84]	@ 0x54
 8004c7c:	f01b 0384 	ands.w	r3, fp, #132	@ 0x84
 8004c80:	9321      	str	r3, [sp, #132]	@ 0x84
 8004c82:	d121      	bne.n	8004cc8 <_svfprintf_r+0x700>
 8004c84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004c86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004c8e:	dd1b      	ble.n	8004cc8 <_svfprintf_r+0x700>
 8004c90:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	@ 0xac
 8004c94:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004c96:	3201      	adds	r2, #1
 8004c98:	2810      	cmp	r0, #16
 8004c9a:	489d      	ldr	r0, [pc, #628]	@ (8004f10 <_svfprintf_r+0x948>)
 8004c9c:	f104 0108 	add.w	r1, r4, #8
 8004ca0:	6020      	str	r0, [r4, #0]
 8004ca2:	f300 829a 	bgt.w	80051da <_svfprintf_r+0xc12>
 8004ca6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004ca8:	2a07      	cmp	r2, #7
 8004caa:	4403      	add	r3, r0
 8004cac:	e9cd 232b 	strd	r2, r3, [sp, #172]	@ 0xac
 8004cb0:	6060      	str	r0, [r4, #4]
 8004cb2:	f340 82a7 	ble.w	8005204 <_svfprintf_r+0xc3c>
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	9807      	ldr	r0, [sp, #28]
 8004cba:	aa2a      	add	r2, sp, #168	@ 0xa8
 8004cbc:	f002 f96e 	bl	8006f9c <__ssprint_r>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f040 85d9 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8004cc6:	ac2d      	add	r4, sp, #180	@ 0xb4
 8004cc8:	f89d 208b 	ldrb.w	r2, [sp, #139]	@ 0x8b
 8004ccc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8004cce:	b16a      	cbz	r2, 8004cec <_svfprintf_r+0x724>
 8004cd0:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8004cd4:	6022      	str	r2, [r4, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	932c      	str	r3, [sp, #176]	@ 0xb0
 8004cdc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8004cde:	6062      	str	r2, [r4, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	2b07      	cmp	r3, #7
 8004ce4:	932b      	str	r3, [sp, #172]	@ 0xac
 8004ce6:	f300 828f 	bgt.w	8005208 <_svfprintf_r+0xc40>
 8004cea:	3408      	adds	r4, #8
 8004cec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004cee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8004cf0:	b162      	cbz	r2, 8004d0c <_svfprintf_r+0x744>
 8004cf2:	aa23      	add	r2, sp, #140	@ 0x8c
 8004cf4:	6022      	str	r2, [r4, #0]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	932c      	str	r3, [sp, #176]	@ 0xb0
 8004cfc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8004cfe:	6062      	str	r2, [r4, #4]
 8004d00:	3301      	adds	r3, #1
 8004d02:	2b07      	cmp	r3, #7
 8004d04:	932b      	str	r3, [sp, #172]	@ 0xac
 8004d06:	f300 8289 	bgt.w	800521c <_svfprintf_r+0xc54>
 8004d0a:	3408      	adds	r4, #8
 8004d0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d0e:	2b80      	cmp	r3, #128	@ 0x80
 8004d10:	d121      	bne.n	8004d56 <_svfprintf_r+0x78e>
 8004d12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004d14:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004d1c:	dd1b      	ble.n	8004d56 <_svfprintf_r+0x78e>
 8004d1e:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	@ 0xac
 8004d22:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004d24:	3201      	adds	r2, #1
 8004d26:	2810      	cmp	r0, #16
 8004d28:	487a      	ldr	r0, [pc, #488]	@ (8004f14 <_svfprintf_r+0x94c>)
 8004d2a:	f104 0108 	add.w	r1, r4, #8
 8004d2e:	6020      	str	r0, [r4, #0]
 8004d30:	f300 827e 	bgt.w	8005230 <_svfprintf_r+0xc68>
 8004d34:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004d36:	2a07      	cmp	r2, #7
 8004d38:	4403      	add	r3, r0
 8004d3a:	e9cd 232b 	strd	r2, r3, [sp, #172]	@ 0xac
 8004d3e:	6060      	str	r0, [r4, #4]
 8004d40:	f340 828b 	ble.w	800525a <_svfprintf_r+0xc92>
 8004d44:	4641      	mov	r1, r8
 8004d46:	9807      	ldr	r0, [sp, #28]
 8004d48:	aa2a      	add	r2, sp, #168	@ 0xa8
 8004d4a:	f002 f927 	bl	8006f9c <__ssprint_r>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	f040 8592 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8004d54:	ac2d      	add	r4, sp, #180	@ 0xb4
 8004d56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d58:	1b5b      	subs	r3, r3, r5
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	9314      	str	r3, [sp, #80]	@ 0x50
 8004d5e:	dd1b      	ble.n	8004d98 <_svfprintf_r+0x7d0>
 8004d60:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	@ 0xac
 8004d64:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004d66:	3201      	adds	r2, #1
 8004d68:	2810      	cmp	r0, #16
 8004d6a:	486a      	ldr	r0, [pc, #424]	@ (8004f14 <_svfprintf_r+0x94c>)
 8004d6c:	f104 0108 	add.w	r1, r4, #8
 8004d70:	6020      	str	r0, [r4, #0]
 8004d72:	f300 8274 	bgt.w	800525e <_svfprintf_r+0xc96>
 8004d76:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004d78:	2a07      	cmp	r2, #7
 8004d7a:	4403      	add	r3, r0
 8004d7c:	e9cd 232b 	strd	r2, r3, [sp, #172]	@ 0xac
 8004d80:	6060      	str	r0, [r4, #4]
 8004d82:	f340 8281 	ble.w	8005288 <_svfprintf_r+0xcc0>
 8004d86:	4641      	mov	r1, r8
 8004d88:	9807      	ldr	r0, [sp, #28]
 8004d8a:	aa2a      	add	r2, sp, #168	@ 0xa8
 8004d8c:	f002 f906 	bl	8006f9c <__ssprint_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	f040 8571 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8004d96:	ac2d      	add	r4, sp, #180	@ 0xb4
 8004d98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8004d9a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8004d9e:	9314      	str	r3, [sp, #80]	@ 0x50
 8004da0:	f040 8278 	bne.w	8005294 <_svfprintf_r+0xccc>
 8004da4:	e9c4 9500 	strd	r9, r5, [r4]
 8004da8:	441d      	add	r5, r3
 8004daa:	952c      	str	r5, [sp, #176]	@ 0xb0
 8004dac:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8004dae:	3301      	adds	r3, #1
 8004db0:	2b07      	cmp	r3, #7
 8004db2:	932b      	str	r3, [sp, #172]	@ 0xac
 8004db4:	f300 82b4 	bgt.w	8005320 <_svfprintf_r+0xd58>
 8004db8:	3408      	adds	r4, #8
 8004dba:	f01b 0f04 	tst.w	fp, #4
 8004dbe:	f040 853d 	bne.w	800583c <_svfprintf_r+0x1274>
 8004dc2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 8004dc6:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004dc8:	428a      	cmp	r2, r1
 8004dca:	bfac      	ite	ge
 8004dcc:	189b      	addge	r3, r3, r2
 8004dce:	185b      	addlt	r3, r3, r1
 8004dd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004dd2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8004dd4:	b13b      	cbz	r3, 8004de6 <_svfprintf_r+0x81e>
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	9807      	ldr	r0, [sp, #28]
 8004dda:	aa2a      	add	r2, sp, #168	@ 0xa8
 8004ddc:	f002 f8de 	bl	8006f9c <__ssprint_r>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f040 8549 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8004de6:	2300      	movs	r3, #0
 8004de8:	932b      	str	r3, [sp, #172]	@ 0xac
 8004dea:	f1ba 0f00 	cmp.w	sl, #0
 8004dee:	f040 855f 	bne.w	80058b0 <_svfprintf_r+0x12e8>
 8004df2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004df4:	ac2d      	add	r4, sp, #180	@ 0xb4
 8004df6:	e0c6      	b.n	8004f86 <_svfprintf_r+0x9be>
 8004df8:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004dfc:	e6ac      	b.n	8004b58 <_svfprintf_r+0x590>
 8004dfe:	f803 0b01 	strb.w	r0, [r3], #1
 8004e02:	e682      	b.n	8004b0a <_svfprintf_r+0x542>
 8004e04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004e06:	2b46      	cmp	r3, #70	@ 0x46
 8004e08:	d004      	beq.n	8004e14 <_svfprintf_r+0x84c>
 8004e0a:	2b45      	cmp	r3, #69	@ 0x45
 8004e0c:	d11c      	bne.n	8004e48 <_svfprintf_r+0x880>
 8004e0e:	1c6e      	adds	r6, r5, #1
 8004e10:	2302      	movs	r3, #2
 8004e12:	e001      	b.n	8004e18 <_svfprintf_r+0x850>
 8004e14:	462e      	mov	r6, r5
 8004e16:	2303      	movs	r3, #3
 8004e18:	aa28      	add	r2, sp, #160	@ 0xa0
 8004e1a:	9204      	str	r2, [sp, #16]
 8004e1c:	aa25      	add	r2, sp, #148	@ 0x94
 8004e1e:	9203      	str	r2, [sp, #12]
 8004e20:	aa24      	add	r2, sp, #144	@ 0x90
 8004e22:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	9807      	ldr	r0, [sp, #28]
 8004e2a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8004e2e:	f000 ffd7 	bl	8005de0 <_dtoa_r>
 8004e32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004e34:	4681      	mov	r9, r0
 8004e36:	2b47      	cmp	r3, #71	@ 0x47
 8004e38:	d119      	bne.n	8004e6e <_svfprintf_r+0x8a6>
 8004e3a:	f01b 0f01 	tst.w	fp, #1
 8004e3e:	d105      	bne.n	8004e4c <_svfprintf_r+0x884>
 8004e40:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8004e42:	eba3 0309 	sub.w	r3, r3, r9
 8004e46:	e699      	b.n	8004b7c <_svfprintf_r+0x5b4>
 8004e48:	462e      	mov	r6, r5
 8004e4a:	e7e1      	b.n	8004e10 <_svfprintf_r+0x848>
 8004e4c:	1987      	adds	r7, r0, r6
 8004e4e:	2200      	movs	r2, #0
 8004e50:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8004e54:	2300      	movs	r3, #0
 8004e56:	f7fb fda7 	bl	80009a8 <__aeabi_dcmpeq>
 8004e5a:	b100      	cbz	r0, 8004e5e <_svfprintf_r+0x896>
 8004e5c:	9728      	str	r7, [sp, #160]	@ 0xa0
 8004e5e:	2230      	movs	r2, #48	@ 0x30
 8004e60:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8004e62:	429f      	cmp	r7, r3
 8004e64:	d9ec      	bls.n	8004e40 <_svfprintf_r+0x878>
 8004e66:	1c59      	adds	r1, r3, #1
 8004e68:	9128      	str	r1, [sp, #160]	@ 0xa0
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	e7f8      	b.n	8004e60 <_svfprintf_r+0x898>
 8004e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004e70:	1987      	adds	r7, r0, r6
 8004e72:	2b46      	cmp	r3, #70	@ 0x46
 8004e74:	d1eb      	bne.n	8004e4e <_svfprintf_r+0x886>
 8004e76:	7803      	ldrb	r3, [r0, #0]
 8004e78:	2b30      	cmp	r3, #48	@ 0x30
 8004e7a:	d109      	bne.n	8004e90 <_svfprintf_r+0x8c8>
 8004e7c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8004e80:	2200      	movs	r2, #0
 8004e82:	2300      	movs	r3, #0
 8004e84:	f7fb fd90 	bl	80009a8 <__aeabi_dcmpeq>
 8004e88:	b910      	cbnz	r0, 8004e90 <_svfprintf_r+0x8c8>
 8004e8a:	f1c6 0601 	rsb	r6, r6, #1
 8004e8e:	9624      	str	r6, [sp, #144]	@ 0x90
 8004e90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e92:	441f      	add	r7, r3
 8004e94:	e7db      	b.n	8004e4e <_svfprintf_r+0x886>
 8004e96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004e98:	2b46      	cmp	r3, #70	@ 0x46
 8004e9a:	f47f ae7d 	bne.w	8004b98 <_svfprintf_r+0x5d0>
 8004e9e:	f00b 0301 	and.w	r3, fp, #1
 8004ea2:	2e00      	cmp	r6, #0
 8004ea4:	ea43 0305 	orr.w	r3, r3, r5
 8004ea8:	dd25      	ble.n	8004ef6 <_svfprintf_r+0x92e>
 8004eaa:	b37b      	cbz	r3, 8004f0c <_svfprintf_r+0x944>
 8004eac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004eae:	18f3      	adds	r3, r6, r3
 8004eb0:	441d      	add	r5, r3
 8004eb2:	2366      	movs	r3, #102	@ 0x66
 8004eb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eb6:	e032      	b.n	8004f1e <_svfprintf_r+0x956>
 8004eb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ebc:	f805 6f01 	strb.w	r6, [r5, #1]!
 8004ec0:	e6a1      	b.n	8004c06 <_svfprintf_r+0x63e>
 8004ec2:	b941      	cbnz	r1, 8004ed6 <_svfprintf_r+0x90e>
 8004ec4:	2230      	movs	r2, #48	@ 0x30
 8004ec6:	f88d 209a 	strb.w	r2, [sp, #154]	@ 0x9a
 8004eca:	f10d 029b 	add.w	r2, sp, #155	@ 0x9b
 8004ece:	3330      	adds	r3, #48	@ 0x30
 8004ed0:	f802 3b01 	strb.w	r3, [r2], #1
 8004ed4:	e6a3      	b.n	8004c1e <_svfprintf_r+0x656>
 8004ed6:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8004eda:	e7f8      	b.n	8004ece <_svfprintf_r+0x906>
 8004edc:	9b08      	ldr	r3, [sp, #32]
 8004ede:	429e      	cmp	r6, r3
 8004ee0:	da0d      	bge.n	8004efe <_svfprintf_r+0x936>
 8004ee2:	9b08      	ldr	r3, [sp, #32]
 8004ee4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	eb03 0502 	add.w	r5, r3, r2
 8004eec:	dc0c      	bgt.n	8004f08 <_svfprintf_r+0x940>
 8004eee:	f1c6 0301 	rsb	r3, r6, #1
 8004ef2:	441d      	add	r5, r3
 8004ef4:	e008      	b.n	8004f08 <_svfprintf_r+0x940>
 8004ef6:	b17b      	cbz	r3, 8004f18 <_svfprintf_r+0x950>
 8004ef8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004efa:	3301      	adds	r3, #1
 8004efc:	e7d8      	b.n	8004eb0 <_svfprintf_r+0x8e8>
 8004efe:	f01b 0f01 	tst.w	fp, #1
 8004f02:	d01f      	beq.n	8004f44 <_svfprintf_r+0x97c>
 8004f04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004f06:	18f5      	adds	r5, r6, r3
 8004f08:	2367      	movs	r3, #103	@ 0x67
 8004f0a:	e7d3      	b.n	8004eb4 <_svfprintf_r+0x8ec>
 8004f0c:	4635      	mov	r5, r6
 8004f0e:	e7d0      	b.n	8004eb2 <_svfprintf_r+0x8ea>
 8004f10:	080094aa 	.word	0x080094aa
 8004f14:	0800949a 	.word	0x0800949a
 8004f18:	2366      	movs	r3, #102	@ 0x66
 8004f1a:	2501      	movs	r5, #1
 8004f1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f1e:	f41b 6380 	ands.w	r3, fp, #1024	@ 0x400
 8004f22:	930c      	str	r3, [sp, #48]	@ 0x30
 8004f24:	d01f      	beq.n	8004f66 <_svfprintf_r+0x99e>
 8004f26:	2700      	movs	r7, #0
 8004f28:	2e00      	cmp	r6, #0
 8004f2a:	970c      	str	r7, [sp, #48]	@ 0x30
 8004f2c:	f77f ae8c 	ble.w	8004c48 <_svfprintf_r+0x680>
 8004f30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2bff      	cmp	r3, #255	@ 0xff
 8004f36:	d107      	bne.n	8004f48 <_svfprintf_r+0x980>
 8004f38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004f3c:	443b      	add	r3, r7
 8004f3e:	fb02 5503 	mla	r5, r2, r3, r5
 8004f42:	e681      	b.n	8004c48 <_svfprintf_r+0x680>
 8004f44:	4635      	mov	r5, r6
 8004f46:	e7df      	b.n	8004f08 <_svfprintf_r+0x940>
 8004f48:	42b3      	cmp	r3, r6
 8004f4a:	daf5      	bge.n	8004f38 <_svfprintf_r+0x970>
 8004f4c:	1af6      	subs	r6, r6, r3
 8004f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	b133      	cbz	r3, 8004f62 <_svfprintf_r+0x99a>
 8004f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f56:	3301      	adds	r3, #1
 8004f58:	930c      	str	r3, [sp, #48]	@ 0x30
 8004f5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004f60:	e7e6      	b.n	8004f30 <_svfprintf_r+0x968>
 8004f62:	3701      	adds	r7, #1
 8004f64:	e7e4      	b.n	8004f30 <_svfprintf_r+0x968>
 8004f66:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8004f68:	e66e      	b.n	8004c48 <_svfprintf_r+0x680>
 8004f6a:	232d      	movs	r3, #45	@ 0x2d
 8004f6c:	f88d 308b 	strb.w	r3, [sp, #139]	@ 0x8b
 8004f70:	e66e      	b.n	8004c50 <_svfprintf_r+0x688>
 8004f72:	f01b 0f20 	tst.w	fp, #32
 8004f76:	d00a      	beq.n	8004f8e <_svfprintf_r+0x9c6>
 8004f78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004f7a:	6833      	ldr	r3, [r6, #0]
 8004f7c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004f7e:	17d2      	asrs	r2, r2, #31
 8004f80:	e9c3 1200 	strd	r1, r2, [r3]
 8004f84:	3604      	adds	r6, #4
 8004f86:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8004f8a:	f7ff bb57 	b.w	800463c <_svfprintf_r+0x74>
 8004f8e:	f01b 0f10 	tst.w	fp, #16
 8004f92:	d003      	beq.n	8004f9c <_svfprintf_r+0x9d4>
 8004f94:	6833      	ldr	r3, [r6, #0]
 8004f96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e7f3      	b.n	8004f84 <_svfprintf_r+0x9bc>
 8004f9c:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 8004fa0:	d003      	beq.n	8004faa <_svfprintf_r+0x9e2>
 8004fa2:	6833      	ldr	r3, [r6, #0]
 8004fa4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	e7ec      	b.n	8004f84 <_svfprintf_r+0x9bc>
 8004faa:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8004fae:	d0f1      	beq.n	8004f94 <_svfprintf_r+0x9cc>
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e7e5      	b.n	8004f84 <_svfprintf_r+0x9bc>
 8004fb8:	f04b 0b10 	orr.w	fp, fp, #16
 8004fbc:	f01b 0320 	ands.w	r3, fp, #32
 8004fc0:	d01e      	beq.n	8005000 <_svfprintf_r+0xa38>
 8004fc2:	3607      	adds	r6, #7
 8004fc4:	f026 0307 	bic.w	r3, r6, #7
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f852 6b08 	ldr.w	r6, [r2], #8
 8004fce:	685f      	ldr	r7, [r3, #4]
 8004fd0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f42b 6b80 	bic.w	fp, fp, #1024	@ 0x400
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f88d 208b 	strb.w	r2, [sp, #139]	@ 0x8b
 8004fde:	1c68      	adds	r0, r5, #1
 8004fe0:	f000 8477 	beq.w	80058d2 <_svfprintf_r+0x130a>
 8004fe4:	f02b 0280 	bic.w	r2, fp, #128	@ 0x80
 8004fe8:	920c      	str	r2, [sp, #48]	@ 0x30
 8004fea:	ea56 0207 	orrs.w	r2, r6, r7
 8004fee:	f040 8476 	bne.w	80058de <_svfprintf_r+0x1316>
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	f000 80dc 	beq.w	80051b0 <_svfprintf_r+0xbe8>
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 8473 	bne.w	80058e4 <_svfprintf_r+0x131c>
 8004ffe:	e081      	b.n	8005104 <_svfprintf_r+0xb3c>
 8005000:	4632      	mov	r2, r6
 8005002:	f852 6b04 	ldr.w	r6, [r2], #4
 8005006:	f01b 0710 	ands.w	r7, fp, #16
 800500a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800500c:	d001      	beq.n	8005012 <_svfprintf_r+0xa4a>
 800500e:	461f      	mov	r7, r3
 8005010:	e7df      	b.n	8004fd2 <_svfprintf_r+0xa0a>
 8005012:	f01b 0340 	ands.w	r3, fp, #64	@ 0x40
 8005016:	d001      	beq.n	800501c <_svfprintf_r+0xa54>
 8005018:	b2b6      	uxth	r6, r6
 800501a:	e7da      	b.n	8004fd2 <_svfprintf_r+0xa0a>
 800501c:	f41b 7700 	ands.w	r7, fp, #512	@ 0x200
 8005020:	d0d7      	beq.n	8004fd2 <_svfprintf_r+0xa0a>
 8005022:	b2f6      	uxtb	r6, r6
 8005024:	e7f3      	b.n	800500e <_svfprintf_r+0xa46>
 8005026:	4633      	mov	r3, r6
 8005028:	f853 6b04 	ldr.w	r6, [r3], #4
 800502c:	2278      	movs	r2, #120	@ 0x78
 800502e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005030:	f647 0330 	movw	r3, #30768	@ 0x7830
 8005034:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 8005038:	4b94      	ldr	r3, [pc, #592]	@ (800528c <_svfprintf_r+0xcc4>)
 800503a:	2700      	movs	r7, #0
 800503c:	931d      	str	r3, [sp, #116]	@ 0x74
 800503e:	f04b 0b02 	orr.w	fp, fp, #2
 8005042:	2302      	movs	r3, #2
 8005044:	920a      	str	r2, [sp, #40]	@ 0x28
 8005046:	e7c7      	b.n	8004fd8 <_svfprintf_r+0xa10>
 8005048:	4633      	mov	r3, r6
 800504a:	2600      	movs	r6, #0
 800504c:	f853 9b04 	ldr.w	r9, [r3], #4
 8005050:	1c6f      	adds	r7, r5, #1
 8005052:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005054:	f88d 608b 	strb.w	r6, [sp, #139]	@ 0x8b
 8005058:	d00f      	beq.n	800507a <_svfprintf_r+0xab2>
 800505a:	462a      	mov	r2, r5
 800505c:	4631      	mov	r1, r6
 800505e:	4648      	mov	r0, r9
 8005060:	f000 fdb4 	bl	8005bcc <memchr>
 8005064:	4682      	mov	sl, r0
 8005066:	2800      	cmp	r0, #0
 8005068:	f43f ac8c 	beq.w	8004984 <_svfprintf_r+0x3bc>
 800506c:	46b2      	mov	sl, r6
 800506e:	4637      	mov	r7, r6
 8005070:	eba0 0509 	sub.w	r5, r0, r9
 8005074:	9614      	str	r6, [sp, #80]	@ 0x50
 8005076:	960c      	str	r6, [sp, #48]	@ 0x30
 8005078:	e5ee      	b.n	8004c58 <_svfprintf_r+0x690>
 800507a:	4648      	mov	r0, r9
 800507c:	f7fb f868 	bl	8000150 <strlen>
 8005080:	46b2      	mov	sl, r6
 8005082:	4605      	mov	r5, r0
 8005084:	e47e      	b.n	8004984 <_svfprintf_r+0x3bc>
 8005086:	f04b 0b10 	orr.w	fp, fp, #16
 800508a:	f01b 0320 	ands.w	r3, fp, #32
 800508e:	d009      	beq.n	80050a4 <_svfprintf_r+0xadc>
 8005090:	3607      	adds	r6, #7
 8005092:	f026 0307 	bic.w	r3, r6, #7
 8005096:	461a      	mov	r2, r3
 8005098:	f852 6b08 	ldr.w	r6, [r2], #8
 800509c:	685f      	ldr	r7, [r3, #4]
 800509e:	920b      	str	r2, [sp, #44]	@ 0x2c
 80050a0:	2301      	movs	r3, #1
 80050a2:	e799      	b.n	8004fd8 <_svfprintf_r+0xa10>
 80050a4:	4632      	mov	r2, r6
 80050a6:	f852 6b04 	ldr.w	r6, [r2], #4
 80050aa:	f01b 0710 	ands.w	r7, fp, #16
 80050ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 80050b0:	d001      	beq.n	80050b6 <_svfprintf_r+0xaee>
 80050b2:	461f      	mov	r7, r3
 80050b4:	e7f4      	b.n	80050a0 <_svfprintf_r+0xad8>
 80050b6:	f01b 0340 	ands.w	r3, fp, #64	@ 0x40
 80050ba:	d001      	beq.n	80050c0 <_svfprintf_r+0xaf8>
 80050bc:	b2b6      	uxth	r6, r6
 80050be:	e7ef      	b.n	80050a0 <_svfprintf_r+0xad8>
 80050c0:	f41b 7700 	ands.w	r7, fp, #512	@ 0x200
 80050c4:	d0ec      	beq.n	80050a0 <_svfprintf_r+0xad8>
 80050c6:	b2f6      	uxtb	r6, r6
 80050c8:	e7f3      	b.n	80050b2 <_svfprintf_r+0xaea>
 80050ca:	4b71      	ldr	r3, [pc, #452]	@ (8005290 <_svfprintf_r+0xcc8>)
 80050cc:	f7ff bb4b 	b.w	8004766 <_svfprintf_r+0x19e>
 80050d0:	4632      	mov	r2, r6
 80050d2:	f852 6b04 	ldr.w	r6, [r2], #4
 80050d6:	f01b 0710 	ands.w	r7, fp, #16
 80050da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80050dc:	d002      	beq.n	80050e4 <_svfprintf_r+0xb1c>
 80050de:	461f      	mov	r7, r3
 80050e0:	f7ff bb4e 	b.w	8004780 <_svfprintf_r+0x1b8>
 80050e4:	f01b 0340 	ands.w	r3, fp, #64	@ 0x40
 80050e8:	d002      	beq.n	80050f0 <_svfprintf_r+0xb28>
 80050ea:	b2b6      	uxth	r6, r6
 80050ec:	f7ff bb48 	b.w	8004780 <_svfprintf_r+0x1b8>
 80050f0:	f41b 7700 	ands.w	r7, fp, #512	@ 0x200
 80050f4:	f43f ab44 	beq.w	8004780 <_svfprintf_r+0x1b8>
 80050f8:	b2f6      	uxtb	r6, r6
 80050fa:	e7f0      	b.n	80050de <_svfprintf_r+0xb16>
 80050fc:	2e0a      	cmp	r6, #10
 80050fe:	f177 0300 	sbcs.w	r3, r7, #0
 8005102:	d207      	bcs.n	8005114 <_svfprintf_r+0xb4c>
 8005104:	3630      	adds	r6, #48	@ 0x30
 8005106:	b2f6      	uxtb	r6, r6
 8005108:	f88d 6157 	strb.w	r6, [sp, #343]	@ 0x157
 800510c:	f20d 1957 	addw	r9, sp, #343	@ 0x157
 8005110:	f000 bc04 	b.w	800591c <_svfprintf_r+0x1354>
 8005114:	2300      	movs	r3, #0
 8005116:	9308      	str	r3, [sp, #32]
 8005118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800511a:	f50d 7aac 	add.w	sl, sp, #344	@ 0x158
 800511e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005122:	9314      	str	r3, [sp, #80]	@ 0x50
 8005124:	220a      	movs	r2, #10
 8005126:	2300      	movs	r3, #0
 8005128:	4630      	mov	r0, r6
 800512a:	4639      	mov	r1, r7
 800512c:	f7fb fe80 	bl	8000e30 <__aeabi_uldivmod>
 8005130:	3230      	adds	r2, #48	@ 0x30
 8005132:	f80a 2c01 	strb.w	r2, [sl, #-1]
 8005136:	9a08      	ldr	r2, [sp, #32]
 8005138:	4683      	mov	fp, r0
 800513a:	3201      	adds	r2, #1
 800513c:	9208      	str	r2, [sp, #32]
 800513e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005140:	460b      	mov	r3, r1
 8005142:	f10a 39ff 	add.w	r9, sl, #4294967295
 8005146:	b1e2      	cbz	r2, 8005182 <_svfprintf_r+0xbba>
 8005148:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800514a:	9908      	ldr	r1, [sp, #32]
 800514c:	7812      	ldrb	r2, [r2, #0]
 800514e:	4291      	cmp	r1, r2
 8005150:	d117      	bne.n	8005182 <_svfprintf_r+0xbba>
 8005152:	29ff      	cmp	r1, #255	@ 0xff
 8005154:	d015      	beq.n	8005182 <_svfprintf_r+0xbba>
 8005156:	2e0a      	cmp	r6, #10
 8005158:	f177 0200 	sbcs.w	r2, r7, #0
 800515c:	d311      	bcc.n	8005182 <_svfprintf_r+0xbba>
 800515e:	9308      	str	r3, [sp, #32]
 8005160:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005162:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005164:	eba9 0903 	sub.w	r9, r9, r3
 8005168:	461a      	mov	r2, r3
 800516a:	4648      	mov	r0, r9
 800516c:	f000 fce7 	bl	8005b3e <strncpy>
 8005170:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005172:	785a      	ldrb	r2, [r3, #1]
 8005174:	9b08      	ldr	r3, [sp, #32]
 8005176:	b11a      	cbz	r2, 8005180 <_svfprintf_r+0xbb8>
 8005178:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800517a:	3201      	adds	r2, #1
 800517c:	920d      	str	r2, [sp, #52]	@ 0x34
 800517e:	2200      	movs	r2, #0
 8005180:	9208      	str	r2, [sp, #32]
 8005182:	2e0a      	cmp	r6, #10
 8005184:	f177 0700 	sbcs.w	r7, r7, #0
 8005188:	f0c0 83c8 	bcc.w	800591c <_svfprintf_r+0x1354>
 800518c:	465e      	mov	r6, fp
 800518e:	461f      	mov	r7, r3
 8005190:	46ca      	mov	sl, r9
 8005192:	e7c7      	b.n	8005124 <_svfprintf_r+0xb5c>
 8005194:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005196:	f006 030f 	and.w	r3, r6, #15
 800519a:	5cd3      	ldrb	r3, [r2, r3]
 800519c:	0936      	lsrs	r6, r6, #4
 800519e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 80051a2:	093f      	lsrs	r7, r7, #4
 80051a4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80051a8:	ea56 0307 	orrs.w	r3, r6, r7
 80051ac:	d1f2      	bne.n	8005194 <_svfprintf_r+0xbcc>
 80051ae:	e3b5      	b.n	800591c <_svfprintf_r+0x1354>
 80051b0:	b923      	cbnz	r3, 80051bc <_svfprintf_r+0xbf4>
 80051b2:	f01b 0f01 	tst.w	fp, #1
 80051b6:	d001      	beq.n	80051bc <_svfprintf_r+0xbf4>
 80051b8:	2630      	movs	r6, #48	@ 0x30
 80051ba:	e7a5      	b.n	8005108 <_svfprintf_r+0xb40>
 80051bc:	f50d 79ac 	add.w	r9, sp, #344	@ 0x158
 80051c0:	e3ac      	b.n	800591c <_svfprintf_r+0x1354>
 80051c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8379 	beq.w	80058bc <_svfprintf_r+0x12f4>
 80051ca:	f88d 30f4 	strb.w	r3, [sp, #244]	@ 0xf4
 80051ce:	2300      	movs	r3, #0
 80051d0:	960b      	str	r6, [sp, #44]	@ 0x2c
 80051d2:	f88d 308b 	strb.w	r3, [sp, #139]	@ 0x8b
 80051d6:	f7ff bb68 	b.w	80048aa <_svfprintf_r+0x2e2>
 80051da:	2010      	movs	r0, #16
 80051dc:	2a07      	cmp	r2, #7
 80051de:	4403      	add	r3, r0
 80051e0:	e9cd 232b 	strd	r2, r3, [sp, #172]	@ 0xac
 80051e4:	6060      	str	r0, [r4, #4]
 80051e6:	dd08      	ble.n	80051fa <_svfprintf_r+0xc32>
 80051e8:	4641      	mov	r1, r8
 80051ea:	9807      	ldr	r0, [sp, #28]
 80051ec:	aa2a      	add	r2, sp, #168	@ 0xa8
 80051ee:	f001 fed5 	bl	8006f9c <__ssprint_r>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	f040 8340 	bne.w	8005878 <_svfprintf_r+0x12b0>
 80051f8:	a92d      	add	r1, sp, #180	@ 0xb4
 80051fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051fc:	460c      	mov	r4, r1
 80051fe:	3b10      	subs	r3, #16
 8005200:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005202:	e545      	b.n	8004c90 <_svfprintf_r+0x6c8>
 8005204:	460c      	mov	r4, r1
 8005206:	e55f      	b.n	8004cc8 <_svfprintf_r+0x700>
 8005208:	4641      	mov	r1, r8
 800520a:	9807      	ldr	r0, [sp, #28]
 800520c:	aa2a      	add	r2, sp, #168	@ 0xa8
 800520e:	f001 fec5 	bl	8006f9c <__ssprint_r>
 8005212:	2800      	cmp	r0, #0
 8005214:	f040 8330 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005218:	ac2d      	add	r4, sp, #180	@ 0xb4
 800521a:	e567      	b.n	8004cec <_svfprintf_r+0x724>
 800521c:	4641      	mov	r1, r8
 800521e:	9807      	ldr	r0, [sp, #28]
 8005220:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005222:	f001 febb 	bl	8006f9c <__ssprint_r>
 8005226:	2800      	cmp	r0, #0
 8005228:	f040 8326 	bne.w	8005878 <_svfprintf_r+0x12b0>
 800522c:	ac2d      	add	r4, sp, #180	@ 0xb4
 800522e:	e56d      	b.n	8004d0c <_svfprintf_r+0x744>
 8005230:	2010      	movs	r0, #16
 8005232:	2a07      	cmp	r2, #7
 8005234:	4403      	add	r3, r0
 8005236:	e9cd 232b 	strd	r2, r3, [sp, #172]	@ 0xac
 800523a:	6060      	str	r0, [r4, #4]
 800523c:	dd08      	ble.n	8005250 <_svfprintf_r+0xc88>
 800523e:	4641      	mov	r1, r8
 8005240:	9807      	ldr	r0, [sp, #28]
 8005242:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005244:	f001 feaa 	bl	8006f9c <__ssprint_r>
 8005248:	2800      	cmp	r0, #0
 800524a:	f040 8315 	bne.w	8005878 <_svfprintf_r+0x12b0>
 800524e:	a92d      	add	r1, sp, #180	@ 0xb4
 8005250:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005252:	460c      	mov	r4, r1
 8005254:	3b10      	subs	r3, #16
 8005256:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005258:	e561      	b.n	8004d1e <_svfprintf_r+0x756>
 800525a:	460c      	mov	r4, r1
 800525c:	e57b      	b.n	8004d56 <_svfprintf_r+0x78e>
 800525e:	2010      	movs	r0, #16
 8005260:	2a07      	cmp	r2, #7
 8005262:	4403      	add	r3, r0
 8005264:	e9cd 232b 	strd	r2, r3, [sp, #172]	@ 0xac
 8005268:	6060      	str	r0, [r4, #4]
 800526a:	dd08      	ble.n	800527e <_svfprintf_r+0xcb6>
 800526c:	4641      	mov	r1, r8
 800526e:	9807      	ldr	r0, [sp, #28]
 8005270:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005272:	f001 fe93 	bl	8006f9c <__ssprint_r>
 8005276:	2800      	cmp	r0, #0
 8005278:	f040 82fe 	bne.w	8005878 <_svfprintf_r+0x12b0>
 800527c:	a92d      	add	r1, sp, #180	@ 0xb4
 800527e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005280:	460c      	mov	r4, r1
 8005282:	3b10      	subs	r3, #16
 8005284:	9314      	str	r3, [sp, #80]	@ 0x50
 8005286:	e56b      	b.n	8004d60 <_svfprintf_r+0x798>
 8005288:	460c      	mov	r4, r1
 800528a:	e585      	b.n	8004d98 <_svfprintf_r+0x7d0>
 800528c:	08009476 	.word	0x08009476
 8005290:	08009487 	.word	0x08009487
 8005294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005296:	2b65      	cmp	r3, #101	@ 0x65
 8005298:	f340 8234 	ble.w	8005704 <_svfprintf_r+0x113c>
 800529c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80052a0:	2200      	movs	r2, #0
 80052a2:	2300      	movs	r3, #0
 80052a4:	f7fb fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d069      	beq.n	8005380 <_svfprintf_r+0xdb8>
 80052ac:	4b6e      	ldr	r3, [pc, #440]	@ (8005468 <_svfprintf_r+0xea0>)
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	2301      	movs	r3, #1
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052b6:	3301      	adds	r3, #1
 80052b8:	932c      	str	r3, [sp, #176]	@ 0xb0
 80052ba:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80052bc:	3301      	adds	r3, #1
 80052be:	2b07      	cmp	r3, #7
 80052c0:	932b      	str	r3, [sp, #172]	@ 0xac
 80052c2:	dc37      	bgt.n	8005334 <_svfprintf_r+0xd6c>
 80052c4:	3408      	adds	r4, #8
 80052c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052c8:	9a08      	ldr	r2, [sp, #32]
 80052ca:	4293      	cmp	r3, r2
 80052cc:	db03      	blt.n	80052d6 <_svfprintf_r+0xd0e>
 80052ce:	f01b 0f01 	tst.w	fp, #1
 80052d2:	f43f ad72 	beq.w	8004dba <_svfprintf_r+0x7f2>
 80052d6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80052d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80052de:	6063      	str	r3, [r4, #4]
 80052e0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80052e2:	4413      	add	r3, r2
 80052e4:	932c      	str	r3, [sp, #176]	@ 0xb0
 80052e6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80052e8:	3301      	adds	r3, #1
 80052ea:	2b07      	cmp	r3, #7
 80052ec:	932b      	str	r3, [sp, #172]	@ 0xac
 80052ee:	dc2b      	bgt.n	8005348 <_svfprintf_r+0xd80>
 80052f0:	3408      	adds	r4, #8
 80052f2:	9b08      	ldr	r3, [sp, #32]
 80052f4:	1e5d      	subs	r5, r3, #1
 80052f6:	2d00      	cmp	r5, #0
 80052f8:	f77f ad5f 	ble.w	8004dba <_svfprintf_r+0x7f2>
 80052fc:	2710      	movs	r7, #16
 80052fe:	4e5b      	ldr	r6, [pc, #364]	@ (800546c <_svfprintf_r+0xea4>)
 8005300:	2d10      	cmp	r5, #16
 8005302:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	@ 0xac
 8005306:	f104 0108 	add.w	r1, r4, #8
 800530a:	f103 0301 	add.w	r3, r3, #1
 800530e:	6026      	str	r6, [r4, #0]
 8005310:	dc24      	bgt.n	800535c <_svfprintf_r+0xd94>
 8005312:	6065      	str	r5, [r4, #4]
 8005314:	2b07      	cmp	r3, #7
 8005316:	4415      	add	r5, r2
 8005318:	e9cd 352b 	strd	r3, r5, [sp, #172]	@ 0xac
 800531c:	f340 828b 	ble.w	8005836 <_svfprintf_r+0x126e>
 8005320:	4641      	mov	r1, r8
 8005322:	9807      	ldr	r0, [sp, #28]
 8005324:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005326:	f001 fe39 	bl	8006f9c <__ssprint_r>
 800532a:	2800      	cmp	r0, #0
 800532c:	f040 82a4 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005330:	ac2d      	add	r4, sp, #180	@ 0xb4
 8005332:	e542      	b.n	8004dba <_svfprintf_r+0x7f2>
 8005334:	4641      	mov	r1, r8
 8005336:	9807      	ldr	r0, [sp, #28]
 8005338:	aa2a      	add	r2, sp, #168	@ 0xa8
 800533a:	f001 fe2f 	bl	8006f9c <__ssprint_r>
 800533e:	2800      	cmp	r0, #0
 8005340:	f040 829a 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005344:	ac2d      	add	r4, sp, #180	@ 0xb4
 8005346:	e7be      	b.n	80052c6 <_svfprintf_r+0xcfe>
 8005348:	4641      	mov	r1, r8
 800534a:	9807      	ldr	r0, [sp, #28]
 800534c:	aa2a      	add	r2, sp, #168	@ 0xa8
 800534e:	f001 fe25 	bl	8006f9c <__ssprint_r>
 8005352:	2800      	cmp	r0, #0
 8005354:	f040 8290 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005358:	ac2d      	add	r4, sp, #180	@ 0xb4
 800535a:	e7ca      	b.n	80052f2 <_svfprintf_r+0xd2a>
 800535c:	3210      	adds	r2, #16
 800535e:	2b07      	cmp	r3, #7
 8005360:	e9cd 322b 	strd	r3, r2, [sp, #172]	@ 0xac
 8005364:	6067      	str	r7, [r4, #4]
 8005366:	dd08      	ble.n	800537a <_svfprintf_r+0xdb2>
 8005368:	4641      	mov	r1, r8
 800536a:	9807      	ldr	r0, [sp, #28]
 800536c:	aa2a      	add	r2, sp, #168	@ 0xa8
 800536e:	f001 fe15 	bl	8006f9c <__ssprint_r>
 8005372:	2800      	cmp	r0, #0
 8005374:	f040 8280 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005378:	a92d      	add	r1, sp, #180	@ 0xb4
 800537a:	460c      	mov	r4, r1
 800537c:	3d10      	subs	r5, #16
 800537e:	e7bf      	b.n	8005300 <_svfprintf_r+0xd38>
 8005380:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005382:	2b00      	cmp	r3, #0
 8005384:	dc74      	bgt.n	8005470 <_svfprintf_r+0xea8>
 8005386:	4b38      	ldr	r3, [pc, #224]	@ (8005468 <_svfprintf_r+0xea0>)
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	2301      	movs	r3, #1
 800538c:	6063      	str	r3, [r4, #4]
 800538e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005390:	3301      	adds	r3, #1
 8005392:	932c      	str	r3, [sp, #176]	@ 0xb0
 8005394:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005396:	3301      	adds	r3, #1
 8005398:	2b07      	cmp	r3, #7
 800539a:	932b      	str	r3, [sp, #172]	@ 0xac
 800539c:	dc3d      	bgt.n	800541a <_svfprintf_r+0xe52>
 800539e:	3408      	adds	r4, #8
 80053a0:	9908      	ldr	r1, [sp, #32]
 80053a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053a4:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80053a6:	430b      	orrs	r3, r1
 80053a8:	f00b 0101 	and.w	r1, fp, #1
 80053ac:	430b      	orrs	r3, r1
 80053ae:	f43f ad04 	beq.w	8004dba <_svfprintf_r+0x7f2>
 80053b2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80053b8:	441a      	add	r2, r3
 80053ba:	6063      	str	r3, [r4, #4]
 80053bc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80053be:	922c      	str	r2, [sp, #176]	@ 0xb0
 80053c0:	3301      	adds	r3, #1
 80053c2:	2b07      	cmp	r3, #7
 80053c4:	932b      	str	r3, [sp, #172]	@ 0xac
 80053c6:	dc32      	bgt.n	800542e <_svfprintf_r+0xe66>
 80053c8:	3408      	adds	r4, #8
 80053ca:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 80053cc:	2d00      	cmp	r5, #0
 80053ce:	da1b      	bge.n	8005408 <_svfprintf_r+0xe40>
 80053d0:	4623      	mov	r3, r4
 80053d2:	2710      	movs	r7, #16
 80053d4:	4e25      	ldr	r6, [pc, #148]	@ (800546c <_svfprintf_r+0xea4>)
 80053d6:	426d      	negs	r5, r5
 80053d8:	2d10      	cmp	r5, #16
 80053da:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	@ 0xac
 80053de:	f104 0408 	add.w	r4, r4, #8
 80053e2:	f102 0201 	add.w	r2, r2, #1
 80053e6:	601e      	str	r6, [r3, #0]
 80053e8:	dc2b      	bgt.n	8005442 <_svfprintf_r+0xe7a>
 80053ea:	605d      	str	r5, [r3, #4]
 80053ec:	2a07      	cmp	r2, #7
 80053ee:	440d      	add	r5, r1
 80053f0:	e9cd 252b 	strd	r2, r5, [sp, #172]	@ 0xac
 80053f4:	dd08      	ble.n	8005408 <_svfprintf_r+0xe40>
 80053f6:	4641      	mov	r1, r8
 80053f8:	9807      	ldr	r0, [sp, #28]
 80053fa:	aa2a      	add	r2, sp, #168	@ 0xa8
 80053fc:	f001 fdce 	bl	8006f9c <__ssprint_r>
 8005400:	2800      	cmp	r0, #0
 8005402:	f040 8239 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005406:	ac2d      	add	r4, sp, #180	@ 0xb4
 8005408:	9b08      	ldr	r3, [sp, #32]
 800540a:	9a08      	ldr	r2, [sp, #32]
 800540c:	6063      	str	r3, [r4, #4]
 800540e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005410:	f8c4 9000 	str.w	r9, [r4]
 8005414:	4413      	add	r3, r2
 8005416:	932c      	str	r3, [sp, #176]	@ 0xb0
 8005418:	e4c8      	b.n	8004dac <_svfprintf_r+0x7e4>
 800541a:	4641      	mov	r1, r8
 800541c:	9807      	ldr	r0, [sp, #28]
 800541e:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005420:	f001 fdbc 	bl	8006f9c <__ssprint_r>
 8005424:	2800      	cmp	r0, #0
 8005426:	f040 8227 	bne.w	8005878 <_svfprintf_r+0x12b0>
 800542a:	ac2d      	add	r4, sp, #180	@ 0xb4
 800542c:	e7b8      	b.n	80053a0 <_svfprintf_r+0xdd8>
 800542e:	4641      	mov	r1, r8
 8005430:	9807      	ldr	r0, [sp, #28]
 8005432:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005434:	f001 fdb2 	bl	8006f9c <__ssprint_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	f040 821d 	bne.w	8005878 <_svfprintf_r+0x12b0>
 800543e:	ac2d      	add	r4, sp, #180	@ 0xb4
 8005440:	e7c3      	b.n	80053ca <_svfprintf_r+0xe02>
 8005442:	3110      	adds	r1, #16
 8005444:	2a07      	cmp	r2, #7
 8005446:	e9cd 212b 	strd	r2, r1, [sp, #172]	@ 0xac
 800544a:	605f      	str	r7, [r3, #4]
 800544c:	dd08      	ble.n	8005460 <_svfprintf_r+0xe98>
 800544e:	4641      	mov	r1, r8
 8005450:	9807      	ldr	r0, [sp, #28]
 8005452:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005454:	f001 fda2 	bl	8006f9c <__ssprint_r>
 8005458:	2800      	cmp	r0, #0
 800545a:	f040 820d 	bne.w	8005878 <_svfprintf_r+0x12b0>
 800545e:	ac2d      	add	r4, sp, #180	@ 0xb4
 8005460:	4623      	mov	r3, r4
 8005462:	3d10      	subs	r5, #16
 8005464:	e7b8      	b.n	80053d8 <_svfprintf_r+0xe10>
 8005466:	bf00      	nop
 8005468:	08009498 	.word	0x08009498
 800546c:	0800949a 	.word	0x0800949a
 8005470:	9b08      	ldr	r3, [sp, #32]
 8005472:	444b      	add	r3, r9
 8005474:	930a      	str	r3, [sp, #40]	@ 0x28
 8005476:	9b08      	ldr	r3, [sp, #32]
 8005478:	42b3      	cmp	r3, r6
 800547a:	bfa8      	it	ge
 800547c:	4633      	movge	r3, r6
 800547e:	2b00      	cmp	r3, #0
 8005480:	461d      	mov	r5, r3
 8005482:	dd0b      	ble.n	800549c <_svfprintf_r+0xed4>
 8005484:	e9c4 9300 	strd	r9, r3, [r4]
 8005488:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800548a:	442b      	add	r3, r5
 800548c:	932c      	str	r3, [sp, #176]	@ 0xb0
 800548e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005490:	3301      	adds	r3, #1
 8005492:	2b07      	cmp	r3, #7
 8005494:	932b      	str	r3, [sp, #172]	@ 0xac
 8005496:	f300 8082 	bgt.w	800559e <_svfprintf_r+0xfd6>
 800549a:	3408      	adds	r4, #8
 800549c:	2d00      	cmp	r5, #0
 800549e:	bfb4      	ite	lt
 80054a0:	4635      	movlt	r5, r6
 80054a2:	1b75      	subge	r5, r6, r5
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	dd19      	ble.n	80054dc <_svfprintf_r+0xf14>
 80054a8:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	@ 0xac
 80054ac:	4894      	ldr	r0, [pc, #592]	@ (8005700 <_svfprintf_r+0x1138>)
 80054ae:	2d10      	cmp	r5, #16
 80054b0:	f103 0301 	add.w	r3, r3, #1
 80054b4:	f104 0108 	add.w	r1, r4, #8
 80054b8:	6020      	str	r0, [r4, #0]
 80054ba:	dc7a      	bgt.n	80055b2 <_svfprintf_r+0xfea>
 80054bc:	6065      	str	r5, [r4, #4]
 80054be:	2b07      	cmp	r3, #7
 80054c0:	4415      	add	r5, r2
 80054c2:	e9cd 352b 	strd	r3, r5, [sp, #172]	@ 0xac
 80054c6:	f340 8087 	ble.w	80055d8 <_svfprintf_r+0x1010>
 80054ca:	4641      	mov	r1, r8
 80054cc:	9807      	ldr	r0, [sp, #28]
 80054ce:	aa2a      	add	r2, sp, #168	@ 0xa8
 80054d0:	f001 fd64 	bl	8006f9c <__ssprint_r>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f040 81cf 	bne.w	8005878 <_svfprintf_r+0x12b0>
 80054da:	ac2d      	add	r4, sp, #180	@ 0xb4
 80054dc:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 80054e0:	444e      	add	r6, r9
 80054e2:	d008      	beq.n	80054f6 <_svfprintf_r+0xf2e>
 80054e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d178      	bne.n	80055dc <_svfprintf_r+0x1014>
 80054ea:	2f00      	cmp	r7, #0
 80054ec:	d178      	bne.n	80055e0 <_svfprintf_r+0x1018>
 80054ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054f0:	429e      	cmp	r6, r3
 80054f2:	bf28      	it	cs
 80054f4:	461e      	movcs	r6, r3
 80054f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054f8:	9a08      	ldr	r2, [sp, #32]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	db02      	blt.n	8005504 <_svfprintf_r+0xf3c>
 80054fe:	f01b 0f01 	tst.w	fp, #1
 8005502:	d00e      	beq.n	8005522 <_svfprintf_r+0xf5a>
 8005504:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005506:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005510:	4413      	add	r3, r2
 8005512:	932c      	str	r3, [sp, #176]	@ 0xb0
 8005514:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005516:	3301      	adds	r3, #1
 8005518:	2b07      	cmp	r3, #7
 800551a:	932b      	str	r3, [sp, #172]	@ 0xac
 800551c:	f300 80db 	bgt.w	80056d6 <_svfprintf_r+0x110e>
 8005520:	3408      	adds	r4, #8
 8005522:	9b08      	ldr	r3, [sp, #32]
 8005524:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 8005526:	1bdf      	subs	r7, r3, r7
 8005528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800552a:	1b9b      	subs	r3, r3, r6
 800552c:	429f      	cmp	r7, r3
 800552e:	bfa8      	it	ge
 8005530:	461f      	movge	r7, r3
 8005532:	2f00      	cmp	r7, #0
 8005534:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005536:	dd0a      	ble.n	800554e <_svfprintf_r+0xf86>
 8005538:	443b      	add	r3, r7
 800553a:	932c      	str	r3, [sp, #176]	@ 0xb0
 800553c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800553e:	e9c4 6700 	strd	r6, r7, [r4]
 8005542:	3301      	adds	r3, #1
 8005544:	2b07      	cmp	r3, #7
 8005546:	932b      	str	r3, [sp, #172]	@ 0xac
 8005548:	f300 80cf 	bgt.w	80056ea <_svfprintf_r+0x1122>
 800554c:	3408      	adds	r4, #8
 800554e:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8005550:	9b08      	ldr	r3, [sp, #32]
 8005552:	2f00      	cmp	r7, #0
 8005554:	eba3 0505 	sub.w	r5, r3, r5
 8005558:	bfa8      	it	ge
 800555a:	1bed      	subge	r5, r5, r7
 800555c:	2d00      	cmp	r5, #0
 800555e:	f77f ac2c 	ble.w	8004dba <_svfprintf_r+0x7f2>
 8005562:	2710      	movs	r7, #16
 8005564:	4e66      	ldr	r6, [pc, #408]	@ (8005700 <_svfprintf_r+0x1138>)
 8005566:	2d10      	cmp	r5, #16
 8005568:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	@ 0xac
 800556c:	f104 0108 	add.w	r1, r4, #8
 8005570:	f103 0301 	add.w	r3, r3, #1
 8005574:	6026      	str	r6, [r4, #0]
 8005576:	f77f aecc 	ble.w	8005312 <_svfprintf_r+0xd4a>
 800557a:	3210      	adds	r2, #16
 800557c:	2b07      	cmp	r3, #7
 800557e:	e9cd 322b 	strd	r3, r2, [sp, #172]	@ 0xac
 8005582:	6067      	str	r7, [r4, #4]
 8005584:	dd08      	ble.n	8005598 <_svfprintf_r+0xfd0>
 8005586:	4641      	mov	r1, r8
 8005588:	9807      	ldr	r0, [sp, #28]
 800558a:	aa2a      	add	r2, sp, #168	@ 0xa8
 800558c:	f001 fd06 	bl	8006f9c <__ssprint_r>
 8005590:	2800      	cmp	r0, #0
 8005592:	f040 8171 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005596:	a92d      	add	r1, sp, #180	@ 0xb4
 8005598:	460c      	mov	r4, r1
 800559a:	3d10      	subs	r5, #16
 800559c:	e7e3      	b.n	8005566 <_svfprintf_r+0xf9e>
 800559e:	4641      	mov	r1, r8
 80055a0:	9807      	ldr	r0, [sp, #28]
 80055a2:	aa2a      	add	r2, sp, #168	@ 0xa8
 80055a4:	f001 fcfa 	bl	8006f9c <__ssprint_r>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f040 8165 	bne.w	8005878 <_svfprintf_r+0x12b0>
 80055ae:	ac2d      	add	r4, sp, #180	@ 0xb4
 80055b0:	e774      	b.n	800549c <_svfprintf_r+0xed4>
 80055b2:	2010      	movs	r0, #16
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	4402      	add	r2, r0
 80055b8:	e9cd 322b 	strd	r3, r2, [sp, #172]	@ 0xac
 80055bc:	6060      	str	r0, [r4, #4]
 80055be:	dd08      	ble.n	80055d2 <_svfprintf_r+0x100a>
 80055c0:	4641      	mov	r1, r8
 80055c2:	9807      	ldr	r0, [sp, #28]
 80055c4:	aa2a      	add	r2, sp, #168	@ 0xa8
 80055c6:	f001 fce9 	bl	8006f9c <__ssprint_r>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f040 8154 	bne.w	8005878 <_svfprintf_r+0x12b0>
 80055d0:	a92d      	add	r1, sp, #180	@ 0xb4
 80055d2:	460c      	mov	r4, r1
 80055d4:	3d10      	subs	r5, #16
 80055d6:	e767      	b.n	80054a8 <_svfprintf_r+0xee0>
 80055d8:	460c      	mov	r4, r1
 80055da:	e77f      	b.n	80054dc <_svfprintf_r+0xf14>
 80055dc:	2f00      	cmp	r7, #0
 80055de:	d04a      	beq.n	8005676 <_svfprintf_r+0x10ae>
 80055e0:	3f01      	subs	r7, #1
 80055e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80055e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80055ee:	4413      	add	r3, r2
 80055f0:	932c      	str	r3, [sp, #176]	@ 0xb0
 80055f2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80055f4:	3301      	adds	r3, #1
 80055f6:	2b07      	cmp	r3, #7
 80055f8:	932b      	str	r3, [sp, #172]	@ 0xac
 80055fa:	dc43      	bgt.n	8005684 <_svfprintf_r+0x10bc>
 80055fc:	3408      	adds	r4, #8
 80055fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005600:	f893 9000 	ldrb.w	r9, [r3]
 8005604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005606:	1b9b      	subs	r3, r3, r6
 8005608:	4599      	cmp	r9, r3
 800560a:	bfa8      	it	ge
 800560c:	4699      	movge	r9, r3
 800560e:	f1b9 0f00 	cmp.w	r9, #0
 8005612:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005614:	dd09      	ble.n	800562a <_svfprintf_r+0x1062>
 8005616:	444b      	add	r3, r9
 8005618:	932c      	str	r3, [sp, #176]	@ 0xb0
 800561a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800561c:	e9c4 6900 	strd	r6, r9, [r4]
 8005620:	3301      	adds	r3, #1
 8005622:	2b07      	cmp	r3, #7
 8005624:	932b      	str	r3, [sp, #172]	@ 0xac
 8005626:	dc37      	bgt.n	8005698 <_svfprintf_r+0x10d0>
 8005628:	3408      	adds	r4, #8
 800562a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800562c:	f1b9 0f00 	cmp.w	r9, #0
 8005630:	781d      	ldrb	r5, [r3, #0]
 8005632:	bfa8      	it	ge
 8005634:	eba5 0509 	subge.w	r5, r5, r9
 8005638:	2d00      	cmp	r5, #0
 800563a:	dd18      	ble.n	800566e <_svfprintf_r+0x10a6>
 800563c:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	@ 0xac
 8005640:	482f      	ldr	r0, [pc, #188]	@ (8005700 <_svfprintf_r+0x1138>)
 8005642:	2d10      	cmp	r5, #16
 8005644:	f103 0301 	add.w	r3, r3, #1
 8005648:	f104 0108 	add.w	r1, r4, #8
 800564c:	6020      	str	r0, [r4, #0]
 800564e:	dc2d      	bgt.n	80056ac <_svfprintf_r+0x10e4>
 8005650:	6065      	str	r5, [r4, #4]
 8005652:	2b07      	cmp	r3, #7
 8005654:	4415      	add	r5, r2
 8005656:	e9cd 352b 	strd	r3, r5, [sp, #172]	@ 0xac
 800565a:	dd3a      	ble.n	80056d2 <_svfprintf_r+0x110a>
 800565c:	4641      	mov	r1, r8
 800565e:	9807      	ldr	r0, [sp, #28]
 8005660:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005662:	f001 fc9b 	bl	8006f9c <__ssprint_r>
 8005666:	2800      	cmp	r0, #0
 8005668:	f040 8106 	bne.w	8005878 <_svfprintf_r+0x12b0>
 800566c:	ac2d      	add	r4, sp, #180	@ 0xb4
 800566e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	441e      	add	r6, r3
 8005674:	e736      	b.n	80054e4 <_svfprintf_r+0xf1c>
 8005676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005678:	3b01      	subs	r3, #1
 800567a:	930d      	str	r3, [sp, #52]	@ 0x34
 800567c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800567e:	3b01      	subs	r3, #1
 8005680:	930c      	str	r3, [sp, #48]	@ 0x30
 8005682:	e7ae      	b.n	80055e2 <_svfprintf_r+0x101a>
 8005684:	4641      	mov	r1, r8
 8005686:	9807      	ldr	r0, [sp, #28]
 8005688:	aa2a      	add	r2, sp, #168	@ 0xa8
 800568a:	f001 fc87 	bl	8006f9c <__ssprint_r>
 800568e:	2800      	cmp	r0, #0
 8005690:	f040 80f2 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005694:	ac2d      	add	r4, sp, #180	@ 0xb4
 8005696:	e7b2      	b.n	80055fe <_svfprintf_r+0x1036>
 8005698:	4641      	mov	r1, r8
 800569a:	9807      	ldr	r0, [sp, #28]
 800569c:	aa2a      	add	r2, sp, #168	@ 0xa8
 800569e:	f001 fc7d 	bl	8006f9c <__ssprint_r>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f040 80e8 	bne.w	8005878 <_svfprintf_r+0x12b0>
 80056a8:	ac2d      	add	r4, sp, #180	@ 0xb4
 80056aa:	e7be      	b.n	800562a <_svfprintf_r+0x1062>
 80056ac:	2010      	movs	r0, #16
 80056ae:	2b07      	cmp	r3, #7
 80056b0:	4402      	add	r2, r0
 80056b2:	e9cd 322b 	strd	r3, r2, [sp, #172]	@ 0xac
 80056b6:	6060      	str	r0, [r4, #4]
 80056b8:	dd08      	ble.n	80056cc <_svfprintf_r+0x1104>
 80056ba:	4641      	mov	r1, r8
 80056bc:	9807      	ldr	r0, [sp, #28]
 80056be:	aa2a      	add	r2, sp, #168	@ 0xa8
 80056c0:	f001 fc6c 	bl	8006f9c <__ssprint_r>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	f040 80d7 	bne.w	8005878 <_svfprintf_r+0x12b0>
 80056ca:	a92d      	add	r1, sp, #180	@ 0xb4
 80056cc:	460c      	mov	r4, r1
 80056ce:	3d10      	subs	r5, #16
 80056d0:	e7b4      	b.n	800563c <_svfprintf_r+0x1074>
 80056d2:	460c      	mov	r4, r1
 80056d4:	e7cb      	b.n	800566e <_svfprintf_r+0x10a6>
 80056d6:	4641      	mov	r1, r8
 80056d8:	9807      	ldr	r0, [sp, #28]
 80056da:	aa2a      	add	r2, sp, #168	@ 0xa8
 80056dc:	f001 fc5e 	bl	8006f9c <__ssprint_r>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	f040 80c9 	bne.w	8005878 <_svfprintf_r+0x12b0>
 80056e6:	ac2d      	add	r4, sp, #180	@ 0xb4
 80056e8:	e71b      	b.n	8005522 <_svfprintf_r+0xf5a>
 80056ea:	4641      	mov	r1, r8
 80056ec:	9807      	ldr	r0, [sp, #28]
 80056ee:	aa2a      	add	r2, sp, #168	@ 0xa8
 80056f0:	f001 fc54 	bl	8006f9c <__ssprint_r>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	f040 80bf 	bne.w	8005878 <_svfprintf_r+0x12b0>
 80056fa:	ac2d      	add	r4, sp, #180	@ 0xb4
 80056fc:	e727      	b.n	800554e <_svfprintf_r+0xf86>
 80056fe:	bf00      	nop
 8005700:	0800949a 	.word	0x0800949a
 8005704:	9908      	ldr	r1, [sp, #32]
 8005706:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005708:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 800570a:	2901      	cmp	r1, #1
 800570c:	f103 0301 	add.w	r3, r3, #1
 8005710:	f102 0201 	add.w	r2, r2, #1
 8005714:	f104 0508 	add.w	r5, r4, #8
 8005718:	dc02      	bgt.n	8005720 <_svfprintf_r+0x1158>
 800571a:	f01b 0f01 	tst.w	fp, #1
 800571e:	d07f      	beq.n	8005820 <_svfprintf_r+0x1258>
 8005720:	2101      	movs	r1, #1
 8005722:	2a07      	cmp	r2, #7
 8005724:	e9cd 232b 	strd	r2, r3, [sp, #172]	@ 0xac
 8005728:	f8c4 9000 	str.w	r9, [r4]
 800572c:	6061      	str	r1, [r4, #4]
 800572e:	dd08      	ble.n	8005742 <_svfprintf_r+0x117a>
 8005730:	4641      	mov	r1, r8
 8005732:	9807      	ldr	r0, [sp, #28]
 8005734:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005736:	f001 fc31 	bl	8006f9c <__ssprint_r>
 800573a:	2800      	cmp	r0, #0
 800573c:	f040 809c 	bne.w	8005878 <_svfprintf_r+0x12b0>
 8005740:	ad2d      	add	r5, sp, #180	@ 0xb4
 8005742:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005744:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800574a:	606b      	str	r3, [r5, #4]
 800574c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800574e:	4413      	add	r3, r2
 8005750:	932c      	str	r3, [sp, #176]	@ 0xb0
 8005752:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005754:	3301      	adds	r3, #1
 8005756:	2b07      	cmp	r3, #7
 8005758:	932b      	str	r3, [sp, #172]	@ 0xac
 800575a:	dc32      	bgt.n	80057c2 <_svfprintf_r+0x11fa>
 800575c:	3508      	adds	r5, #8
 800575e:	9b08      	ldr	r3, [sp, #32]
 8005760:	2200      	movs	r2, #0
 8005762:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005766:	e9dd 762b 	ldrd	r7, r6, [sp, #172]	@ 0xac
 800576a:	1e5c      	subs	r4, r3, #1
 800576c:	2300      	movs	r3, #0
 800576e:	f7fb f91b 	bl	80009a8 <__aeabi_dcmpeq>
 8005772:	2800      	cmp	r0, #0
 8005774:	d12e      	bne.n	80057d4 <_svfprintf_r+0x120c>
 8005776:	f109 0301 	add.w	r3, r9, #1
 800577a:	e9c5 3400 	strd	r3, r4, [r5]
 800577e:	9b08      	ldr	r3, [sp, #32]
 8005780:	3701      	adds	r7, #1
 8005782:	3e01      	subs	r6, #1
 8005784:	441e      	add	r6, r3
 8005786:	2f07      	cmp	r7, #7
 8005788:	e9cd 762b 	strd	r7, r6, [sp, #172]	@ 0xac
 800578c:	dd51      	ble.n	8005832 <_svfprintf_r+0x126a>
 800578e:	4641      	mov	r1, r8
 8005790:	9807      	ldr	r0, [sp, #28]
 8005792:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005794:	f001 fc02 	bl	8006f9c <__ssprint_r>
 8005798:	2800      	cmp	r0, #0
 800579a:	d16d      	bne.n	8005878 <_svfprintf_r+0x12b0>
 800579c:	ad2d      	add	r5, sp, #180	@ 0xb4
 800579e:	ab26      	add	r3, sp, #152	@ 0x98
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80057a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80057a6:	606b      	str	r3, [r5, #4]
 80057a8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80057aa:	4413      	add	r3, r2
 80057ac:	932c      	str	r3, [sp, #176]	@ 0xb0
 80057ae:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80057b0:	3301      	adds	r3, #1
 80057b2:	2b07      	cmp	r3, #7
 80057b4:	932b      	str	r3, [sp, #172]	@ 0xac
 80057b6:	f73f adb3 	bgt.w	8005320 <_svfprintf_r+0xd58>
 80057ba:	f105 0408 	add.w	r4, r5, #8
 80057be:	f7ff bafc 	b.w	8004dba <_svfprintf_r+0x7f2>
 80057c2:	4641      	mov	r1, r8
 80057c4:	9807      	ldr	r0, [sp, #28]
 80057c6:	aa2a      	add	r2, sp, #168	@ 0xa8
 80057c8:	f001 fbe8 	bl	8006f9c <__ssprint_r>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d153      	bne.n	8005878 <_svfprintf_r+0x12b0>
 80057d0:	ad2d      	add	r5, sp, #180	@ 0xb4
 80057d2:	e7c4      	b.n	800575e <_svfprintf_r+0x1196>
 80057d4:	9b08      	ldr	r3, [sp, #32]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	dde1      	ble.n	800579e <_svfprintf_r+0x11d6>
 80057da:	2710      	movs	r7, #16
 80057dc:	4e56      	ldr	r6, [pc, #344]	@ (8005938 <_svfprintf_r+0x1370>)
 80057de:	2c10      	cmp	r4, #16
 80057e0:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	@ 0xac
 80057e4:	f105 0108 	add.w	r1, r5, #8
 80057e8:	f103 0301 	add.w	r3, r3, #1
 80057ec:	602e      	str	r6, [r5, #0]
 80057ee:	dc07      	bgt.n	8005800 <_svfprintf_r+0x1238>
 80057f0:	606c      	str	r4, [r5, #4]
 80057f2:	2b07      	cmp	r3, #7
 80057f4:	4414      	add	r4, r2
 80057f6:	e9cd 342b 	strd	r3, r4, [sp, #172]	@ 0xac
 80057fa:	dcc8      	bgt.n	800578e <_svfprintf_r+0x11c6>
 80057fc:	460d      	mov	r5, r1
 80057fe:	e7ce      	b.n	800579e <_svfprintf_r+0x11d6>
 8005800:	3210      	adds	r2, #16
 8005802:	2b07      	cmp	r3, #7
 8005804:	e9cd 322b 	strd	r3, r2, [sp, #172]	@ 0xac
 8005808:	606f      	str	r7, [r5, #4]
 800580a:	dd06      	ble.n	800581a <_svfprintf_r+0x1252>
 800580c:	4641      	mov	r1, r8
 800580e:	9807      	ldr	r0, [sp, #28]
 8005810:	aa2a      	add	r2, sp, #168	@ 0xa8
 8005812:	f001 fbc3 	bl	8006f9c <__ssprint_r>
 8005816:	bb78      	cbnz	r0, 8005878 <_svfprintf_r+0x12b0>
 8005818:	a92d      	add	r1, sp, #180	@ 0xb4
 800581a:	460d      	mov	r5, r1
 800581c:	3c10      	subs	r4, #16
 800581e:	e7de      	b.n	80057de <_svfprintf_r+0x1216>
 8005820:	2101      	movs	r1, #1
 8005822:	2a07      	cmp	r2, #7
 8005824:	e9cd 232b 	strd	r2, r3, [sp, #172]	@ 0xac
 8005828:	f8c4 9000 	str.w	r9, [r4]
 800582c:	6061      	str	r1, [r4, #4]
 800582e:	ddb6      	ble.n	800579e <_svfprintf_r+0x11d6>
 8005830:	e7ad      	b.n	800578e <_svfprintf_r+0x11c6>
 8005832:	3508      	adds	r5, #8
 8005834:	e7b3      	b.n	800579e <_svfprintf_r+0x11d6>
 8005836:	460c      	mov	r4, r1
 8005838:	f7ff babf 	b.w	8004dba <_svfprintf_r+0x7f2>
 800583c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800583e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005840:	1a9d      	subs	r5, r3, r2
 8005842:	2d00      	cmp	r5, #0
 8005844:	f77f aabd 	ble.w	8004dc2 <_svfprintf_r+0x7fa>
 8005848:	2710      	movs	r7, #16
 800584a:	4e3c      	ldr	r6, [pc, #240]	@ (800593c <_svfprintf_r+0x1374>)
 800584c:	2d10      	cmp	r5, #16
 800584e:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	@ 0xac
 8005852:	6026      	str	r6, [r4, #0]
 8005854:	f103 0301 	add.w	r3, r3, #1
 8005858:	dc18      	bgt.n	800588c <_svfprintf_r+0x12c4>
 800585a:	442a      	add	r2, r5
 800585c:	2b07      	cmp	r3, #7
 800585e:	e9cd 322b 	strd	r3, r2, [sp, #172]	@ 0xac
 8005862:	6065      	str	r5, [r4, #4]
 8005864:	f77f aaad 	ble.w	8004dc2 <_svfprintf_r+0x7fa>
 8005868:	4641      	mov	r1, r8
 800586a:	9807      	ldr	r0, [sp, #28]
 800586c:	aa2a      	add	r2, sp, #168	@ 0xa8
 800586e:	f001 fb95 	bl	8006f9c <__ssprint_r>
 8005872:	2800      	cmp	r0, #0
 8005874:	f43f aaa5 	beq.w	8004dc2 <_svfprintf_r+0x7fa>
 8005878:	f1ba 0f00 	cmp.w	sl, #0
 800587c:	f43f a8b5 	beq.w	80049ea <_svfprintf_r+0x422>
 8005880:	4651      	mov	r1, sl
 8005882:	9807      	ldr	r0, [sp, #28]
 8005884:	f7fe fb9a 	bl	8003fbc <_free_r>
 8005888:	f7ff b8af 	b.w	80049ea <_svfprintf_r+0x422>
 800588c:	3210      	adds	r2, #16
 800588e:	2b07      	cmp	r3, #7
 8005890:	e9cd 322b 	strd	r3, r2, [sp, #172]	@ 0xac
 8005894:	6067      	str	r7, [r4, #4]
 8005896:	dc02      	bgt.n	800589e <_svfprintf_r+0x12d6>
 8005898:	3408      	adds	r4, #8
 800589a:	3d10      	subs	r5, #16
 800589c:	e7d6      	b.n	800584c <_svfprintf_r+0x1284>
 800589e:	4641      	mov	r1, r8
 80058a0:	9807      	ldr	r0, [sp, #28]
 80058a2:	aa2a      	add	r2, sp, #168	@ 0xa8
 80058a4:	f001 fb7a 	bl	8006f9c <__ssprint_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d1e5      	bne.n	8005878 <_svfprintf_r+0x12b0>
 80058ac:	ac2d      	add	r4, sp, #180	@ 0xb4
 80058ae:	e7f4      	b.n	800589a <_svfprintf_r+0x12d2>
 80058b0:	4651      	mov	r1, sl
 80058b2:	9807      	ldr	r0, [sp, #28]
 80058b4:	f7fe fb82 	bl	8003fbc <_free_r>
 80058b8:	f7ff ba9b 	b.w	8004df2 <_svfprintf_r+0x82a>
 80058bc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f43f a893 	beq.w	80049ea <_svfprintf_r+0x422>
 80058c4:	4641      	mov	r1, r8
 80058c6:	9807      	ldr	r0, [sp, #28]
 80058c8:	aa2a      	add	r2, sp, #168	@ 0xa8
 80058ca:	f001 fb67 	bl	8006f9c <__ssprint_r>
 80058ce:	f7ff b88c 	b.w	80049ea <_svfprintf_r+0x422>
 80058d2:	ea56 0207 	orrs.w	r2, r6, r7
 80058d6:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80058da:	f43f ab8d 	beq.w	8004ff8 <_svfprintf_r+0xa30>
 80058de:	2b01      	cmp	r3, #1
 80058e0:	f43f ac0c 	beq.w	80050fc <_svfprintf_r+0xb34>
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	f50d 79ac 	add.w	r9, sp, #344	@ 0x158
 80058ea:	f43f ac53 	beq.w	8005194 <_svfprintf_r+0xbcc>
 80058ee:	f006 0307 	and.w	r3, r6, #7
 80058f2:	08f6      	lsrs	r6, r6, #3
 80058f4:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80058f8:	08ff      	lsrs	r7, r7, #3
 80058fa:	3330      	adds	r3, #48	@ 0x30
 80058fc:	ea56 0107 	orrs.w	r1, r6, r7
 8005900:	464a      	mov	r2, r9
 8005902:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005906:	d1f2      	bne.n	80058ee <_svfprintf_r+0x1326>
 8005908:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800590a:	07c9      	lsls	r1, r1, #31
 800590c:	d506      	bpl.n	800591c <_svfprintf_r+0x1354>
 800590e:	2b30      	cmp	r3, #48	@ 0x30
 8005910:	d004      	beq.n	800591c <_svfprintf_r+0x1354>
 8005912:	2330      	movs	r3, #48	@ 0x30
 8005914:	f809 3c01 	strb.w	r3, [r9, #-1]
 8005918:	f1a2 0902 	sub.w	r9, r2, #2
 800591c:	f04f 0a00 	mov.w	sl, #0
 8005920:	ab56      	add	r3, sp, #344	@ 0x158
 8005922:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8005926:	9514      	str	r5, [sp, #80]	@ 0x50
 8005928:	eba3 0509 	sub.w	r5, r3, r9
 800592c:	4657      	mov	r7, sl
 800592e:	4656      	mov	r6, sl
 8005930:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8005934:	f7ff b990 	b.w	8004c58 <_svfprintf_r+0x690>
 8005938:	0800949a 	.word	0x0800949a
 800593c:	080094aa 	.word	0x080094aa

08005940 <_fclose_r>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4605      	mov	r5, r0
 8005944:	460c      	mov	r4, r1
 8005946:	b1b1      	cbz	r1, 8005976 <_fclose_r+0x36>
 8005948:	b118      	cbz	r0, 8005952 <_fclose_r+0x12>
 800594a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800594c:	b90b      	cbnz	r3, 8005952 <_fclose_r+0x12>
 800594e:	f7fe f9a1 	bl	8003c94 <__sinit>
 8005952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005954:	07de      	lsls	r6, r3, #31
 8005956:	d405      	bmi.n	8005964 <_fclose_r+0x24>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	0598      	lsls	r0, r3, #22
 800595c:	d402      	bmi.n	8005964 <_fclose_r+0x24>
 800595e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005960:	f7fe fac4 	bl	8003eec <__retarget_lock_acquire_recursive>
 8005964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005968:	b943      	cbnz	r3, 800597c <_fclose_r+0x3c>
 800596a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800596c:	07d9      	lsls	r1, r3, #31
 800596e:	d402      	bmi.n	8005976 <_fclose_r+0x36>
 8005970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005972:	f7fe fabc 	bl	8003eee <__retarget_lock_release_recursive>
 8005976:	2600      	movs	r6, #0
 8005978:	4630      	mov	r0, r6
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	4621      	mov	r1, r4
 800597e:	4628      	mov	r0, r5
 8005980:	f000 f834 	bl	80059ec <__sflush_r>
 8005984:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005986:	4606      	mov	r6, r0
 8005988:	b133      	cbz	r3, 8005998 <_fclose_r+0x58>
 800598a:	4628      	mov	r0, r5
 800598c:	69e1      	ldr	r1, [r4, #28]
 800598e:	4798      	blx	r3
 8005990:	2800      	cmp	r0, #0
 8005992:	bfb8      	it	lt
 8005994:	f04f 36ff 	movlt.w	r6, #4294967295
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	061a      	lsls	r2, r3, #24
 800599c:	d503      	bpl.n	80059a6 <_fclose_r+0x66>
 800599e:	4628      	mov	r0, r5
 80059a0:	6921      	ldr	r1, [r4, #16]
 80059a2:	f7fe fb0b 	bl	8003fbc <_free_r>
 80059a6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059a8:	b141      	cbz	r1, 80059bc <_fclose_r+0x7c>
 80059aa:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80059ae:	4299      	cmp	r1, r3
 80059b0:	d002      	beq.n	80059b8 <_fclose_r+0x78>
 80059b2:	4628      	mov	r0, r5
 80059b4:	f7fe fb02 	bl	8003fbc <_free_r>
 80059b8:	2300      	movs	r3, #0
 80059ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80059bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80059be:	b121      	cbz	r1, 80059ca <_fclose_r+0x8a>
 80059c0:	4628      	mov	r0, r5
 80059c2:	f7fe fafb 	bl	8003fbc <_free_r>
 80059c6:	2300      	movs	r3, #0
 80059c8:	6463      	str	r3, [r4, #68]	@ 0x44
 80059ca:	f7fe f957 	bl	8003c7c <__sfp_lock_acquire>
 80059ce:	2300      	movs	r3, #0
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059d4:	07db      	lsls	r3, r3, #31
 80059d6:	d402      	bmi.n	80059de <_fclose_r+0x9e>
 80059d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059da:	f7fe fa88 	bl	8003eee <__retarget_lock_release_recursive>
 80059de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059e0:	f7fe fa83 	bl	8003eea <__retarget_lock_close_recursive>
 80059e4:	f7fe f950 	bl	8003c88 <__sfp_lock_release>
 80059e8:	e7c6      	b.n	8005978 <_fclose_r+0x38>
	...

080059ec <__sflush_r>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	4605      	mov	r5, r0
 80059f0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80059f4:	460c      	mov	r4, r1
 80059f6:	0706      	lsls	r6, r0, #28
 80059f8:	d457      	bmi.n	8005aaa <__sflush_r+0xbe>
 80059fa:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 80059fe:	818b      	strh	r3, [r1, #12]
 8005a00:	684b      	ldr	r3, [r1, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dc02      	bgt.n	8005a0c <__sflush_r+0x20>
 8005a06:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dd4c      	ble.n	8005aa6 <__sflush_r+0xba>
 8005a0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	d049      	beq.n	8005aa6 <__sflush_r+0xba>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8005a18:	682f      	ldr	r7, [r5, #0]
 8005a1a:	69e1      	ldr	r1, [r4, #28]
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	d034      	beq.n	8005a8a <__sflush_r+0x9e>
 8005a20:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	0759      	lsls	r1, r3, #29
 8005a26:	d505      	bpl.n	8005a34 <__sflush_r+0x48>
 8005a28:	6863      	ldr	r3, [r4, #4]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005a2e:	b10b      	cbz	r3, 8005a34 <__sflush_r+0x48>
 8005a30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	4628      	mov	r0, r5
 8005a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a3a:	69e1      	ldr	r1, [r4, #28]
 8005a3c:	47b0      	blx	r6
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d106      	bne.n	8005a50 <__sflush_r+0x64>
 8005a42:	682a      	ldr	r2, [r5, #0]
 8005a44:	2a1d      	cmp	r2, #29
 8005a46:	d847      	bhi.n	8005ad8 <__sflush_r+0xec>
 8005a48:	4b29      	ldr	r3, [pc, #164]	@ (8005af0 <__sflush_r+0x104>)
 8005a4a:	4113      	asrs	r3, r2
 8005a4c:	07de      	lsls	r6, r3, #31
 8005a4e:	d443      	bmi.n	8005ad8 <__sflush_r+0xec>
 8005a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a58:	81a2      	strh	r2, [r4, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	6062      	str	r2, [r4, #4]
 8005a5e:	6922      	ldr	r2, [r4, #16]
 8005a60:	04d9      	lsls	r1, r3, #19
 8005a62:	6022      	str	r2, [r4, #0]
 8005a64:	d504      	bpl.n	8005a70 <__sflush_r+0x84>
 8005a66:	1c42      	adds	r2, r0, #1
 8005a68:	d101      	bne.n	8005a6e <__sflush_r+0x82>
 8005a6a:	682b      	ldr	r3, [r5, #0]
 8005a6c:	b903      	cbnz	r3, 8005a70 <__sflush_r+0x84>
 8005a6e:	6520      	str	r0, [r4, #80]	@ 0x50
 8005a70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a72:	602f      	str	r7, [r5, #0]
 8005a74:	b1b9      	cbz	r1, 8005aa6 <__sflush_r+0xba>
 8005a76:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	d002      	beq.n	8005a84 <__sflush_r+0x98>
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f7fe fa9c 	bl	8003fbc <_free_r>
 8005a84:	2300      	movs	r3, #0
 8005a86:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a88:	e00d      	b.n	8005aa6 <__sflush_r+0xba>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b0      	blx	r6
 8005a90:	4602      	mov	r2, r0
 8005a92:	1c50      	adds	r0, r2, #1
 8005a94:	d1c5      	bne.n	8005a22 <__sflush_r+0x36>
 8005a96:	682b      	ldr	r3, [r5, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0c2      	beq.n	8005a22 <__sflush_r+0x36>
 8005a9c:	2b1d      	cmp	r3, #29
 8005a9e:	d001      	beq.n	8005aa4 <__sflush_r+0xb8>
 8005aa0:	2b16      	cmp	r3, #22
 8005aa2:	d119      	bne.n	8005ad8 <__sflush_r+0xec>
 8005aa4:	602f      	str	r7, [r5, #0]
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e01d      	b.n	8005ae6 <__sflush_r+0xfa>
 8005aaa:	690f      	ldr	r7, [r1, #16]
 8005aac:	2f00      	cmp	r7, #0
 8005aae:	d0fa      	beq.n	8005aa6 <__sflush_r+0xba>
 8005ab0:	0783      	lsls	r3, r0, #30
 8005ab2:	bf18      	it	ne
 8005ab4:	2300      	movne	r3, #0
 8005ab6:	680e      	ldr	r6, [r1, #0]
 8005ab8:	bf08      	it	eq
 8005aba:	694b      	ldreq	r3, [r1, #20]
 8005abc:	1bf6      	subs	r6, r6, r7
 8005abe:	600f      	str	r7, [r1, #0]
 8005ac0:	608b      	str	r3, [r1, #8]
 8005ac2:	2e00      	cmp	r6, #0
 8005ac4:	ddef      	ble.n	8005aa6 <__sflush_r+0xba>
 8005ac6:	4633      	mov	r3, r6
 8005ac8:	463a      	mov	r2, r7
 8005aca:	4628      	mov	r0, r5
 8005acc:	69e1      	ldr	r1, [r4, #28]
 8005ace:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
 8005ad2:	47e0      	blx	ip
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	dc07      	bgt.n	8005ae8 <__sflush_r+0xfc>
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8005adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae8:	4407      	add	r7, r0
 8005aea:	1a36      	subs	r6, r6, r0
 8005aec:	e7e9      	b.n	8005ac2 <__sflush_r+0xd6>
 8005aee:	bf00      	nop
 8005af0:	dfbffffe 	.word	0xdfbffffe

08005af4 <_fflush_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	460c      	mov	r4, r1
 8005af8:	4605      	mov	r5, r0
 8005afa:	b118      	cbz	r0, 8005b04 <_fflush_r+0x10>
 8005afc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005afe:	b90b      	cbnz	r3, 8005b04 <_fflush_r+0x10>
 8005b00:	f7fe f8c8 	bl	8003c94 <__sinit>
 8005b04:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8005b08:	b1b8      	cbz	r0, 8005b3a <_fflush_r+0x46>
 8005b0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b0c:	07db      	lsls	r3, r3, #31
 8005b0e:	d404      	bmi.n	8005b1a <_fflush_r+0x26>
 8005b10:	0581      	lsls	r1, r0, #22
 8005b12:	d402      	bmi.n	8005b1a <_fflush_r+0x26>
 8005b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b16:	f7fe f9e9 	bl	8003eec <__retarget_lock_acquire_recursive>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f7ff ff65 	bl	80059ec <__sflush_r>
 8005b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b24:	4605      	mov	r5, r0
 8005b26:	07da      	lsls	r2, r3, #31
 8005b28:	d405      	bmi.n	8005b36 <_fflush_r+0x42>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	059b      	lsls	r3, r3, #22
 8005b2e:	d402      	bmi.n	8005b36 <_fflush_r+0x42>
 8005b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b32:	f7fe f9dc 	bl	8003eee <__retarget_lock_release_recursive>
 8005b36:	4628      	mov	r0, r5
 8005b38:	bd38      	pop	{r3, r4, r5, pc}
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	e7fb      	b.n	8005b36 <_fflush_r+0x42>

08005b3e <strncpy>:
 8005b3e:	4603      	mov	r3, r0
 8005b40:	b510      	push	{r4, lr}
 8005b42:	3901      	subs	r1, #1
 8005b44:	b132      	cbz	r2, 8005b54 <strncpy+0x16>
 8005b46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b4a:	3a01      	subs	r2, #1
 8005b4c:	f803 4b01 	strb.w	r4, [r3], #1
 8005b50:	2c00      	cmp	r4, #0
 8005b52:	d1f7      	bne.n	8005b44 <strncpy+0x6>
 8005b54:	2100      	movs	r1, #0
 8005b56:	441a      	add	r2, r3
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d100      	bne.n	8005b5e <strncpy+0x20>
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b62:	e7f9      	b.n	8005b58 <strncpy+0x1a>

08005b64 <_localeconv_r>:
 8005b64:	4800      	ldr	r0, [pc, #0]	@ (8005b68 <_localeconv_r+0x4>)
 8005b66:	4770      	bx	lr
 8005b68:	20000644 	.word	0x20000644

08005b6c <_sbrk_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4d05      	ldr	r5, [pc, #20]	@ (8005b88 <_sbrk_r+0x1c>)
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	f7fc fa28 	bl	8001fcc <_sbrk>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_sbrk_r+0x1a>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_sbrk_r+0x1a>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	20000968 	.word	0x20000968

08005b8c <__libc_fini_array>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d07      	ldr	r5, [pc, #28]	@ (8005bac <__libc_fini_array+0x20>)
 8005b90:	4c07      	ldr	r4, [pc, #28]	@ (8005bb0 <__libc_fini_array+0x24>)
 8005b92:	1b64      	subs	r4, r4, r5
 8005b94:	10a4      	asrs	r4, r4, #2
 8005b96:	b91c      	cbnz	r4, 8005ba0 <__libc_fini_array+0x14>
 8005b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9c:	f003 bc2a 	b.w	80093f4 <_fini>
 8005ba0:	3c01      	subs	r4, #1
 8005ba2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005ba6:	4798      	blx	r3
 8005ba8:	e7f5      	b.n	8005b96 <__libc_fini_array+0xa>
 8005baa:	bf00      	nop
 8005bac:	08009830 	.word	0x08009830
 8005bb0:	08009834 	.word	0x08009834

08005bb4 <sysconf>:
 8005bb4:	2808      	cmp	r0, #8
 8005bb6:	b508      	push	{r3, lr}
 8005bb8:	d006      	beq.n	8005bc8 <sysconf+0x14>
 8005bba:	f7fe f96b 	bl	8003e94 <__errno>
 8005bbe:	2316      	movs	r3, #22
 8005bc0:	6003      	str	r3, [r0, #0]
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	bd08      	pop	{r3, pc}
 8005bc8:	2080      	movs	r0, #128	@ 0x80
 8005bca:	e7fc      	b.n	8005bc6 <sysconf+0x12>

08005bcc <memchr>:
 8005bcc:	4603      	mov	r3, r0
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	b2c9      	uxtb	r1, r1
 8005bd2:	4402      	add	r2, r0
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	d101      	bne.n	8005bde <memchr+0x12>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e003      	b.n	8005be6 <memchr+0x1a>
 8005bde:	7804      	ldrb	r4, [r0, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	428c      	cmp	r4, r1
 8005be4:	d1f6      	bne.n	8005bd4 <memchr+0x8>
 8005be6:	bd10      	pop	{r4, pc}

08005be8 <frexp>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	4617      	mov	r7, r2
 8005bec:	2200      	movs	r2, #0
 8005bee:	603a      	str	r2, [r7, #0]
 8005bf0:	4a14      	ldr	r2, [pc, #80]	@ (8005c44 <frexp+0x5c>)
 8005bf2:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8005bf6:	4296      	cmp	r6, r2
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	d81e      	bhi.n	8005c3e <frexp+0x56>
 8005c00:	4602      	mov	r2, r0
 8005c02:	4332      	orrs	r2, r6
 8005c04:	d01b      	beq.n	8005c3e <frexp+0x56>
 8005c06:	4a10      	ldr	r2, [pc, #64]	@ (8005c48 <frexp+0x60>)
 8005c08:	400a      	ands	r2, r1
 8005c0a:	b952      	cbnz	r2, 8005c22 <frexp+0x3a>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c4c <frexp+0x64>)
 8005c10:	f7fa fc62 	bl	80004d8 <__aeabi_dmul>
 8005c14:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8005c18:	4604      	mov	r4, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8005c20:	603a      	str	r2, [r7, #0]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	1536      	asrs	r6, r6, #20
 8005c26:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005c2a:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8005c2e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005c32:	4432      	add	r2, r6
 8005c34:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8005c38:	603a      	str	r2, [r7, #0]
 8005c3a:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c44:	7fefffff 	.word	0x7fefffff
 8005c48:	7ff00000 	.word	0x7ff00000
 8005c4c:	43500000 	.word	0x43500000

08005c50 <__register_exitproc>:
 8005c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8005cc4 <__register_exitproc+0x74>
 8005c58:	4606      	mov	r6, r0
 8005c5a:	f8da 0000 	ldr.w	r0, [sl]
 8005c5e:	4698      	mov	r8, r3
 8005c60:	460f      	mov	r7, r1
 8005c62:	4691      	mov	r9, r2
 8005c64:	f7fe f942 	bl	8003eec <__retarget_lock_acquire_recursive>
 8005c68:	4b17      	ldr	r3, [pc, #92]	@ (8005cc8 <__register_exitproc+0x78>)
 8005c6a:	681c      	ldr	r4, [r3, #0]
 8005c6c:	b90c      	cbnz	r4, 8005c72 <__register_exitproc+0x22>
 8005c6e:	4c17      	ldr	r4, [pc, #92]	@ (8005ccc <__register_exitproc+0x7c>)
 8005c70:	601c      	str	r4, [r3, #0]
 8005c72:	6865      	ldr	r5, [r4, #4]
 8005c74:	f8da 0000 	ldr.w	r0, [sl]
 8005c78:	2d1f      	cmp	r5, #31
 8005c7a:	dd05      	ble.n	8005c88 <__register_exitproc+0x38>
 8005c7c:	f7fe f937 	bl	8003eee <__retarget_lock_release_recursive>
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c88:	b19e      	cbz	r6, 8005cb2 <__register_exitproc+0x62>
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8005c90:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8005c94:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8005c98:	40aa      	lsls	r2, r5
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8005ca0:	2e02      	cmp	r6, #2
 8005ca2:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8005ca6:	bf02      	ittt	eq
 8005ca8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8005cac:	4313      	orreq	r3, r2
 8005cae:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8005cb2:	1c6b      	adds	r3, r5, #1
 8005cb4:	3502      	adds	r5, #2
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8005cbc:	f7fe f917 	bl	8003eee <__retarget_lock_release_recursive>
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e7df      	b.n	8005c84 <__register_exitproc+0x34>
 8005cc4:	20000140 	.word	0x20000140
 8005cc8:	20000970 	.word	0x20000970
 8005ccc:	200009a8 	.word	0x200009a8

08005cd0 <quorem>:
 8005cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	6903      	ldr	r3, [r0, #16]
 8005cd6:	690c      	ldr	r4, [r1, #16]
 8005cd8:	4607      	mov	r7, r0
 8005cda:	42a3      	cmp	r3, r4
 8005cdc:	db7e      	blt.n	8005ddc <quorem+0x10c>
 8005cde:	3c01      	subs	r4, #1
 8005ce0:	00a3      	lsls	r3, r4, #2
 8005ce2:	f100 0514 	add.w	r5, r0, #20
 8005ce6:	f101 0814 	add.w	r8, r1, #20
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d06:	d32e      	bcc.n	8005d66 <quorem+0x96>
 8005d08:	f04f 0a00 	mov.w	sl, #0
 8005d0c:	46c4      	mov	ip, r8
 8005d0e:	46ae      	mov	lr, r5
 8005d10:	46d3      	mov	fp, sl
 8005d12:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d16:	b298      	uxth	r0, r3
 8005d18:	fb06 a000 	mla	r0, r6, r0, sl
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	0c02      	lsrs	r2, r0, #16
 8005d20:	fb06 2303 	mla	r3, r6, r3, r2
 8005d24:	f8de 2000 	ldr.w	r2, [lr]
 8005d28:	b280      	uxth	r0, r0
 8005d2a:	b292      	uxth	r2, r2
 8005d2c:	1a12      	subs	r2, r2, r0
 8005d2e:	445a      	add	r2, fp
 8005d30:	f8de 0000 	ldr.w	r0, [lr]
 8005d34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d42:	b292      	uxth	r2, r2
 8005d44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d48:	45e1      	cmp	r9, ip
 8005d4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d4e:	f84e 2b04 	str.w	r2, [lr], #4
 8005d52:	d2de      	bcs.n	8005d12 <quorem+0x42>
 8005d54:	9b00      	ldr	r3, [sp, #0]
 8005d56:	58eb      	ldr	r3, [r5, r3]
 8005d58:	b92b      	cbnz	r3, 8005d66 <quorem+0x96>
 8005d5a:	9b01      	ldr	r3, [sp, #4]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	429d      	cmp	r5, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	d32f      	bcc.n	8005dc4 <quorem+0xf4>
 8005d64:	613c      	str	r4, [r7, #16]
 8005d66:	4638      	mov	r0, r7
 8005d68:	f001 f810 	bl	8006d8c <__mcmp>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	db25      	blt.n	8005dbc <quorem+0xec>
 8005d70:	4629      	mov	r1, r5
 8005d72:	2000      	movs	r0, #0
 8005d74:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d78:	f8d1 c000 	ldr.w	ip, [r1]
 8005d7c:	fa1f fe82 	uxth.w	lr, r2
 8005d80:	fa1f f38c 	uxth.w	r3, ip
 8005d84:	eba3 030e 	sub.w	r3, r3, lr
 8005d88:	4403      	add	r3, r0
 8005d8a:	0c12      	lsrs	r2, r2, #16
 8005d8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d9a:	45c1      	cmp	r9, r8
 8005d9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005da0:	f841 3b04 	str.w	r3, [r1], #4
 8005da4:	d2e6      	bcs.n	8005d74 <quorem+0xa4>
 8005da6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dae:	b922      	cbnz	r2, 8005dba <quorem+0xea>
 8005db0:	3b04      	subs	r3, #4
 8005db2:	429d      	cmp	r5, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	d30b      	bcc.n	8005dd0 <quorem+0x100>
 8005db8:	613c      	str	r4, [r7, #16]
 8005dba:	3601      	adds	r6, #1
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	b003      	add	sp, #12
 8005dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	3b04      	subs	r3, #4
 8005dc8:	2a00      	cmp	r2, #0
 8005dca:	d1cb      	bne.n	8005d64 <quorem+0x94>
 8005dcc:	3c01      	subs	r4, #1
 8005dce:	e7c6      	b.n	8005d5e <quorem+0x8e>
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	3b04      	subs	r3, #4
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	d1ef      	bne.n	8005db8 <quorem+0xe8>
 8005dd8:	3c01      	subs	r4, #1
 8005dda:	e7ea      	b.n	8005db2 <quorem+0xe2>
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e7ee      	b.n	8005dbe <quorem+0xee>

08005de0 <_dtoa_r>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	4614      	mov	r4, r2
 8005de6:	461d      	mov	r5, r3
 8005de8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005dea:	b097      	sub	sp, #92	@ 0x5c
 8005dec:	4683      	mov	fp, r0
 8005dee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005df2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005df4:	b149      	cbz	r1, 8005e0a <_dtoa_r+0x2a>
 8005df6:	2301      	movs	r3, #1
 8005df8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005dfa:	4093      	lsls	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
 8005dfe:	604a      	str	r2, [r1, #4]
 8005e00:	f000 fdbf 	bl	8006982 <_Bfree>
 8005e04:	2300      	movs	r3, #0
 8005e06:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8005e0a:	1e2b      	subs	r3, r5, #0
 8005e0c:	bfaf      	iteee	ge
 8005e0e:	2300      	movge	r3, #0
 8005e10:	2201      	movlt	r2, #1
 8005e12:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e16:	9303      	strlt	r3, [sp, #12]
 8005e18:	bfa8      	it	ge
 8005e1a:	6033      	strge	r3, [r6, #0]
 8005e1c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e20:	4b97      	ldr	r3, [pc, #604]	@ (8006080 <_dtoa_r+0x2a0>)
 8005e22:	bfb8      	it	lt
 8005e24:	6032      	strlt	r2, [r6, #0]
 8005e26:	ea33 0308 	bics.w	r3, r3, r8
 8005e2a:	d114      	bne.n	8005e56 <_dtoa_r+0x76>
 8005e2c:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e38:	4323      	orrs	r3, r4
 8005e3a:	f000 854d 	beq.w	80068d8 <_dtoa_r+0xaf8>
 8005e3e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e40:	f8df a240 	ldr.w	sl, [pc, #576]	@ 8006084 <_dtoa_r+0x2a4>
 8005e44:	b11b      	cbz	r3, 8005e4e <_dtoa_r+0x6e>
 8005e46:	f10a 0303 	add.w	r3, sl, #3
 8005e4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4650      	mov	r0, sl
 8005e50:	b017      	add	sp, #92	@ 0x5c
 8005e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e5a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e62:	2200      	movs	r2, #0
 8005e64:	2300      	movs	r3, #0
 8005e66:	f7fa fd9f 	bl	80009a8 <__aeabi_dcmpeq>
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	b150      	cbz	r0, 8005e84 <_dtoa_r+0xa4>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e76:	b113      	cbz	r3, 8005e7e <_dtoa_r+0x9e>
 8005e78:	4b83      	ldr	r3, [pc, #524]	@ (8006088 <_dtoa_r+0x2a8>)
 8005e7a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800608c <_dtoa_r+0x2ac>
 8005e82:	e7e4      	b.n	8005e4e <_dtoa_r+0x6e>
 8005e84:	ab14      	add	r3, sp, #80	@ 0x50
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	ab15      	add	r3, sp, #84	@ 0x54
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	4658      	mov	r0, fp
 8005e8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e92:	f001 f82b 	bl	8006eec <__d2b>
 8005e96:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e9a:	4681      	mov	r9, r0
 8005e9c:	2e00      	cmp	r6, #0
 8005e9e:	d077      	beq.n	8005f90 <_dtoa_r+0x1b0>
 8005ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ea4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ea6:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eae:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005eb2:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005eb6:	9712      	str	r7, [sp, #72]	@ 0x48
 8005eb8:	4619      	mov	r1, r3
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4b74      	ldr	r3, [pc, #464]	@ (8006090 <_dtoa_r+0x2b0>)
 8005ebe:	f7fa f953 	bl	8000168 <__aeabi_dsub>
 8005ec2:	a369      	add	r3, pc, #420	@ (adr r3, 8006068 <_dtoa_r+0x288>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f7fa fb06 	bl	80004d8 <__aeabi_dmul>
 8005ecc:	a368      	add	r3, pc, #416	@ (adr r3, 8006070 <_dtoa_r+0x290>)
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f7fa f94b 	bl	800016c <__adddf3>
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4630      	mov	r0, r6
 8005eda:	460d      	mov	r5, r1
 8005edc:	f7fa fa92 	bl	8000404 <__aeabi_i2d>
 8005ee0:	a365      	add	r3, pc, #404	@ (adr r3, 8006078 <_dtoa_r+0x298>)
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f7fa faf7 	bl	80004d8 <__aeabi_dmul>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa f93b 	bl	800016c <__adddf3>
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	f7fa fd9d 	bl	8000a38 <__aeabi_d2iz>
 8005efe:	2200      	movs	r2, #0
 8005f00:	4607      	mov	r7, r0
 8005f02:	2300      	movs	r3, #0
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa fd58 	bl	80009bc <__aeabi_dcmplt>
 8005f0c:	b140      	cbz	r0, 8005f20 <_dtoa_r+0x140>
 8005f0e:	4638      	mov	r0, r7
 8005f10:	f7fa fa78 	bl	8000404 <__aeabi_i2d>
 8005f14:	4622      	mov	r2, r4
 8005f16:	462b      	mov	r3, r5
 8005f18:	f7fa fd46 	bl	80009a8 <__aeabi_dcmpeq>
 8005f1c:	b900      	cbnz	r0, 8005f20 <_dtoa_r+0x140>
 8005f1e:	3f01      	subs	r7, #1
 8005f20:	2f16      	cmp	r7, #22
 8005f22:	d853      	bhi.n	8005fcc <_dtoa_r+0x1ec>
 8005f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f28:	4b5a      	ldr	r3, [pc, #360]	@ (8006094 <_dtoa_r+0x2b4>)
 8005f2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f7fa fd43 	bl	80009bc <__aeabi_dcmplt>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d04a      	beq.n	8005fd0 <_dtoa_r+0x1f0>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	3f01      	subs	r7, #1
 8005f3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f42:	1b9b      	subs	r3, r3, r6
 8005f44:	1e5a      	subs	r2, r3, #1
 8005f46:	bf46      	itte	mi
 8005f48:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f4c:	2300      	movmi	r3, #0
 8005f4e:	f04f 0800 	movpl.w	r8, #0
 8005f52:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f54:	bf48      	it	mi
 8005f56:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	db3b      	blt.n	8005fd4 <_dtoa_r+0x1f4>
 8005f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5e:	970e      	str	r7, [sp, #56]	@ 0x38
 8005f60:	443b      	add	r3, r7
 8005f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f64:	2300      	movs	r3, #0
 8005f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d867      	bhi.n	800603e <_dtoa_r+0x25e>
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	bfc4      	itt	gt
 8005f72:	3b04      	subgt	r3, #4
 8005f74:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005f76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f78:	bfc8      	it	gt
 8005f7a:	2400      	movgt	r4, #0
 8005f7c:	f1a3 0302 	sub.w	r3, r3, #2
 8005f80:	bfd8      	it	le
 8005f82:	2401      	movle	r4, #1
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d865      	bhi.n	8006054 <_dtoa_r+0x274>
 8005f88:	e8df f003 	tbb	[pc, r3]
 8005f8c:	5736382b 	.word	0x5736382b
 8005f90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f94:	441e      	add	r6, r3
 8005f96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	bfc1      	itttt	gt
 8005f9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005fa2:	fa08 f803 	lslgt.w	r8, r8, r3
 8005fa6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005faa:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005fae:	bfd6      	itet	le
 8005fb0:	f1c3 0320 	rsble	r3, r3, #32
 8005fb4:	ea48 0003 	orrgt.w	r0, r8, r3
 8005fb8:	fa04 f003 	lslle.w	r0, r4, r3
 8005fbc:	f7fa fa12 	bl	80003e4 <__aeabi_ui2d>
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005fc6:	3e01      	subs	r6, #1
 8005fc8:	9212      	str	r2, [sp, #72]	@ 0x48
 8005fca:	e775      	b.n	8005eb8 <_dtoa_r+0xd8>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e7b6      	b.n	8005f3e <_dtoa_r+0x15e>
 8005fd0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005fd2:	e7b5      	b.n	8005f40 <_dtoa_r+0x160>
 8005fd4:	427b      	negs	r3, r7
 8005fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fd8:	2300      	movs	r3, #0
 8005fda:	eba8 0807 	sub.w	r8, r8, r7
 8005fde:	930e      	str	r3, [sp, #56]	@ 0x38
 8005fe0:	e7c2      	b.n	8005f68 <_dtoa_r+0x188>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fe6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dc36      	bgt.n	800605a <_dtoa_r+0x27a>
 8005fec:	2301      	movs	r3, #1
 8005fee:	461a      	mov	r2, r3
 8005ff0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ff4:	9221      	str	r2, [sp, #132]	@ 0x84
 8005ff6:	e00b      	b.n	8006010 <_dtoa_r+0x230>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e7f3      	b.n	8005fe4 <_dtoa_r+0x204>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006000:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	3301      	adds	r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	9307      	str	r3, [sp, #28]
 800600c:	bfb8      	it	lt
 800600e:	2301      	movlt	r3, #1
 8006010:	2100      	movs	r1, #0
 8006012:	2204      	movs	r2, #4
 8006014:	f102 0014 	add.w	r0, r2, #20
 8006018:	4298      	cmp	r0, r3
 800601a:	d922      	bls.n	8006062 <_dtoa_r+0x282>
 800601c:	4658      	mov	r0, fp
 800601e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8006022:	f000 fc89 	bl	8006938 <_Balloc>
 8006026:	4682      	mov	sl, r0
 8006028:	2800      	cmp	r0, #0
 800602a:	d139      	bne.n	80060a0 <_dtoa_r+0x2c0>
 800602c:	4602      	mov	r2, r0
 800602e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006032:	4b19      	ldr	r3, [pc, #100]	@ (8006098 <_dtoa_r+0x2b8>)
 8006034:	4819      	ldr	r0, [pc, #100]	@ (800609c <_dtoa_r+0x2bc>)
 8006036:	f001 f85d 	bl	80070f4 <__assert_func>
 800603a:	2301      	movs	r3, #1
 800603c:	e7df      	b.n	8005ffe <_dtoa_r+0x21e>
 800603e:	2401      	movs	r4, #1
 8006040:	2300      	movs	r3, #0
 8006042:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006044:	9320      	str	r3, [sp, #128]	@ 0x80
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	2200      	movs	r2, #0
 800604c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006050:	2312      	movs	r3, #18
 8006052:	e7cf      	b.n	8005ff4 <_dtoa_r+0x214>
 8006054:	2301      	movs	r3, #1
 8006056:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006058:	e7f5      	b.n	8006046 <_dtoa_r+0x266>
 800605a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800605c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006060:	e7d6      	b.n	8006010 <_dtoa_r+0x230>
 8006062:	3101      	adds	r1, #1
 8006064:	0052      	lsls	r2, r2, #1
 8006066:	e7d5      	b.n	8006014 <_dtoa_r+0x234>
 8006068:	636f4361 	.word	0x636f4361
 800606c:	3fd287a7 	.word	0x3fd287a7
 8006070:	8b60c8b3 	.word	0x8b60c8b3
 8006074:	3fc68a28 	.word	0x3fc68a28
 8006078:	509f79fb 	.word	0x509f79fb
 800607c:	3fd34413 	.word	0x3fd34413
 8006080:	7ff00000 	.word	0x7ff00000
 8006084:	080094c3 	.word	0x080094c3
 8006088:	08009499 	.word	0x08009499
 800608c:	08009498 	.word	0x08009498
 8006090:	3ff80000 	.word	0x3ff80000
 8006094:	080095c0 	.word	0x080095c0
 8006098:	080094c7 	.word	0x080094c7
 800609c:	080094d8 	.word	0x080094d8
 80060a0:	9b07      	ldr	r3, [sp, #28]
 80060a2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 80060a6:	2b0e      	cmp	r3, #14
 80060a8:	f200 80a4 	bhi.w	80061f4 <_dtoa_r+0x414>
 80060ac:	2c00      	cmp	r4, #0
 80060ae:	f000 80a1 	beq.w	80061f4 <_dtoa_r+0x414>
 80060b2:	2f00      	cmp	r7, #0
 80060b4:	dd33      	ble.n	800611e <_dtoa_r+0x33e>
 80060b6:	4b86      	ldr	r3, [pc, #536]	@ (80062d0 <_dtoa_r+0x4f0>)
 80060b8:	f007 020f 	and.w	r2, r7, #15
 80060bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c0:	05f8      	lsls	r0, r7, #23
 80060c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060ca:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060ce:	d516      	bpl.n	80060fe <_dtoa_r+0x31e>
 80060d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060d4:	4b7f      	ldr	r3, [pc, #508]	@ (80062d4 <_dtoa_r+0x4f4>)
 80060d6:	2603      	movs	r6, #3
 80060d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060dc:	f7fa fb26 	bl	800072c <__aeabi_ddiv>
 80060e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e4:	f004 040f 	and.w	r4, r4, #15
 80060e8:	4d7a      	ldr	r5, [pc, #488]	@ (80062d4 <_dtoa_r+0x4f4>)
 80060ea:	b954      	cbnz	r4, 8006102 <_dtoa_r+0x322>
 80060ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f4:	f7fa fb1a 	bl	800072c <__aeabi_ddiv>
 80060f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060fc:	e028      	b.n	8006150 <_dtoa_r+0x370>
 80060fe:	2602      	movs	r6, #2
 8006100:	e7f2      	b.n	80060e8 <_dtoa_r+0x308>
 8006102:	07e1      	lsls	r1, r4, #31
 8006104:	d508      	bpl.n	8006118 <_dtoa_r+0x338>
 8006106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800610a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800610e:	f7fa f9e3 	bl	80004d8 <__aeabi_dmul>
 8006112:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006116:	3601      	adds	r6, #1
 8006118:	1064      	asrs	r4, r4, #1
 800611a:	3508      	adds	r5, #8
 800611c:	e7e5      	b.n	80060ea <_dtoa_r+0x30a>
 800611e:	f000 80d2 	beq.w	80062c6 <_dtoa_r+0x4e6>
 8006122:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006126:	427c      	negs	r4, r7
 8006128:	4b69      	ldr	r3, [pc, #420]	@ (80062d0 <_dtoa_r+0x4f0>)
 800612a:	f004 020f 	and.w	r2, r4, #15
 800612e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa f9cf 	bl	80004d8 <__aeabi_dmul>
 800613a:	2602      	movs	r6, #2
 800613c:	2300      	movs	r3, #0
 800613e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006142:	4d64      	ldr	r5, [pc, #400]	@ (80062d4 <_dtoa_r+0x4f4>)
 8006144:	1124      	asrs	r4, r4, #4
 8006146:	2c00      	cmp	r4, #0
 8006148:	f040 80b2 	bne.w	80062b0 <_dtoa_r+0x4d0>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1d3      	bne.n	80060f8 <_dtoa_r+0x318>
 8006150:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80b7 	beq.w	80062ca <_dtoa_r+0x4ea>
 800615c:	2200      	movs	r2, #0
 800615e:	4620      	mov	r0, r4
 8006160:	4629      	mov	r1, r5
 8006162:	4b5d      	ldr	r3, [pc, #372]	@ (80062d8 <_dtoa_r+0x4f8>)
 8006164:	f7fa fc2a 	bl	80009bc <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f000 80ae 	beq.w	80062ca <_dtoa_r+0x4ea>
 800616e:	9b07      	ldr	r3, [sp, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80aa 	beq.w	80062ca <_dtoa_r+0x4ea>
 8006176:	9b08      	ldr	r3, [sp, #32]
 8006178:	2b00      	cmp	r3, #0
 800617a:	dd37      	ble.n	80061ec <_dtoa_r+0x40c>
 800617c:	1e7b      	subs	r3, r7, #1
 800617e:	4620      	mov	r0, r4
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	2200      	movs	r2, #0
 8006184:	4629      	mov	r1, r5
 8006186:	4b55      	ldr	r3, [pc, #340]	@ (80062dc <_dtoa_r+0x4fc>)
 8006188:	f7fa f9a6 	bl	80004d8 <__aeabi_dmul>
 800618c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006190:	9c08      	ldr	r4, [sp, #32]
 8006192:	3601      	adds	r6, #1
 8006194:	4630      	mov	r0, r6
 8006196:	f7fa f935 	bl	8000404 <__aeabi_i2d>
 800619a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800619e:	f7fa f99b 	bl	80004d8 <__aeabi_dmul>
 80061a2:	2200      	movs	r2, #0
 80061a4:	4b4e      	ldr	r3, [pc, #312]	@ (80062e0 <_dtoa_r+0x500>)
 80061a6:	f7f9 ffe1 	bl	800016c <__adddf3>
 80061aa:	4605      	mov	r5, r0
 80061ac:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061b0:	2c00      	cmp	r4, #0
 80061b2:	f040 8099 	bne.w	80062e8 <_dtoa_r+0x508>
 80061b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	4b49      	ldr	r3, [pc, #292]	@ (80062e4 <_dtoa_r+0x504>)
 80061be:	f7f9 ffd3 	bl	8000168 <__aeabi_dsub>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061ca:	462a      	mov	r2, r5
 80061cc:	4633      	mov	r3, r6
 80061ce:	f7fa fc13 	bl	80009f8 <__aeabi_dcmpgt>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	f040 828d 	bne.w	80066f2 <_dtoa_r+0x912>
 80061d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061dc:	462a      	mov	r2, r5
 80061de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80061e2:	f7fa fbeb 	bl	80009bc <__aeabi_dcmplt>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f040 8126 	bne.w	8006438 <_dtoa_r+0x658>
 80061ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061f0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80061f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f2c0 8162 	blt.w	80064c0 <_dtoa_r+0x6e0>
 80061fc:	2f0e      	cmp	r7, #14
 80061fe:	f300 815f 	bgt.w	80064c0 <_dtoa_r+0x6e0>
 8006202:	4b33      	ldr	r3, [pc, #204]	@ (80062d0 <_dtoa_r+0x4f0>)
 8006204:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006208:	e9d3 3400 	ldrd	r3, r4, [r3]
 800620c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006210:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006212:	2b00      	cmp	r3, #0
 8006214:	da03      	bge.n	800621e <_dtoa_r+0x43e>
 8006216:	9b07      	ldr	r3, [sp, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f340 80ff 	ble.w	800641c <_dtoa_r+0x63c>
 800621e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006222:	4656      	mov	r6, sl
 8006224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f7fa fa7e 	bl	800072c <__aeabi_ddiv>
 8006230:	f7fa fc02 	bl	8000a38 <__aeabi_d2iz>
 8006234:	4680      	mov	r8, r0
 8006236:	f7fa f8e5 	bl	8000404 <__aeabi_i2d>
 800623a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800623e:	f7fa f94b 	bl	80004d8 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7f9 ff8d 	bl	8000168 <__aeabi_dsub>
 800624e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006252:	9d07      	ldr	r5, [sp, #28]
 8006254:	f806 4b01 	strb.w	r4, [r6], #1
 8006258:	eba6 040a 	sub.w	r4, r6, sl
 800625c:	42a5      	cmp	r5, r4
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	f040 8115 	bne.w	8006490 <_dtoa_r+0x6b0>
 8006266:	f7f9 ff81 	bl	800016c <__adddf3>
 800626a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800626e:	4604      	mov	r4, r0
 8006270:	460d      	mov	r5, r1
 8006272:	f7fa fbc1 	bl	80009f8 <__aeabi_dcmpgt>
 8006276:	2800      	cmp	r0, #0
 8006278:	f040 80f7 	bne.w	800646a <_dtoa_r+0x68a>
 800627c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7fa fb90 	bl	80009a8 <__aeabi_dcmpeq>
 8006288:	b118      	cbz	r0, 8006292 <_dtoa_r+0x4b2>
 800628a:	f018 0f01 	tst.w	r8, #1
 800628e:	f040 80ec 	bne.w	800646a <_dtoa_r+0x68a>
 8006292:	4649      	mov	r1, r9
 8006294:	4658      	mov	r0, fp
 8006296:	f000 fb74 	bl	8006982 <_Bfree>
 800629a:	2300      	movs	r3, #0
 800629c:	7033      	strb	r3, [r6, #0]
 800629e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80062a0:	3701      	adds	r7, #1
 80062a2:	601f      	str	r7, [r3, #0]
 80062a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f43f add1 	beq.w	8005e4e <_dtoa_r+0x6e>
 80062ac:	601e      	str	r6, [r3, #0]
 80062ae:	e5ce      	b.n	8005e4e <_dtoa_r+0x6e>
 80062b0:	07e2      	lsls	r2, r4, #31
 80062b2:	d505      	bpl.n	80062c0 <_dtoa_r+0x4e0>
 80062b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062b8:	f7fa f90e 	bl	80004d8 <__aeabi_dmul>
 80062bc:	2301      	movs	r3, #1
 80062be:	3601      	adds	r6, #1
 80062c0:	1064      	asrs	r4, r4, #1
 80062c2:	3508      	adds	r5, #8
 80062c4:	e73f      	b.n	8006146 <_dtoa_r+0x366>
 80062c6:	2602      	movs	r6, #2
 80062c8:	e742      	b.n	8006150 <_dtoa_r+0x370>
 80062ca:	9c07      	ldr	r4, [sp, #28]
 80062cc:	9704      	str	r7, [sp, #16]
 80062ce:	e761      	b.n	8006194 <_dtoa_r+0x3b4>
 80062d0:	080095c0 	.word	0x080095c0
 80062d4:	08009598 	.word	0x08009598
 80062d8:	3ff00000 	.word	0x3ff00000
 80062dc:	40240000 	.word	0x40240000
 80062e0:	401c0000 	.word	0x401c0000
 80062e4:	40140000 	.word	0x40140000
 80062e8:	4b70      	ldr	r3, [pc, #448]	@ (80064ac <_dtoa_r+0x6cc>)
 80062ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062f4:	4454      	add	r4, sl
 80062f6:	2900      	cmp	r1, #0
 80062f8:	d045      	beq.n	8006386 <_dtoa_r+0x5a6>
 80062fa:	2000      	movs	r0, #0
 80062fc:	496c      	ldr	r1, [pc, #432]	@ (80064b0 <_dtoa_r+0x6d0>)
 80062fe:	f7fa fa15 	bl	800072c <__aeabi_ddiv>
 8006302:	4633      	mov	r3, r6
 8006304:	462a      	mov	r2, r5
 8006306:	f7f9 ff2f 	bl	8000168 <__aeabi_dsub>
 800630a:	4656      	mov	r6, sl
 800630c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006314:	f7fa fb90 	bl	8000a38 <__aeabi_d2iz>
 8006318:	4605      	mov	r5, r0
 800631a:	f7fa f873 	bl	8000404 <__aeabi_i2d>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006326:	f7f9 ff1f 	bl	8000168 <__aeabi_dsub>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	3530      	adds	r5, #48	@ 0x30
 8006330:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006334:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006338:	f806 5b01 	strb.w	r5, [r6], #1
 800633c:	f7fa fb3e 	bl	80009bc <__aeabi_dcmplt>
 8006340:	2800      	cmp	r0, #0
 8006342:	d163      	bne.n	800640c <_dtoa_r+0x62c>
 8006344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006348:	2000      	movs	r0, #0
 800634a:	495a      	ldr	r1, [pc, #360]	@ (80064b4 <_dtoa_r+0x6d4>)
 800634c:	f7f9 ff0c 	bl	8000168 <__aeabi_dsub>
 8006350:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006354:	f7fa fb32 	bl	80009bc <__aeabi_dcmplt>
 8006358:	2800      	cmp	r0, #0
 800635a:	f040 8087 	bne.w	800646c <_dtoa_r+0x68c>
 800635e:	42a6      	cmp	r6, r4
 8006360:	f43f af44 	beq.w	80061ec <_dtoa_r+0x40c>
 8006364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006368:	2200      	movs	r2, #0
 800636a:	4b53      	ldr	r3, [pc, #332]	@ (80064b8 <_dtoa_r+0x6d8>)
 800636c:	f7fa f8b4 	bl	80004d8 <__aeabi_dmul>
 8006370:	2200      	movs	r2, #0
 8006372:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800637a:	4b4f      	ldr	r3, [pc, #316]	@ (80064b8 <_dtoa_r+0x6d8>)
 800637c:	f7fa f8ac 	bl	80004d8 <__aeabi_dmul>
 8006380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006384:	e7c4      	b.n	8006310 <_dtoa_r+0x530>
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	f7fa f8a5 	bl	80004d8 <__aeabi_dmul>
 800638e:	4656      	mov	r6, sl
 8006390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006394:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800639a:	f7fa fb4d 	bl	8000a38 <__aeabi_d2iz>
 800639e:	4605      	mov	r5, r0
 80063a0:	f7fa f830 	bl	8000404 <__aeabi_i2d>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ac:	f7f9 fedc 	bl	8000168 <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	3530      	adds	r5, #48	@ 0x30
 80063b6:	f806 5b01 	strb.w	r5, [r6], #1
 80063ba:	42a6      	cmp	r6, r4
 80063bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	d124      	bne.n	8006410 <_dtoa_r+0x630>
 80063c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063ca:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <_dtoa_r+0x6d0>)
 80063cc:	f7f9 fece 	bl	800016c <__adddf3>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d8:	f7fa fb0e 	bl	80009f8 <__aeabi_dcmpgt>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d145      	bne.n	800646c <_dtoa_r+0x68c>
 80063e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063e4:	2000      	movs	r0, #0
 80063e6:	4932      	ldr	r1, [pc, #200]	@ (80064b0 <_dtoa_r+0x6d0>)
 80063e8:	f7f9 febe 	bl	8000168 <__aeabi_dsub>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f4:	f7fa fae2 	bl	80009bc <__aeabi_dcmplt>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f43f aef7 	beq.w	80061ec <_dtoa_r+0x40c>
 80063fe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006400:	1e73      	subs	r3, r6, #1
 8006402:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006404:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006408:	2b30      	cmp	r3, #48	@ 0x30
 800640a:	d0f8      	beq.n	80063fe <_dtoa_r+0x61e>
 800640c:	9f04      	ldr	r7, [sp, #16]
 800640e:	e740      	b.n	8006292 <_dtoa_r+0x4b2>
 8006410:	4b29      	ldr	r3, [pc, #164]	@ (80064b8 <_dtoa_r+0x6d8>)
 8006412:	f7fa f861 	bl	80004d8 <__aeabi_dmul>
 8006416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800641a:	e7bc      	b.n	8006396 <_dtoa_r+0x5b6>
 800641c:	d10c      	bne.n	8006438 <_dtoa_r+0x658>
 800641e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006422:	2200      	movs	r2, #0
 8006424:	4b25      	ldr	r3, [pc, #148]	@ (80064bc <_dtoa_r+0x6dc>)
 8006426:	f7fa f857 	bl	80004d8 <__aeabi_dmul>
 800642a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800642e:	f7fa fad9 	bl	80009e4 <__aeabi_dcmpge>
 8006432:	2800      	cmp	r0, #0
 8006434:	f000 815b 	beq.w	80066ee <_dtoa_r+0x90e>
 8006438:	2400      	movs	r4, #0
 800643a:	4625      	mov	r5, r4
 800643c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800643e:	4656      	mov	r6, sl
 8006440:	43db      	mvns	r3, r3
 8006442:	9304      	str	r3, [sp, #16]
 8006444:	2700      	movs	r7, #0
 8006446:	4621      	mov	r1, r4
 8006448:	4658      	mov	r0, fp
 800644a:	f000 fa9a 	bl	8006982 <_Bfree>
 800644e:	2d00      	cmp	r5, #0
 8006450:	d0dc      	beq.n	800640c <_dtoa_r+0x62c>
 8006452:	b12f      	cbz	r7, 8006460 <_dtoa_r+0x680>
 8006454:	42af      	cmp	r7, r5
 8006456:	d003      	beq.n	8006460 <_dtoa_r+0x680>
 8006458:	4639      	mov	r1, r7
 800645a:	4658      	mov	r0, fp
 800645c:	f000 fa91 	bl	8006982 <_Bfree>
 8006460:	4629      	mov	r1, r5
 8006462:	4658      	mov	r0, fp
 8006464:	f000 fa8d 	bl	8006982 <_Bfree>
 8006468:	e7d0      	b.n	800640c <_dtoa_r+0x62c>
 800646a:	9704      	str	r7, [sp, #16]
 800646c:	4633      	mov	r3, r6
 800646e:	461e      	mov	r6, r3
 8006470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006474:	2a39      	cmp	r2, #57	@ 0x39
 8006476:	d107      	bne.n	8006488 <_dtoa_r+0x6a8>
 8006478:	459a      	cmp	sl, r3
 800647a:	d1f8      	bne.n	800646e <_dtoa_r+0x68e>
 800647c:	9a04      	ldr	r2, [sp, #16]
 800647e:	3201      	adds	r2, #1
 8006480:	9204      	str	r2, [sp, #16]
 8006482:	2230      	movs	r2, #48	@ 0x30
 8006484:	f88a 2000 	strb.w	r2, [sl]
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	3201      	adds	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e7bd      	b.n	800640c <_dtoa_r+0x62c>
 8006490:	2200      	movs	r2, #0
 8006492:	4b09      	ldr	r3, [pc, #36]	@ (80064b8 <_dtoa_r+0x6d8>)
 8006494:	f7fa f820 	bl	80004d8 <__aeabi_dmul>
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	4604      	mov	r4, r0
 800649e:	460d      	mov	r5, r1
 80064a0:	f7fa fa82 	bl	80009a8 <__aeabi_dcmpeq>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f43f aebd 	beq.w	8006224 <_dtoa_r+0x444>
 80064aa:	e6f2      	b.n	8006292 <_dtoa_r+0x4b2>
 80064ac:	080095c0 	.word	0x080095c0
 80064b0:	3fe00000 	.word	0x3fe00000
 80064b4:	3ff00000 	.word	0x3ff00000
 80064b8:	40240000 	.word	0x40240000
 80064bc:	40140000 	.word	0x40140000
 80064c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064c2:	2a00      	cmp	r2, #0
 80064c4:	f000 80db 	beq.w	800667e <_dtoa_r+0x89e>
 80064c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80064ca:	2a01      	cmp	r2, #1
 80064cc:	f300 80bf 	bgt.w	800664e <_dtoa_r+0x86e>
 80064d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	f000 80b7 	beq.w	8006646 <_dtoa_r+0x866>
 80064d8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064dc:	4646      	mov	r6, r8
 80064de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064e2:	2101      	movs	r1, #1
 80064e4:	441a      	add	r2, r3
 80064e6:	4658      	mov	r0, fp
 80064e8:	4498      	add	r8, r3
 80064ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80064ec:	f000 fae4 	bl	8006ab8 <__i2b>
 80064f0:	4605      	mov	r5, r0
 80064f2:	b15e      	cbz	r6, 800650c <_dtoa_r+0x72c>
 80064f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dd08      	ble.n	800650c <_dtoa_r+0x72c>
 80064fa:	42b3      	cmp	r3, r6
 80064fc:	bfa8      	it	ge
 80064fe:	4633      	movge	r3, r6
 8006500:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006502:	eba8 0803 	sub.w	r8, r8, r3
 8006506:	1af6      	subs	r6, r6, r3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	9309      	str	r3, [sp, #36]	@ 0x24
 800650c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800650e:	b1f3      	cbz	r3, 800654e <_dtoa_r+0x76e>
 8006510:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80b7 	beq.w	8006686 <_dtoa_r+0x8a6>
 8006518:	b18c      	cbz	r4, 800653e <_dtoa_r+0x75e>
 800651a:	4629      	mov	r1, r5
 800651c:	4622      	mov	r2, r4
 800651e:	4658      	mov	r0, fp
 8006520:	f000 fb88 	bl	8006c34 <__pow5mult>
 8006524:	464a      	mov	r2, r9
 8006526:	4601      	mov	r1, r0
 8006528:	4605      	mov	r5, r0
 800652a:	4658      	mov	r0, fp
 800652c:	f000 fada 	bl	8006ae4 <__multiply>
 8006530:	4649      	mov	r1, r9
 8006532:	9004      	str	r0, [sp, #16]
 8006534:	4658      	mov	r0, fp
 8006536:	f000 fa24 	bl	8006982 <_Bfree>
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	4699      	mov	r9, r3
 800653e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006540:	1b1a      	subs	r2, r3, r4
 8006542:	d004      	beq.n	800654e <_dtoa_r+0x76e>
 8006544:	4649      	mov	r1, r9
 8006546:	4658      	mov	r0, fp
 8006548:	f000 fb74 	bl	8006c34 <__pow5mult>
 800654c:	4681      	mov	r9, r0
 800654e:	2101      	movs	r1, #1
 8006550:	4658      	mov	r0, fp
 8006552:	f000 fab1 	bl	8006ab8 <__i2b>
 8006556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006558:	4604      	mov	r4, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 81c6 	beq.w	80068ec <_dtoa_r+0xb0c>
 8006560:	461a      	mov	r2, r3
 8006562:	4601      	mov	r1, r0
 8006564:	4658      	mov	r0, fp
 8006566:	f000 fb65 	bl	8006c34 <__pow5mult>
 800656a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800656c:	4604      	mov	r4, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	f300 808f 	bgt.w	8006692 <_dtoa_r+0x8b2>
 8006574:	9b02      	ldr	r3, [sp, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f040 8087 	bne.w	800668a <_dtoa_r+0x8aa>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006582:	2b00      	cmp	r3, #0
 8006584:	f040 8083 	bne.w	800668e <_dtoa_r+0x8ae>
 8006588:	9b03      	ldr	r3, [sp, #12]
 800658a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800658e:	0d1b      	lsrs	r3, r3, #20
 8006590:	051b      	lsls	r3, r3, #20
 8006592:	b12b      	cbz	r3, 80065a0 <_dtoa_r+0x7c0>
 8006594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006596:	f108 0801 	add.w	r8, r8, #1
 800659a:	3301      	adds	r3, #1
 800659c:	9309      	str	r3, [sp, #36]	@ 0x24
 800659e:	2301      	movs	r3, #1
 80065a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 81a7 	beq.w	80068f8 <_dtoa_r+0xb18>
 80065aa:	6923      	ldr	r3, [r4, #16]
 80065ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065b0:	6918      	ldr	r0, [r3, #16]
 80065b2:	f000 fa35 	bl	8006a20 <__hi0bits>
 80065b6:	f1c0 0020 	rsb	r0, r0, #32
 80065ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065bc:	4418      	add	r0, r3
 80065be:	f010 001f 	ands.w	r0, r0, #31
 80065c2:	d071      	beq.n	80066a8 <_dtoa_r+0x8c8>
 80065c4:	f1c0 0320 	rsb	r3, r0, #32
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	dd65      	ble.n	8006698 <_dtoa_r+0x8b8>
 80065cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ce:	f1c0 001c 	rsb	r0, r0, #28
 80065d2:	4403      	add	r3, r0
 80065d4:	4480      	add	r8, r0
 80065d6:	4406      	add	r6, r0
 80065d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80065da:	f1b8 0f00 	cmp.w	r8, #0
 80065de:	dd05      	ble.n	80065ec <_dtoa_r+0x80c>
 80065e0:	4649      	mov	r1, r9
 80065e2:	4642      	mov	r2, r8
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fb65 	bl	8006cb4 <__lshift>
 80065ea:	4681      	mov	r9, r0
 80065ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	dd05      	ble.n	80065fe <_dtoa_r+0x81e>
 80065f2:	4621      	mov	r1, r4
 80065f4:	461a      	mov	r2, r3
 80065f6:	4658      	mov	r0, fp
 80065f8:	f000 fb5c 	bl	8006cb4 <__lshift>
 80065fc:	4604      	mov	r4, r0
 80065fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d053      	beq.n	80066ac <_dtoa_r+0x8cc>
 8006604:	4621      	mov	r1, r4
 8006606:	4648      	mov	r0, r9
 8006608:	f000 fbc0 	bl	8006d8c <__mcmp>
 800660c:	2800      	cmp	r0, #0
 800660e:	da4d      	bge.n	80066ac <_dtoa_r+0x8cc>
 8006610:	1e7b      	subs	r3, r7, #1
 8006612:	4649      	mov	r1, r9
 8006614:	9304      	str	r3, [sp, #16]
 8006616:	220a      	movs	r2, #10
 8006618:	2300      	movs	r3, #0
 800661a:	4658      	mov	r0, fp
 800661c:	f000 f9ba 	bl	8006994 <__multadd>
 8006620:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006622:	4681      	mov	r9, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8169 	beq.w	80068fc <_dtoa_r+0xb1c>
 800662a:	2300      	movs	r3, #0
 800662c:	4629      	mov	r1, r5
 800662e:	220a      	movs	r2, #10
 8006630:	4658      	mov	r0, fp
 8006632:	f000 f9af 	bl	8006994 <__multadd>
 8006636:	9b08      	ldr	r3, [sp, #32]
 8006638:	4605      	mov	r5, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	dc61      	bgt.n	8006702 <_dtoa_r+0x922>
 800663e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006640:	2b02      	cmp	r3, #2
 8006642:	dc3b      	bgt.n	80066bc <_dtoa_r+0x8dc>
 8006644:	e05d      	b.n	8006702 <_dtoa_r+0x922>
 8006646:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006648:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800664c:	e746      	b.n	80064dc <_dtoa_r+0x6fc>
 800664e:	9b07      	ldr	r3, [sp, #28]
 8006650:	1e5c      	subs	r4, r3, #1
 8006652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006654:	42a3      	cmp	r3, r4
 8006656:	bfbf      	itttt	lt
 8006658:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800665a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800665c:	1ae3      	sublt	r3, r4, r3
 800665e:	18d2      	addlt	r2, r2, r3
 8006660:	bfa8      	it	ge
 8006662:	1b1c      	subge	r4, r3, r4
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	bfbe      	ittt	lt
 8006668:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800666a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800666c:	2400      	movlt	r4, #0
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfb5      	itete	lt
 8006672:	eba8 0603 	sublt.w	r6, r8, r3
 8006676:	4646      	movge	r6, r8
 8006678:	2300      	movlt	r3, #0
 800667a:	9b07      	ldrge	r3, [sp, #28]
 800667c:	e730      	b.n	80064e0 <_dtoa_r+0x700>
 800667e:	4646      	mov	r6, r8
 8006680:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006682:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006684:	e735      	b.n	80064f2 <_dtoa_r+0x712>
 8006686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006688:	e75c      	b.n	8006544 <_dtoa_r+0x764>
 800668a:	2300      	movs	r3, #0
 800668c:	e788      	b.n	80065a0 <_dtoa_r+0x7c0>
 800668e:	9b02      	ldr	r3, [sp, #8]
 8006690:	e786      	b.n	80065a0 <_dtoa_r+0x7c0>
 8006692:	2300      	movs	r3, #0
 8006694:	930a      	str	r3, [sp, #40]	@ 0x28
 8006696:	e788      	b.n	80065aa <_dtoa_r+0x7ca>
 8006698:	d09f      	beq.n	80065da <_dtoa_r+0x7fa>
 800669a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800669c:	331c      	adds	r3, #28
 800669e:	441a      	add	r2, r3
 80066a0:	4498      	add	r8, r3
 80066a2:	441e      	add	r6, r3
 80066a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80066a6:	e798      	b.n	80065da <_dtoa_r+0x7fa>
 80066a8:	4603      	mov	r3, r0
 80066aa:	e7f6      	b.n	800669a <_dtoa_r+0x8ba>
 80066ac:	9b07      	ldr	r3, [sp, #28]
 80066ae:	9704      	str	r7, [sp, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	dc20      	bgt.n	80066f6 <_dtoa_r+0x916>
 80066b4:	9308      	str	r3, [sp, #32]
 80066b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	dd1e      	ble.n	80066fa <_dtoa_r+0x91a>
 80066bc:	9b08      	ldr	r3, [sp, #32]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f47f aebc 	bne.w	800643c <_dtoa_r+0x65c>
 80066c4:	4621      	mov	r1, r4
 80066c6:	2205      	movs	r2, #5
 80066c8:	4658      	mov	r0, fp
 80066ca:	f000 f963 	bl	8006994 <__multadd>
 80066ce:	4601      	mov	r1, r0
 80066d0:	4604      	mov	r4, r0
 80066d2:	4648      	mov	r0, r9
 80066d4:	f000 fb5a 	bl	8006d8c <__mcmp>
 80066d8:	2800      	cmp	r0, #0
 80066da:	f77f aeaf 	ble.w	800643c <_dtoa_r+0x65c>
 80066de:	2331      	movs	r3, #49	@ 0x31
 80066e0:	4656      	mov	r6, sl
 80066e2:	f806 3b01 	strb.w	r3, [r6], #1
 80066e6:	9b04      	ldr	r3, [sp, #16]
 80066e8:	3301      	adds	r3, #1
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	e6aa      	b.n	8006444 <_dtoa_r+0x664>
 80066ee:	9c07      	ldr	r4, [sp, #28]
 80066f0:	9704      	str	r7, [sp, #16]
 80066f2:	4625      	mov	r5, r4
 80066f4:	e7f3      	b.n	80066de <_dtoa_r+0x8fe>
 80066f6:	9b07      	ldr	r3, [sp, #28]
 80066f8:	9308      	str	r3, [sp, #32]
 80066fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8101 	beq.w	8006904 <_dtoa_r+0xb24>
 8006702:	2e00      	cmp	r6, #0
 8006704:	dd05      	ble.n	8006712 <_dtoa_r+0x932>
 8006706:	4629      	mov	r1, r5
 8006708:	4632      	mov	r2, r6
 800670a:	4658      	mov	r0, fp
 800670c:	f000 fad2 	bl	8006cb4 <__lshift>
 8006710:	4605      	mov	r5, r0
 8006712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	d059      	beq.n	80067cc <_dtoa_r+0x9ec>
 8006718:	4658      	mov	r0, fp
 800671a:	6869      	ldr	r1, [r5, #4]
 800671c:	f000 f90c 	bl	8006938 <_Balloc>
 8006720:	4606      	mov	r6, r0
 8006722:	b920      	cbnz	r0, 800672e <_dtoa_r+0x94e>
 8006724:	4602      	mov	r2, r0
 8006726:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800672a:	4b81      	ldr	r3, [pc, #516]	@ (8006930 <_dtoa_r+0xb50>)
 800672c:	e482      	b.n	8006034 <_dtoa_r+0x254>
 800672e:	692a      	ldr	r2, [r5, #16]
 8006730:	f105 010c 	add.w	r1, r5, #12
 8006734:	3202      	adds	r2, #2
 8006736:	0092      	lsls	r2, r2, #2
 8006738:	300c      	adds	r0, #12
 800673a:	f000 fccd 	bl	80070d8 <memcpy>
 800673e:	2201      	movs	r2, #1
 8006740:	4631      	mov	r1, r6
 8006742:	4658      	mov	r0, fp
 8006744:	f000 fab6 	bl	8006cb4 <__lshift>
 8006748:	462f      	mov	r7, r5
 800674a:	4605      	mov	r5, r0
 800674c:	f10a 0301 	add.w	r3, sl, #1
 8006750:	9307      	str	r3, [sp, #28]
 8006752:	9b08      	ldr	r3, [sp, #32]
 8006754:	4453      	add	r3, sl
 8006756:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006758:	9b02      	ldr	r3, [sp, #8]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006760:	9b07      	ldr	r3, [sp, #28]
 8006762:	4621      	mov	r1, r4
 8006764:	3b01      	subs	r3, #1
 8006766:	4648      	mov	r0, r9
 8006768:	9302      	str	r3, [sp, #8]
 800676a:	f7ff fab1 	bl	8005cd0 <quorem>
 800676e:	4639      	mov	r1, r7
 8006770:	9008      	str	r0, [sp, #32]
 8006772:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006776:	4648      	mov	r0, r9
 8006778:	f000 fb08 	bl	8006d8c <__mcmp>
 800677c:	462a      	mov	r2, r5
 800677e:	9009      	str	r0, [sp, #36]	@ 0x24
 8006780:	4621      	mov	r1, r4
 8006782:	4658      	mov	r0, fp
 8006784:	f000 fb1e 	bl	8006dc4 <__mdiff>
 8006788:	68c2      	ldr	r2, [r0, #12]
 800678a:	4606      	mov	r6, r0
 800678c:	bb02      	cbnz	r2, 80067d0 <_dtoa_r+0x9f0>
 800678e:	4601      	mov	r1, r0
 8006790:	4648      	mov	r0, r9
 8006792:	f000 fafb 	bl	8006d8c <__mcmp>
 8006796:	4602      	mov	r2, r0
 8006798:	4631      	mov	r1, r6
 800679a:	4658      	mov	r0, fp
 800679c:	920c      	str	r2, [sp, #48]	@ 0x30
 800679e:	f000 f8f0 	bl	8006982 <_Bfree>
 80067a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80067a6:	9e07      	ldr	r6, [sp, #28]
 80067a8:	ea43 0102 	orr.w	r1, r3, r2
 80067ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ae:	4319      	orrs	r1, r3
 80067b0:	d110      	bne.n	80067d4 <_dtoa_r+0x9f4>
 80067b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067b6:	d029      	beq.n	800680c <_dtoa_r+0xa2c>
 80067b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	dd02      	ble.n	80067c4 <_dtoa_r+0x9e4>
 80067be:	9b08      	ldr	r3, [sp, #32]
 80067c0:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067c4:	9b02      	ldr	r3, [sp, #8]
 80067c6:	f883 8000 	strb.w	r8, [r3]
 80067ca:	e63c      	b.n	8006446 <_dtoa_r+0x666>
 80067cc:	4628      	mov	r0, r5
 80067ce:	e7bb      	b.n	8006748 <_dtoa_r+0x968>
 80067d0:	2201      	movs	r2, #1
 80067d2:	e7e1      	b.n	8006798 <_dtoa_r+0x9b8>
 80067d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	db04      	blt.n	80067e4 <_dtoa_r+0xa04>
 80067da:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80067dc:	430b      	orrs	r3, r1
 80067de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067e0:	430b      	orrs	r3, r1
 80067e2:	d120      	bne.n	8006826 <_dtoa_r+0xa46>
 80067e4:	2a00      	cmp	r2, #0
 80067e6:	dded      	ble.n	80067c4 <_dtoa_r+0x9e4>
 80067e8:	4649      	mov	r1, r9
 80067ea:	2201      	movs	r2, #1
 80067ec:	4658      	mov	r0, fp
 80067ee:	f000 fa61 	bl	8006cb4 <__lshift>
 80067f2:	4621      	mov	r1, r4
 80067f4:	4681      	mov	r9, r0
 80067f6:	f000 fac9 	bl	8006d8c <__mcmp>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	dc03      	bgt.n	8006806 <_dtoa_r+0xa26>
 80067fe:	d1e1      	bne.n	80067c4 <_dtoa_r+0x9e4>
 8006800:	f018 0f01 	tst.w	r8, #1
 8006804:	d0de      	beq.n	80067c4 <_dtoa_r+0x9e4>
 8006806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800680a:	d1d8      	bne.n	80067be <_dtoa_r+0x9de>
 800680c:	2339      	movs	r3, #57	@ 0x39
 800680e:	9a02      	ldr	r2, [sp, #8]
 8006810:	7013      	strb	r3, [r2, #0]
 8006812:	4633      	mov	r3, r6
 8006814:	461e      	mov	r6, r3
 8006816:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800681a:	3b01      	subs	r3, #1
 800681c:	2a39      	cmp	r2, #57	@ 0x39
 800681e:	d052      	beq.n	80068c6 <_dtoa_r+0xae6>
 8006820:	3201      	adds	r2, #1
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	e60f      	b.n	8006446 <_dtoa_r+0x666>
 8006826:	2a00      	cmp	r2, #0
 8006828:	dd07      	ble.n	800683a <_dtoa_r+0xa5a>
 800682a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800682e:	d0ed      	beq.n	800680c <_dtoa_r+0xa2c>
 8006830:	9a02      	ldr	r2, [sp, #8]
 8006832:	f108 0301 	add.w	r3, r8, #1
 8006836:	7013      	strb	r3, [r2, #0]
 8006838:	e605      	b.n	8006446 <_dtoa_r+0x666>
 800683a:	9b07      	ldr	r3, [sp, #28]
 800683c:	9a07      	ldr	r2, [sp, #28]
 800683e:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006844:	4293      	cmp	r3, r2
 8006846:	d028      	beq.n	800689a <_dtoa_r+0xaba>
 8006848:	4649      	mov	r1, r9
 800684a:	2300      	movs	r3, #0
 800684c:	220a      	movs	r2, #10
 800684e:	4658      	mov	r0, fp
 8006850:	f000 f8a0 	bl	8006994 <__multadd>
 8006854:	42af      	cmp	r7, r5
 8006856:	4681      	mov	r9, r0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	f04f 020a 	mov.w	r2, #10
 8006860:	4639      	mov	r1, r7
 8006862:	4658      	mov	r0, fp
 8006864:	d107      	bne.n	8006876 <_dtoa_r+0xa96>
 8006866:	f000 f895 	bl	8006994 <__multadd>
 800686a:	4607      	mov	r7, r0
 800686c:	4605      	mov	r5, r0
 800686e:	9b07      	ldr	r3, [sp, #28]
 8006870:	3301      	adds	r3, #1
 8006872:	9307      	str	r3, [sp, #28]
 8006874:	e774      	b.n	8006760 <_dtoa_r+0x980>
 8006876:	f000 f88d 	bl	8006994 <__multadd>
 800687a:	4629      	mov	r1, r5
 800687c:	4607      	mov	r7, r0
 800687e:	2300      	movs	r3, #0
 8006880:	220a      	movs	r2, #10
 8006882:	4658      	mov	r0, fp
 8006884:	f000 f886 	bl	8006994 <__multadd>
 8006888:	4605      	mov	r5, r0
 800688a:	e7f0      	b.n	800686e <_dtoa_r+0xa8e>
 800688c:	9b08      	ldr	r3, [sp, #32]
 800688e:	2700      	movs	r7, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	bfcc      	ite	gt
 8006894:	461e      	movgt	r6, r3
 8006896:	2601      	movle	r6, #1
 8006898:	4456      	add	r6, sl
 800689a:	4649      	mov	r1, r9
 800689c:	2201      	movs	r2, #1
 800689e:	4658      	mov	r0, fp
 80068a0:	f000 fa08 	bl	8006cb4 <__lshift>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4681      	mov	r9, r0
 80068a8:	f000 fa70 	bl	8006d8c <__mcmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	dcb0      	bgt.n	8006812 <_dtoa_r+0xa32>
 80068b0:	d102      	bne.n	80068b8 <_dtoa_r+0xad8>
 80068b2:	f018 0f01 	tst.w	r8, #1
 80068b6:	d1ac      	bne.n	8006812 <_dtoa_r+0xa32>
 80068b8:	4633      	mov	r3, r6
 80068ba:	461e      	mov	r6, r3
 80068bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068c0:	2a30      	cmp	r2, #48	@ 0x30
 80068c2:	d0fa      	beq.n	80068ba <_dtoa_r+0xada>
 80068c4:	e5bf      	b.n	8006446 <_dtoa_r+0x666>
 80068c6:	459a      	cmp	sl, r3
 80068c8:	d1a4      	bne.n	8006814 <_dtoa_r+0xa34>
 80068ca:	9b04      	ldr	r3, [sp, #16]
 80068cc:	3301      	adds	r3, #1
 80068ce:	9304      	str	r3, [sp, #16]
 80068d0:	2331      	movs	r3, #49	@ 0x31
 80068d2:	f88a 3000 	strb.w	r3, [sl]
 80068d6:	e5b6      	b.n	8006446 <_dtoa_r+0x666>
 80068d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068da:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006934 <_dtoa_r+0xb54>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f43f aab5 	beq.w	8005e4e <_dtoa_r+0x6e>
 80068e4:	f10a 0308 	add.w	r3, sl, #8
 80068e8:	f7ff baaf 	b.w	8005e4a <_dtoa_r+0x6a>
 80068ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	f77f ae40 	ble.w	8006574 <_dtoa_r+0x794>
 80068f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f8:	2001      	movs	r0, #1
 80068fa:	e65e      	b.n	80065ba <_dtoa_r+0x7da>
 80068fc:	9b08      	ldr	r3, [sp, #32]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f77f aed9 	ble.w	80066b6 <_dtoa_r+0x8d6>
 8006904:	4656      	mov	r6, sl
 8006906:	4621      	mov	r1, r4
 8006908:	4648      	mov	r0, r9
 800690a:	f7ff f9e1 	bl	8005cd0 <quorem>
 800690e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006912:	9b08      	ldr	r3, [sp, #32]
 8006914:	f806 8b01 	strb.w	r8, [r6], #1
 8006918:	eba6 020a 	sub.w	r2, r6, sl
 800691c:	4293      	cmp	r3, r2
 800691e:	ddb5      	ble.n	800688c <_dtoa_r+0xaac>
 8006920:	4649      	mov	r1, r9
 8006922:	2300      	movs	r3, #0
 8006924:	220a      	movs	r2, #10
 8006926:	4658      	mov	r0, fp
 8006928:	f000 f834 	bl	8006994 <__multadd>
 800692c:	4681      	mov	r9, r0
 800692e:	e7ea      	b.n	8006906 <_dtoa_r+0xb26>
 8006930:	080094c7 	.word	0x080094c7
 8006934:	080094ba 	.word	0x080094ba

08006938 <_Balloc>:
 8006938:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800693a:	b570      	push	{r4, r5, r6, lr}
 800693c:	4605      	mov	r5, r0
 800693e:	460c      	mov	r4, r1
 8006940:	b17b      	cbz	r3, 8006962 <_Balloc+0x2a>
 8006942:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006944:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006948:	b9a0      	cbnz	r0, 8006974 <_Balloc+0x3c>
 800694a:	2101      	movs	r1, #1
 800694c:	fa01 f604 	lsl.w	r6, r1, r4
 8006950:	1d72      	adds	r2, r6, #5
 8006952:	4628      	mov	r0, r5
 8006954:	0092      	lsls	r2, r2, #2
 8006956:	f000 fbeb 	bl	8007130 <_calloc_r>
 800695a:	b148      	cbz	r0, 8006970 <_Balloc+0x38>
 800695c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8006960:	e00b      	b.n	800697a <_Balloc+0x42>
 8006962:	2221      	movs	r2, #33	@ 0x21
 8006964:	2104      	movs	r1, #4
 8006966:	f000 fbe3 	bl	8007130 <_calloc_r>
 800696a:	6468      	str	r0, [r5, #68]	@ 0x44
 800696c:	2800      	cmp	r0, #0
 800696e:	d1e8      	bne.n	8006942 <_Balloc+0xa>
 8006970:	2000      	movs	r0, #0
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	6802      	ldr	r2, [r0, #0]
 8006976:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800697a:	2300      	movs	r3, #0
 800697c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006980:	e7f7      	b.n	8006972 <_Balloc+0x3a>

08006982 <_Bfree>:
 8006982:	b131      	cbz	r1, 8006992 <_Bfree+0x10>
 8006984:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006986:	684a      	ldr	r2, [r1, #4]
 8006988:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800698c:	6008      	str	r0, [r1, #0]
 800698e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006992:	4770      	bx	lr

08006994 <__multadd>:
 8006994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006998:	4607      	mov	r7, r0
 800699a:	460c      	mov	r4, r1
 800699c:	461e      	mov	r6, r3
 800699e:	2000      	movs	r0, #0
 80069a0:	690d      	ldr	r5, [r1, #16]
 80069a2:	f101 0c14 	add.w	ip, r1, #20
 80069a6:	f8dc 3000 	ldr.w	r3, [ip]
 80069aa:	3001      	adds	r0, #1
 80069ac:	b299      	uxth	r1, r3
 80069ae:	fb02 6101 	mla	r1, r2, r1, r6
 80069b2:	0c1e      	lsrs	r6, r3, #16
 80069b4:	0c0b      	lsrs	r3, r1, #16
 80069b6:	fb02 3306 	mla	r3, r2, r6, r3
 80069ba:	b289      	uxth	r1, r1
 80069bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069c0:	4285      	cmp	r5, r0
 80069c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069c6:	f84c 1b04 	str.w	r1, [ip], #4
 80069ca:	dcec      	bgt.n	80069a6 <__multadd+0x12>
 80069cc:	b30e      	cbz	r6, 8006a12 <__multadd+0x7e>
 80069ce:	68a3      	ldr	r3, [r4, #8]
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	dc19      	bgt.n	8006a08 <__multadd+0x74>
 80069d4:	6861      	ldr	r1, [r4, #4]
 80069d6:	4638      	mov	r0, r7
 80069d8:	3101      	adds	r1, #1
 80069da:	f7ff ffad 	bl	8006938 <_Balloc>
 80069de:	4680      	mov	r8, r0
 80069e0:	b928      	cbnz	r0, 80069ee <__multadd+0x5a>
 80069e2:	4602      	mov	r2, r0
 80069e4:	21ba      	movs	r1, #186	@ 0xba
 80069e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a18 <__multadd+0x84>)
 80069e8:	480c      	ldr	r0, [pc, #48]	@ (8006a1c <__multadd+0x88>)
 80069ea:	f000 fb83 	bl	80070f4 <__assert_func>
 80069ee:	6922      	ldr	r2, [r4, #16]
 80069f0:	f104 010c 	add.w	r1, r4, #12
 80069f4:	3202      	adds	r2, #2
 80069f6:	0092      	lsls	r2, r2, #2
 80069f8:	300c      	adds	r0, #12
 80069fa:	f000 fb6d 	bl	80070d8 <memcpy>
 80069fe:	4621      	mov	r1, r4
 8006a00:	4638      	mov	r0, r7
 8006a02:	f7ff ffbe 	bl	8006982 <_Bfree>
 8006a06:	4644      	mov	r4, r8
 8006a08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	615e      	str	r6, [r3, #20]
 8006a10:	6125      	str	r5, [r4, #16]
 8006a12:	4620      	mov	r0, r4
 8006a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a18:	080094c7 	.word	0x080094c7
 8006a1c:	08009530 	.word	0x08009530

08006a20 <__hi0bits>:
 8006a20:	4603      	mov	r3, r0
 8006a22:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a26:	bf3a      	itte	cc
 8006a28:	0403      	lslcc	r3, r0, #16
 8006a2a:	2010      	movcc	r0, #16
 8006a2c:	2000      	movcs	r0, #0
 8006a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a32:	bf3c      	itt	cc
 8006a34:	021b      	lslcc	r3, r3, #8
 8006a36:	3008      	addcc	r0, #8
 8006a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a3c:	bf3c      	itt	cc
 8006a3e:	011b      	lslcc	r3, r3, #4
 8006a40:	3004      	addcc	r0, #4
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	bf3c      	itt	cc
 8006a48:	009b      	lslcc	r3, r3, #2
 8006a4a:	3002      	addcc	r0, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	db05      	blt.n	8006a5c <__hi0bits+0x3c>
 8006a50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a54:	f100 0001 	add.w	r0, r0, #1
 8006a58:	bf08      	it	eq
 8006a5a:	2020      	moveq	r0, #32
 8006a5c:	4770      	bx	lr

08006a5e <__lo0bits>:
 8006a5e:	6803      	ldr	r3, [r0, #0]
 8006a60:	4602      	mov	r2, r0
 8006a62:	f013 0007 	ands.w	r0, r3, #7
 8006a66:	d00b      	beq.n	8006a80 <__lo0bits+0x22>
 8006a68:	07d9      	lsls	r1, r3, #31
 8006a6a:	d421      	bmi.n	8006ab0 <__lo0bits+0x52>
 8006a6c:	0798      	lsls	r0, r3, #30
 8006a6e:	bf49      	itett	mi
 8006a70:	085b      	lsrmi	r3, r3, #1
 8006a72:	089b      	lsrpl	r3, r3, #2
 8006a74:	2001      	movmi	r0, #1
 8006a76:	6013      	strmi	r3, [r2, #0]
 8006a78:	bf5c      	itt	pl
 8006a7a:	2002      	movpl	r0, #2
 8006a7c:	6013      	strpl	r3, [r2, #0]
 8006a7e:	4770      	bx	lr
 8006a80:	b299      	uxth	r1, r3
 8006a82:	b909      	cbnz	r1, 8006a88 <__lo0bits+0x2a>
 8006a84:	2010      	movs	r0, #16
 8006a86:	0c1b      	lsrs	r3, r3, #16
 8006a88:	b2d9      	uxtb	r1, r3
 8006a8a:	b909      	cbnz	r1, 8006a90 <__lo0bits+0x32>
 8006a8c:	3008      	adds	r0, #8
 8006a8e:	0a1b      	lsrs	r3, r3, #8
 8006a90:	0719      	lsls	r1, r3, #28
 8006a92:	bf04      	itt	eq
 8006a94:	091b      	lsreq	r3, r3, #4
 8006a96:	3004      	addeq	r0, #4
 8006a98:	0799      	lsls	r1, r3, #30
 8006a9a:	bf04      	itt	eq
 8006a9c:	089b      	lsreq	r3, r3, #2
 8006a9e:	3002      	addeq	r0, #2
 8006aa0:	07d9      	lsls	r1, r3, #31
 8006aa2:	d403      	bmi.n	8006aac <__lo0bits+0x4e>
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	f100 0001 	add.w	r0, r0, #1
 8006aaa:	d003      	beq.n	8006ab4 <__lo0bits+0x56>
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	4770      	bx	lr
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	4770      	bx	lr
 8006ab4:	2020      	movs	r0, #32
 8006ab6:	4770      	bx	lr

08006ab8 <__i2b>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	2101      	movs	r1, #1
 8006abe:	f7ff ff3b 	bl	8006938 <_Balloc>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	b928      	cbnz	r0, 8006ad2 <__i2b+0x1a>
 8006ac6:	f240 1145 	movw	r1, #325	@ 0x145
 8006aca:	4b04      	ldr	r3, [pc, #16]	@ (8006adc <__i2b+0x24>)
 8006acc:	4804      	ldr	r0, [pc, #16]	@ (8006ae0 <__i2b+0x28>)
 8006ace:	f000 fb11 	bl	80070f4 <__assert_func>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	6144      	str	r4, [r0, #20]
 8006ad6:	6103      	str	r3, [r0, #16]
 8006ad8:	bd10      	pop	{r4, pc}
 8006ada:	bf00      	nop
 8006adc:	080094c7 	.word	0x080094c7
 8006ae0:	08009530 	.word	0x08009530

08006ae4 <__multiply>:
 8006ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	4614      	mov	r4, r2
 8006aea:	690a      	ldr	r2, [r1, #16]
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	460f      	mov	r7, r1
 8006af0:	429a      	cmp	r2, r3
 8006af2:	bfa2      	ittt	ge
 8006af4:	4623      	movge	r3, r4
 8006af6:	460c      	movge	r4, r1
 8006af8:	461f      	movge	r7, r3
 8006afa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006afe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	6861      	ldr	r1, [r4, #4]
 8006b06:	eb0a 0609 	add.w	r6, sl, r9
 8006b0a:	42b3      	cmp	r3, r6
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	bfb8      	it	lt
 8006b10:	3101      	addlt	r1, #1
 8006b12:	f7ff ff11 	bl	8006938 <_Balloc>
 8006b16:	b930      	cbnz	r0, 8006b26 <__multiply+0x42>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b1e:	4b43      	ldr	r3, [pc, #268]	@ (8006c2c <__multiply+0x148>)
 8006b20:	4843      	ldr	r0, [pc, #268]	@ (8006c30 <__multiply+0x14c>)
 8006b22:	f000 fae7 	bl	80070f4 <__assert_func>
 8006b26:	f100 0514 	add.w	r5, r0, #20
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b32:	4543      	cmp	r3, r8
 8006b34:	d321      	bcc.n	8006b7a <__multiply+0x96>
 8006b36:	f107 0114 	add.w	r1, r7, #20
 8006b3a:	f104 0214 	add.w	r2, r4, #20
 8006b3e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b42:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006b46:	9302      	str	r3, [sp, #8]
 8006b48:	1b13      	subs	r3, r2, r4
 8006b4a:	3b15      	subs	r3, #21
 8006b4c:	f023 0303 	bic.w	r3, r3, #3
 8006b50:	3304      	adds	r3, #4
 8006b52:	f104 0715 	add.w	r7, r4, #21
 8006b56:	42ba      	cmp	r2, r7
 8006b58:	bf38      	it	cc
 8006b5a:	2304      	movcc	r3, #4
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	9b02      	ldr	r3, [sp, #8]
 8006b60:	9103      	str	r1, [sp, #12]
 8006b62:	428b      	cmp	r3, r1
 8006b64:	d80c      	bhi.n	8006b80 <__multiply+0x9c>
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	dd03      	ble.n	8006b72 <__multiply+0x8e>
 8006b6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d05a      	beq.n	8006c28 <__multiply+0x144>
 8006b72:	6106      	str	r6, [r0, #16]
 8006b74:	b005      	add	sp, #20
 8006b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7a:	f843 2b04 	str.w	r2, [r3], #4
 8006b7e:	e7d8      	b.n	8006b32 <__multiply+0x4e>
 8006b80:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b84:	f1ba 0f00 	cmp.w	sl, #0
 8006b88:	d023      	beq.n	8006bd2 <__multiply+0xee>
 8006b8a:	46a9      	mov	r9, r5
 8006b8c:	f04f 0c00 	mov.w	ip, #0
 8006b90:	f104 0e14 	add.w	lr, r4, #20
 8006b94:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b98:	f8d9 3000 	ldr.w	r3, [r9]
 8006b9c:	fa1f fb87 	uxth.w	fp, r7
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ba6:	4463      	add	r3, ip
 8006ba8:	f8d9 c000 	ldr.w	ip, [r9]
 8006bac:	0c3f      	lsrs	r7, r7, #16
 8006bae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006bb2:	fb0a c707 	mla	r7, sl, r7, ip
 8006bb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006bc0:	4572      	cmp	r2, lr
 8006bc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006bc6:	f849 3b04 	str.w	r3, [r9], #4
 8006bca:	d8e3      	bhi.n	8006b94 <__multiply+0xb0>
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	f845 c003 	str.w	ip, [r5, r3]
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	3104      	adds	r1, #4
 8006bd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006bda:	f1b9 0f00 	cmp.w	r9, #0
 8006bde:	d021      	beq.n	8006c24 <__multiply+0x140>
 8006be0:	46ae      	mov	lr, r5
 8006be2:	f04f 0a00 	mov.w	sl, #0
 8006be6:	682b      	ldr	r3, [r5, #0]
 8006be8:	f104 0c14 	add.w	ip, r4, #20
 8006bec:	f8bc b000 	ldrh.w	fp, [ip]
 8006bf0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	fb09 770b 	mla	r7, r9, fp, r7
 8006bfa:	4457      	add	r7, sl
 8006bfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c00:	f84e 3b04 	str.w	r3, [lr], #4
 8006c04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c0c:	f8be 3000 	ldrh.w	r3, [lr]
 8006c10:	4562      	cmp	r2, ip
 8006c12:	fb09 330a 	mla	r3, r9, sl, r3
 8006c16:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c1e:	d8e5      	bhi.n	8006bec <__multiply+0x108>
 8006c20:	9f01      	ldr	r7, [sp, #4]
 8006c22:	51eb      	str	r3, [r5, r7]
 8006c24:	3504      	adds	r5, #4
 8006c26:	e79a      	b.n	8006b5e <__multiply+0x7a>
 8006c28:	3e01      	subs	r6, #1
 8006c2a:	e79c      	b.n	8006b66 <__multiply+0x82>
 8006c2c:	080094c7 	.word	0x080094c7
 8006c30:	08009530 	.word	0x08009530

08006c34 <__pow5mult>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	4615      	mov	r5, r2
 8006c3a:	f012 0203 	ands.w	r2, r2, #3
 8006c3e:	4607      	mov	r7, r0
 8006c40:	460e      	mov	r6, r1
 8006c42:	d007      	beq.n	8006c54 <__pow5mult+0x20>
 8006c44:	4c1a      	ldr	r4, [pc, #104]	@ (8006cb0 <__pow5mult+0x7c>)
 8006c46:	3a01      	subs	r2, #1
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c4e:	f7ff fea1 	bl	8006994 <__multadd>
 8006c52:	4606      	mov	r6, r0
 8006c54:	10ad      	asrs	r5, r5, #2
 8006c56:	d027      	beq.n	8006ca8 <__pow5mult+0x74>
 8006c58:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8006c5a:	b944      	cbnz	r4, 8006c6e <__pow5mult+0x3a>
 8006c5c:	f240 2171 	movw	r1, #625	@ 0x271
 8006c60:	4638      	mov	r0, r7
 8006c62:	f7ff ff29 	bl	8006ab8 <__i2b>
 8006c66:	2300      	movs	r3, #0
 8006c68:	4604      	mov	r4, r0
 8006c6a:	6438      	str	r0, [r7, #64]	@ 0x40
 8006c6c:	6003      	str	r3, [r0, #0]
 8006c6e:	f04f 0900 	mov.w	r9, #0
 8006c72:	07eb      	lsls	r3, r5, #31
 8006c74:	d50a      	bpl.n	8006c8c <__pow5mult+0x58>
 8006c76:	4631      	mov	r1, r6
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	f7ff ff32 	bl	8006ae4 <__multiply>
 8006c80:	4680      	mov	r8, r0
 8006c82:	4631      	mov	r1, r6
 8006c84:	4638      	mov	r0, r7
 8006c86:	f7ff fe7c 	bl	8006982 <_Bfree>
 8006c8a:	4646      	mov	r6, r8
 8006c8c:	106d      	asrs	r5, r5, #1
 8006c8e:	d00b      	beq.n	8006ca8 <__pow5mult+0x74>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	b938      	cbnz	r0, 8006ca4 <__pow5mult+0x70>
 8006c94:	4622      	mov	r2, r4
 8006c96:	4621      	mov	r1, r4
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff ff23 	bl	8006ae4 <__multiply>
 8006c9e:	6020      	str	r0, [r4, #0]
 8006ca0:	f8c0 9000 	str.w	r9, [r0]
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	e7e4      	b.n	8006c72 <__pow5mult+0x3e>
 8006ca8:	4630      	mov	r0, r6
 8006caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cae:	bf00      	nop
 8006cb0:	0800958c 	.word	0x0800958c

08006cb4 <__lshift>:
 8006cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb8:	460c      	mov	r4, r1
 8006cba:	4607      	mov	r7, r0
 8006cbc:	4691      	mov	r9, r2
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	6849      	ldr	r1, [r1, #4]
 8006cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cc6:	68a3      	ldr	r3, [r4, #8]
 8006cc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ccc:	f108 0601 	add.w	r6, r8, #1
 8006cd0:	42b3      	cmp	r3, r6
 8006cd2:	db0b      	blt.n	8006cec <__lshift+0x38>
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f7ff fe2f 	bl	8006938 <_Balloc>
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b948      	cbnz	r0, 8006cf2 <__lshift+0x3e>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ce4:	4b27      	ldr	r3, [pc, #156]	@ (8006d84 <__lshift+0xd0>)
 8006ce6:	4828      	ldr	r0, [pc, #160]	@ (8006d88 <__lshift+0xd4>)
 8006ce8:	f000 fa04 	bl	80070f4 <__assert_func>
 8006cec:	3101      	adds	r1, #1
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	e7ee      	b.n	8006cd0 <__lshift+0x1c>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f100 0114 	add.w	r1, r0, #20
 8006cf8:	f100 0210 	add.w	r2, r0, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	4553      	cmp	r3, sl
 8006d00:	db33      	blt.n	8006d6a <__lshift+0xb6>
 8006d02:	6920      	ldr	r0, [r4, #16]
 8006d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d08:	f104 0314 	add.w	r3, r4, #20
 8006d0c:	f019 091f 	ands.w	r9, r9, #31
 8006d10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d18:	d02b      	beq.n	8006d72 <__lshift+0xbe>
 8006d1a:	468a      	mov	sl, r1
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	fa00 f009 	lsl.w	r0, r0, r9
 8006d28:	4310      	orrs	r0, r2
 8006d2a:	f84a 0b04 	str.w	r0, [sl], #4
 8006d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d32:	459c      	cmp	ip, r3
 8006d34:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d38:	d8f3      	bhi.n	8006d22 <__lshift+0x6e>
 8006d3a:	ebac 0304 	sub.w	r3, ip, r4
 8006d3e:	3b15      	subs	r3, #21
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	3304      	adds	r3, #4
 8006d46:	f104 0015 	add.w	r0, r4, #21
 8006d4a:	4584      	cmp	ip, r0
 8006d4c:	bf38      	it	cc
 8006d4e:	2304      	movcc	r3, #4
 8006d50:	50ca      	str	r2, [r1, r3]
 8006d52:	b10a      	cbz	r2, 8006d58 <__lshift+0xa4>
 8006d54:	f108 0602 	add.w	r6, r8, #2
 8006d58:	3e01      	subs	r6, #1
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	612e      	str	r6, [r5, #16]
 8006d60:	f7ff fe0f 	bl	8006982 <_Bfree>
 8006d64:	4628      	mov	r0, r5
 8006d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d6e:	3301      	adds	r3, #1
 8006d70:	e7c5      	b.n	8006cfe <__lshift+0x4a>
 8006d72:	3904      	subs	r1, #4
 8006d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d78:	459c      	cmp	ip, r3
 8006d7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d7e:	d8f9      	bhi.n	8006d74 <__lshift+0xc0>
 8006d80:	e7ea      	b.n	8006d58 <__lshift+0xa4>
 8006d82:	bf00      	nop
 8006d84:	080094c7 	.word	0x080094c7
 8006d88:	08009530 	.word	0x08009530

08006d8c <__mcmp>:
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	690a      	ldr	r2, [r1, #16]
 8006d90:	6900      	ldr	r0, [r0, #16]
 8006d92:	b530      	push	{r4, r5, lr}
 8006d94:	1a80      	subs	r0, r0, r2
 8006d96:	d10e      	bne.n	8006db6 <__mcmp+0x2a>
 8006d98:	3314      	adds	r3, #20
 8006d9a:	3114      	adds	r1, #20
 8006d9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006da0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006da4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006da8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006dac:	4295      	cmp	r5, r2
 8006dae:	d003      	beq.n	8006db8 <__mcmp+0x2c>
 8006db0:	d205      	bcs.n	8006dbe <__mcmp+0x32>
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	bd30      	pop	{r4, r5, pc}
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d3f3      	bcc.n	8006da4 <__mcmp+0x18>
 8006dbc:	e7fb      	b.n	8006db6 <__mcmp+0x2a>
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	e7f9      	b.n	8006db6 <__mcmp+0x2a>
	...

08006dc4 <__mdiff>:
 8006dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	4689      	mov	r9, r1
 8006dca:	4606      	mov	r6, r0
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4648      	mov	r0, r9
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	f7ff ffdb 	bl	8006d8c <__mcmp>
 8006dd6:	1e05      	subs	r5, r0, #0
 8006dd8:	d112      	bne.n	8006e00 <__mdiff+0x3c>
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff fdab 	bl	8006938 <_Balloc>
 8006de2:	4602      	mov	r2, r0
 8006de4:	b928      	cbnz	r0, 8006df2 <__mdiff+0x2e>
 8006de6:	f240 2137 	movw	r1, #567	@ 0x237
 8006dea:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee4 <__mdiff+0x120>)
 8006dec:	483e      	ldr	r0, [pc, #248]	@ (8006ee8 <__mdiff+0x124>)
 8006dee:	f000 f981 	bl	80070f4 <__assert_func>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006df8:	4610      	mov	r0, r2
 8006dfa:	b003      	add	sp, #12
 8006dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e00:	bfbc      	itt	lt
 8006e02:	464b      	movlt	r3, r9
 8006e04:	46a1      	movlt	r9, r4
 8006e06:	4630      	mov	r0, r6
 8006e08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e0c:	bfba      	itte	lt
 8006e0e:	461c      	movlt	r4, r3
 8006e10:	2501      	movlt	r5, #1
 8006e12:	2500      	movge	r5, #0
 8006e14:	f7ff fd90 	bl	8006938 <_Balloc>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	b918      	cbnz	r0, 8006e24 <__mdiff+0x60>
 8006e1c:	f240 2145 	movw	r1, #581	@ 0x245
 8006e20:	4b30      	ldr	r3, [pc, #192]	@ (8006ee4 <__mdiff+0x120>)
 8006e22:	e7e3      	b.n	8006dec <__mdiff+0x28>
 8006e24:	f100 0b14 	add.w	fp, r0, #20
 8006e28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e2c:	f109 0310 	add.w	r3, r9, #16
 8006e30:	60c5      	str	r5, [r0, #12]
 8006e32:	f04f 0c00 	mov.w	ip, #0
 8006e36:	f109 0514 	add.w	r5, r9, #20
 8006e3a:	46d9      	mov	r9, fp
 8006e3c:	6926      	ldr	r6, [r4, #16]
 8006e3e:	f104 0e14 	add.w	lr, r4, #20
 8006e42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e56:	b281      	uxth	r1, r0
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	fa1f f38a 	uxth.w	r3, sl
 8006e5e:	1a5b      	subs	r3, r3, r1
 8006e60:	0c00      	lsrs	r0, r0, #16
 8006e62:	4463      	add	r3, ip
 8006e64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e72:	4576      	cmp	r6, lr
 8006e74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e78:	f849 3b04 	str.w	r3, [r9], #4
 8006e7c:	d8e6      	bhi.n	8006e4c <__mdiff+0x88>
 8006e7e:	1b33      	subs	r3, r6, r4
 8006e80:	3b15      	subs	r3, #21
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	3415      	adds	r4, #21
 8006e88:	3304      	adds	r3, #4
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	bf38      	it	cc
 8006e8e:	2304      	movcc	r3, #4
 8006e90:	441d      	add	r5, r3
 8006e92:	445b      	add	r3, fp
 8006e94:	461e      	mov	r6, r3
 8006e96:	462c      	mov	r4, r5
 8006e98:	4544      	cmp	r4, r8
 8006e9a:	d30e      	bcc.n	8006eba <__mdiff+0xf6>
 8006e9c:	f108 0103 	add.w	r1, r8, #3
 8006ea0:	1b49      	subs	r1, r1, r5
 8006ea2:	f021 0103 	bic.w	r1, r1, #3
 8006ea6:	3d03      	subs	r5, #3
 8006ea8:	45a8      	cmp	r8, r5
 8006eaa:	bf38      	it	cc
 8006eac:	2100      	movcc	r1, #0
 8006eae:	440b      	add	r3, r1
 8006eb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006eb4:	b199      	cbz	r1, 8006ede <__mdiff+0x11a>
 8006eb6:	6117      	str	r7, [r2, #16]
 8006eb8:	e79e      	b.n	8006df8 <__mdiff+0x34>
 8006eba:	46e6      	mov	lr, ip
 8006ebc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ec0:	fa1f fc81 	uxth.w	ip, r1
 8006ec4:	44f4      	add	ip, lr
 8006ec6:	0c08      	lsrs	r0, r1, #16
 8006ec8:	4471      	add	r1, lr
 8006eca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ece:	b289      	uxth	r1, r1
 8006ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ed4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ed8:	f846 1b04 	str.w	r1, [r6], #4
 8006edc:	e7dc      	b.n	8006e98 <__mdiff+0xd4>
 8006ede:	3f01      	subs	r7, #1
 8006ee0:	e7e6      	b.n	8006eb0 <__mdiff+0xec>
 8006ee2:	bf00      	nop
 8006ee4:	080094c7 	.word	0x080094c7
 8006ee8:	08009530 	.word	0x08009530

08006eec <__d2b>:
 8006eec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	4690      	mov	r8, r2
 8006ef4:	4699      	mov	r9, r3
 8006ef6:	9e08      	ldr	r6, [sp, #32]
 8006ef8:	f7ff fd1e 	bl	8006938 <_Balloc>
 8006efc:	4604      	mov	r4, r0
 8006efe:	b930      	cbnz	r0, 8006f0e <__d2b+0x22>
 8006f00:	4602      	mov	r2, r0
 8006f02:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f06:	4b23      	ldr	r3, [pc, #140]	@ (8006f94 <__d2b+0xa8>)
 8006f08:	4823      	ldr	r0, [pc, #140]	@ (8006f98 <__d2b+0xac>)
 8006f0a:	f000 f8f3 	bl	80070f4 <__assert_func>
 8006f0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f16:	b10d      	cbz	r5, 8006f1c <__d2b+0x30>
 8006f18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	f1b8 0300 	subs.w	r3, r8, #0
 8006f22:	d024      	beq.n	8006f6e <__d2b+0x82>
 8006f24:	4668      	mov	r0, sp
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	f7ff fd99 	bl	8006a5e <__lo0bits>
 8006f2c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f30:	b1d8      	cbz	r0, 8006f6a <__d2b+0x7e>
 8006f32:	f1c0 0320 	rsb	r3, r0, #32
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	430b      	orrs	r3, r1
 8006f3c:	40c2      	lsrs	r2, r0
 8006f3e:	6163      	str	r3, [r4, #20]
 8006f40:	9201      	str	r2, [sp, #4]
 8006f42:	9b01      	ldr	r3, [sp, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bf0c      	ite	eq
 8006f48:	2201      	moveq	r2, #1
 8006f4a:	2202      	movne	r2, #2
 8006f4c:	61a3      	str	r3, [r4, #24]
 8006f4e:	6122      	str	r2, [r4, #16]
 8006f50:	b1ad      	cbz	r5, 8006f7e <__d2b+0x92>
 8006f52:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f56:	4405      	add	r5, r0
 8006f58:	6035      	str	r5, [r6, #0]
 8006f5a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f60:	6018      	str	r0, [r3, #0]
 8006f62:	4620      	mov	r0, r4
 8006f64:	b002      	add	sp, #8
 8006f66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006f6a:	6161      	str	r1, [r4, #20]
 8006f6c:	e7e9      	b.n	8006f42 <__d2b+0x56>
 8006f6e:	a801      	add	r0, sp, #4
 8006f70:	f7ff fd75 	bl	8006a5e <__lo0bits>
 8006f74:	9b01      	ldr	r3, [sp, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	6163      	str	r3, [r4, #20]
 8006f7a:	3020      	adds	r0, #32
 8006f7c:	e7e7      	b.n	8006f4e <__d2b+0x62>
 8006f7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f86:	6030      	str	r0, [r6, #0]
 8006f88:	6918      	ldr	r0, [r3, #16]
 8006f8a:	f7ff fd49 	bl	8006a20 <__hi0bits>
 8006f8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f92:	e7e4      	b.n	8006f5e <__d2b+0x72>
 8006f94:	080094c7 	.word	0x080094c7
 8006f98:	08009530 	.word	0x08009530

08006f9c <__ssprint_r>:
 8006f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	6893      	ldr	r3, [r2, #8]
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	4617      	mov	r7, r2
 8006fa6:	f8d2 b000 	ldr.w	fp, [r2]
 8006faa:	9001      	str	r0, [sp, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d157      	bne.n	8007060 <__ssprint_r+0xc4>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	b003      	add	sp, #12
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbc:	e9db a800 	ldrd	sl, r8, [fp]
 8006fc0:	f10b 0b08 	add.w	fp, fp, #8
 8006fc4:	68a6      	ldr	r6, [r4, #8]
 8006fc6:	6820      	ldr	r0, [r4, #0]
 8006fc8:	f1b8 0f00 	cmp.w	r8, #0
 8006fcc:	d0f6      	beq.n	8006fbc <__ssprint_r+0x20>
 8006fce:	45b0      	cmp	r8, r6
 8006fd0:	d32e      	bcc.n	8007030 <__ssprint_r+0x94>
 8006fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fd6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fda:	d029      	beq.n	8007030 <__ssprint_r+0x94>
 8006fdc:	6921      	ldr	r1, [r4, #16]
 8006fde:	6965      	ldr	r5, [r4, #20]
 8006fe0:	eba0 0901 	sub.w	r9, r0, r1
 8006fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fec:	f109 0001 	add.w	r0, r9, #1
 8006ff0:	106d      	asrs	r5, r5, #1
 8006ff2:	4440      	add	r0, r8
 8006ff4:	4285      	cmp	r5, r0
 8006ff6:	bf38      	it	cc
 8006ff8:	4605      	movcc	r5, r0
 8006ffa:	0553      	lsls	r3, r2, #21
 8006ffc:	d534      	bpl.n	8007068 <__ssprint_r+0xcc>
 8006ffe:	4629      	mov	r1, r5
 8007000:	9801      	ldr	r0, [sp, #4]
 8007002:	f7fd f89b 	bl	800413c <_malloc_r>
 8007006:	4606      	mov	r6, r0
 8007008:	2800      	cmp	r0, #0
 800700a:	d038      	beq.n	800707e <__ssprint_r+0xe2>
 800700c:	464a      	mov	r2, r9
 800700e:	6921      	ldr	r1, [r4, #16]
 8007010:	f000 f862 	bl	80070d8 <memcpy>
 8007014:	89a2      	ldrh	r2, [r4, #12]
 8007016:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800701a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800701e:	81a2      	strh	r2, [r4, #12]
 8007020:	6126      	str	r6, [r4, #16]
 8007022:	444e      	add	r6, r9
 8007024:	6026      	str	r6, [r4, #0]
 8007026:	4646      	mov	r6, r8
 8007028:	6165      	str	r5, [r4, #20]
 800702a:	eba5 0509 	sub.w	r5, r5, r9
 800702e:	60a5      	str	r5, [r4, #8]
 8007030:	4546      	cmp	r6, r8
 8007032:	bf28      	it	cs
 8007034:	4646      	movcs	r6, r8
 8007036:	4651      	mov	r1, sl
 8007038:	4632      	mov	r2, r6
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	f000 f82b 	bl	8007096 <memmove>
 8007040:	68a2      	ldr	r2, [r4, #8]
 8007042:	44c2      	add	sl, r8
 8007044:	1b92      	subs	r2, r2, r6
 8007046:	60a2      	str	r2, [r4, #8]
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	4432      	add	r2, r6
 800704c:	6022      	str	r2, [r4, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	eba2 0308 	sub.w	r3, r2, r8
 8007054:	60bb      	str	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0aa      	beq.n	8006fb0 <__ssprint_r+0x14>
 800705a:	f04f 0800 	mov.w	r8, #0
 800705e:	e7b1      	b.n	8006fc4 <__ssprint_r+0x28>
 8007060:	f04f 0a00 	mov.w	sl, #0
 8007064:	46d0      	mov	r8, sl
 8007066:	e7ad      	b.n	8006fc4 <__ssprint_r+0x28>
 8007068:	462a      	mov	r2, r5
 800706a:	9801      	ldr	r0, [sp, #4]
 800706c:	f000 f8a8 	bl	80071c0 <_realloc_r>
 8007070:	4606      	mov	r6, r0
 8007072:	2800      	cmp	r0, #0
 8007074:	d1d4      	bne.n	8007020 <__ssprint_r+0x84>
 8007076:	6921      	ldr	r1, [r4, #16]
 8007078:	9801      	ldr	r0, [sp, #4]
 800707a:	f7fc ff9f 	bl	8003fbc <_free_r>
 800707e:	230c      	movs	r3, #12
 8007080:	9a01      	ldr	r2, [sp, #4]
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	2300      	movs	r3, #0
 8007092:	60bb      	str	r3, [r7, #8]
 8007094:	e78d      	b.n	8006fb2 <__ssprint_r+0x16>

08007096 <memmove>:
 8007096:	4288      	cmp	r0, r1
 8007098:	b510      	push	{r4, lr}
 800709a:	eb01 0402 	add.w	r4, r1, r2
 800709e:	d902      	bls.n	80070a6 <memmove+0x10>
 80070a0:	4284      	cmp	r4, r0
 80070a2:	4623      	mov	r3, r4
 80070a4:	d807      	bhi.n	80070b6 <memmove+0x20>
 80070a6:	1e43      	subs	r3, r0, #1
 80070a8:	42a1      	cmp	r1, r4
 80070aa:	d008      	beq.n	80070be <memmove+0x28>
 80070ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070b4:	e7f8      	b.n	80070a8 <memmove+0x12>
 80070b6:	4601      	mov	r1, r0
 80070b8:	4402      	add	r2, r0
 80070ba:	428a      	cmp	r2, r1
 80070bc:	d100      	bne.n	80070c0 <memmove+0x2a>
 80070be:	bd10      	pop	{r4, pc}
 80070c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070c8:	e7f7      	b.n	80070ba <memmove+0x24>
	...

080070cc <__locale_mb_cur_max>:
 80070cc:	4b01      	ldr	r3, [pc, #4]	@ (80070d4 <__locale_mb_cur_max+0x8>)
 80070ce:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 80070d2:	4770      	bx	lr
 80070d4:	20000554 	.word	0x20000554

080070d8 <memcpy>:
 80070d8:	440a      	add	r2, r1
 80070da:	4291      	cmp	r1, r2
 80070dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80070e0:	d100      	bne.n	80070e4 <memcpy+0xc>
 80070e2:	4770      	bx	lr
 80070e4:	b510      	push	{r4, lr}
 80070e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ea:	4291      	cmp	r1, r2
 80070ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070f0:	d1f9      	bne.n	80070e6 <memcpy+0xe>
 80070f2:	bd10      	pop	{r4, pc}

080070f4 <__assert_func>:
 80070f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070f6:	4614      	mov	r4, r2
 80070f8:	461a      	mov	r2, r3
 80070fa:	4b09      	ldr	r3, [pc, #36]	@ (8007120 <__assert_func+0x2c>)
 80070fc:	4605      	mov	r5, r0
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68d8      	ldr	r0, [r3, #12]
 8007102:	b954      	cbnz	r4, 800711a <__assert_func+0x26>
 8007104:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <__assert_func+0x30>)
 8007106:	461c      	mov	r4, r3
 8007108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800710c:	9100      	str	r1, [sp, #0]
 800710e:	462b      	mov	r3, r5
 8007110:	4905      	ldr	r1, [pc, #20]	@ (8007128 <__assert_func+0x34>)
 8007112:	f000 fa0f 	bl	8007534 <fiprintf>
 8007116:	f001 f927 	bl	8008368 <abort>
 800711a:	4b04      	ldr	r3, [pc, #16]	@ (800712c <__assert_func+0x38>)
 800711c:	e7f4      	b.n	8007108 <__assert_func+0x14>
 800711e:	bf00      	nop
 8007120:	20000018 	.word	0x20000018
 8007124:	080096cd 	.word	0x080096cd
 8007128:	0800969f 	.word	0x0800969f
 800712c:	08009692 	.word	0x08009692

08007130 <_calloc_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	fba1 1502 	umull	r1, r5, r1, r2
 8007136:	b935      	cbnz	r5, 8007146 <_calloc_r+0x16>
 8007138:	f7fd f800 	bl	800413c <_malloc_r>
 800713c:	4604      	mov	r4, r0
 800713e:	b938      	cbnz	r0, 8007150 <_calloc_r+0x20>
 8007140:	2400      	movs	r4, #0
 8007142:	4620      	mov	r0, r4
 8007144:	bd38      	pop	{r3, r4, r5, pc}
 8007146:	f7fc fea5 	bl	8003e94 <__errno>
 800714a:	230c      	movs	r3, #12
 800714c:	6003      	str	r3, [r0, #0]
 800714e:	e7f7      	b.n	8007140 <_calloc_r+0x10>
 8007150:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007154:	f022 0203 	bic.w	r2, r2, #3
 8007158:	3a04      	subs	r2, #4
 800715a:	2a24      	cmp	r2, #36	@ 0x24
 800715c:	d819      	bhi.n	8007192 <_calloc_r+0x62>
 800715e:	2a13      	cmp	r2, #19
 8007160:	d915      	bls.n	800718e <_calloc_r+0x5e>
 8007162:	2a1b      	cmp	r2, #27
 8007164:	e9c0 5500 	strd	r5, r5, [r0]
 8007168:	d806      	bhi.n	8007178 <_calloc_r+0x48>
 800716a:	f100 0308 	add.w	r3, r0, #8
 800716e:	2200      	movs	r2, #0
 8007170:	e9c3 2200 	strd	r2, r2, [r3]
 8007174:	609a      	str	r2, [r3, #8]
 8007176:	e7e4      	b.n	8007142 <_calloc_r+0x12>
 8007178:	2a24      	cmp	r2, #36	@ 0x24
 800717a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800717e:	bf11      	iteee	ne
 8007180:	f100 0310 	addne.w	r3, r0, #16
 8007184:	6105      	streq	r5, [r0, #16]
 8007186:	f100 0318 	addeq.w	r3, r0, #24
 800718a:	6145      	streq	r5, [r0, #20]
 800718c:	e7ef      	b.n	800716e <_calloc_r+0x3e>
 800718e:	4603      	mov	r3, r0
 8007190:	e7ed      	b.n	800716e <_calloc_r+0x3e>
 8007192:	4629      	mov	r1, r5
 8007194:	f7fc fe30 	bl	8003df8 <memset>
 8007198:	e7d3      	b.n	8007142 <_calloc_r+0x12>

0800719a <__ascii_mbtowc>:
 800719a:	b082      	sub	sp, #8
 800719c:	b901      	cbnz	r1, 80071a0 <__ascii_mbtowc+0x6>
 800719e:	a901      	add	r1, sp, #4
 80071a0:	b142      	cbz	r2, 80071b4 <__ascii_mbtowc+0x1a>
 80071a2:	b14b      	cbz	r3, 80071b8 <__ascii_mbtowc+0x1e>
 80071a4:	7813      	ldrb	r3, [r2, #0]
 80071a6:	600b      	str	r3, [r1, #0]
 80071a8:	7812      	ldrb	r2, [r2, #0]
 80071aa:	1e10      	subs	r0, r2, #0
 80071ac:	bf18      	it	ne
 80071ae:	2001      	movne	r0, #1
 80071b0:	b002      	add	sp, #8
 80071b2:	4770      	bx	lr
 80071b4:	4610      	mov	r0, r2
 80071b6:	e7fb      	b.n	80071b0 <__ascii_mbtowc+0x16>
 80071b8:	f06f 0001 	mvn.w	r0, #1
 80071bc:	e7f8      	b.n	80071b0 <__ascii_mbtowc+0x16>
	...

080071c0 <_realloc_r>:
 80071c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	4682      	mov	sl, r0
 80071c6:	4693      	mov	fp, r2
 80071c8:	460c      	mov	r4, r1
 80071ca:	b929      	cbnz	r1, 80071d8 <_realloc_r+0x18>
 80071cc:	4611      	mov	r1, r2
 80071ce:	b003      	add	sp, #12
 80071d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	f7fc bfb2 	b.w	800413c <_malloc_r>
 80071d8:	f7fd f9ea 	bl	80045b0 <__malloc_lock>
 80071dc:	f10b 080b 	add.w	r8, fp, #11
 80071e0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80071e4:	f1b8 0f16 	cmp.w	r8, #22
 80071e8:	f1a4 0908 	sub.w	r9, r4, #8
 80071ec:	f025 0603 	bic.w	r6, r5, #3
 80071f0:	d908      	bls.n	8007204 <_realloc_r+0x44>
 80071f2:	f038 0807 	bics.w	r8, r8, #7
 80071f6:	d507      	bpl.n	8007208 <_realloc_r+0x48>
 80071f8:	230c      	movs	r3, #12
 80071fa:	f8ca 3000 	str.w	r3, [sl]
 80071fe:	f04f 0b00 	mov.w	fp, #0
 8007202:	e032      	b.n	800726a <_realloc_r+0xaa>
 8007204:	f04f 0810 	mov.w	r8, #16
 8007208:	45c3      	cmp	fp, r8
 800720a:	d8f5      	bhi.n	80071f8 <_realloc_r+0x38>
 800720c:	4546      	cmp	r6, r8
 800720e:	f280 8179 	bge.w	8007504 <_realloc_r+0x344>
 8007212:	4ba0      	ldr	r3, [pc, #640]	@ (8007494 <_realloc_r+0x2d4>)
 8007214:	eb09 0106 	add.w	r1, r9, r6
 8007218:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800721c:	6848      	ldr	r0, [r1, #4]
 800721e:	458c      	cmp	ip, r1
 8007220:	d005      	beq.n	800722e <_realloc_r+0x6e>
 8007222:	f020 0201 	bic.w	r2, r0, #1
 8007226:	440a      	add	r2, r1
 8007228:	6852      	ldr	r2, [r2, #4]
 800722a:	07d7      	lsls	r7, r2, #31
 800722c:	d449      	bmi.n	80072c2 <_realloc_r+0x102>
 800722e:	f020 0003 	bic.w	r0, r0, #3
 8007232:	458c      	cmp	ip, r1
 8007234:	eb06 0700 	add.w	r7, r6, r0
 8007238:	d11b      	bne.n	8007272 <_realloc_r+0xb2>
 800723a:	f108 0210 	add.w	r2, r8, #16
 800723e:	42ba      	cmp	r2, r7
 8007240:	dc41      	bgt.n	80072c6 <_realloc_r+0x106>
 8007242:	eba7 0708 	sub.w	r7, r7, r8
 8007246:	eb09 0208 	add.w	r2, r9, r8
 800724a:	f047 0701 	orr.w	r7, r7, #1
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	6057      	str	r7, [r2, #4]
 8007252:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007256:	4650      	mov	r0, sl
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	ea43 0308 	orr.w	r3, r3, r8
 8007260:	f844 3c04 	str.w	r3, [r4, #-4]
 8007264:	f7fd f9aa 	bl	80045bc <__malloc_unlock>
 8007268:	46a3      	mov	fp, r4
 800726a:	4658      	mov	r0, fp
 800726c:	b003      	add	sp, #12
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	45b8      	cmp	r8, r7
 8007274:	dc27      	bgt.n	80072c6 <_realloc_r+0x106>
 8007276:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800727a:	60d3      	str	r3, [r2, #12]
 800727c:	609a      	str	r2, [r3, #8]
 800727e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007282:	eba7 0008 	sub.w	r0, r7, r8
 8007286:	280f      	cmp	r0, #15
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	eb09 0207 	add.w	r2, r9, r7
 8007290:	f240 813a 	bls.w	8007508 <_realloc_r+0x348>
 8007294:	eb09 0108 	add.w	r1, r9, r8
 8007298:	ea48 0303 	orr.w	r3, r8, r3
 800729c:	f040 0001 	orr.w	r0, r0, #1
 80072a0:	f8c9 3004 	str.w	r3, [r9, #4]
 80072a4:	6048      	str	r0, [r1, #4]
 80072a6:	6853      	ldr	r3, [r2, #4]
 80072a8:	4650      	mov	r0, sl
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	6053      	str	r3, [r2, #4]
 80072b0:	3108      	adds	r1, #8
 80072b2:	f7fc fe83 	bl	8003fbc <_free_r>
 80072b6:	4650      	mov	r0, sl
 80072b8:	f7fd f980 	bl	80045bc <__malloc_unlock>
 80072bc:	f109 0b08 	add.w	fp, r9, #8
 80072c0:	e7d3      	b.n	800726a <_realloc_r+0xaa>
 80072c2:	2000      	movs	r0, #0
 80072c4:	4601      	mov	r1, r0
 80072c6:	07ea      	lsls	r2, r5, #31
 80072c8:	f100 80ca 	bmi.w	8007460 <_realloc_r+0x2a0>
 80072cc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80072d0:	eba9 0505 	sub.w	r5, r9, r5
 80072d4:	686a      	ldr	r2, [r5, #4]
 80072d6:	f022 0203 	bic.w	r2, r2, #3
 80072da:	4432      	add	r2, r6
 80072dc:	9201      	str	r2, [sp, #4]
 80072de:	2900      	cmp	r1, #0
 80072e0:	f000 8088 	beq.w	80073f4 <_realloc_r+0x234>
 80072e4:	458c      	cmp	ip, r1
 80072e6:	eb00 0702 	add.w	r7, r0, r2
 80072ea:	d14a      	bne.n	8007382 <_realloc_r+0x1c2>
 80072ec:	f108 0210 	add.w	r2, r8, #16
 80072f0:	42ba      	cmp	r2, r7
 80072f2:	dc7f      	bgt.n	80073f4 <_realloc_r+0x234>
 80072f4:	46ab      	mov	fp, r5
 80072f6:	68ea      	ldr	r2, [r5, #12]
 80072f8:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80072fc:	60ca      	str	r2, [r1, #12]
 80072fe:	6091      	str	r1, [r2, #8]
 8007300:	1f32      	subs	r2, r6, #4
 8007302:	2a24      	cmp	r2, #36	@ 0x24
 8007304:	d837      	bhi.n	8007376 <_realloc_r+0x1b6>
 8007306:	2a13      	cmp	r2, #19
 8007308:	d933      	bls.n	8007372 <_realloc_r+0x1b2>
 800730a:	6821      	ldr	r1, [r4, #0]
 800730c:	2a1b      	cmp	r2, #27
 800730e:	60a9      	str	r1, [r5, #8]
 8007310:	6861      	ldr	r1, [r4, #4]
 8007312:	60e9      	str	r1, [r5, #12]
 8007314:	d81a      	bhi.n	800734c <_realloc_r+0x18c>
 8007316:	3408      	adds	r4, #8
 8007318:	f105 0210 	add.w	r2, r5, #16
 800731c:	6821      	ldr	r1, [r4, #0]
 800731e:	6011      	str	r1, [r2, #0]
 8007320:	6861      	ldr	r1, [r4, #4]
 8007322:	6051      	str	r1, [r2, #4]
 8007324:	68a1      	ldr	r1, [r4, #8]
 8007326:	6091      	str	r1, [r2, #8]
 8007328:	eba7 0708 	sub.w	r7, r7, r8
 800732c:	eb05 0208 	add.w	r2, r5, r8
 8007330:	f047 0701 	orr.w	r7, r7, #1
 8007334:	609a      	str	r2, [r3, #8]
 8007336:	6057      	str	r7, [r2, #4]
 8007338:	686b      	ldr	r3, [r5, #4]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	ea43 0308 	orr.w	r3, r3, r8
 8007342:	606b      	str	r3, [r5, #4]
 8007344:	4650      	mov	r0, sl
 8007346:	f7fd f939 	bl	80045bc <__malloc_unlock>
 800734a:	e78e      	b.n	800726a <_realloc_r+0xaa>
 800734c:	68a1      	ldr	r1, [r4, #8]
 800734e:	2a24      	cmp	r2, #36	@ 0x24
 8007350:	6129      	str	r1, [r5, #16]
 8007352:	68e1      	ldr	r1, [r4, #12]
 8007354:	bf18      	it	ne
 8007356:	f105 0218 	addne.w	r2, r5, #24
 800735a:	6169      	str	r1, [r5, #20]
 800735c:	bf09      	itett	eq
 800735e:	6922      	ldreq	r2, [r4, #16]
 8007360:	3410      	addne	r4, #16
 8007362:	61aa      	streq	r2, [r5, #24]
 8007364:	6961      	ldreq	r1, [r4, #20]
 8007366:	bf02      	ittt	eq
 8007368:	f105 0220 	addeq.w	r2, r5, #32
 800736c:	61e9      	streq	r1, [r5, #28]
 800736e:	3418      	addeq	r4, #24
 8007370:	e7d4      	b.n	800731c <_realloc_r+0x15c>
 8007372:	465a      	mov	r2, fp
 8007374:	e7d2      	b.n	800731c <_realloc_r+0x15c>
 8007376:	4621      	mov	r1, r4
 8007378:	4658      	mov	r0, fp
 800737a:	f7ff fe8c 	bl	8007096 <memmove>
 800737e:	4b45      	ldr	r3, [pc, #276]	@ (8007494 <_realloc_r+0x2d4>)
 8007380:	e7d2      	b.n	8007328 <_realloc_r+0x168>
 8007382:	45b8      	cmp	r8, r7
 8007384:	dc36      	bgt.n	80073f4 <_realloc_r+0x234>
 8007386:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800738a:	4628      	mov	r0, r5
 800738c:	60d3      	str	r3, [r2, #12]
 800738e:	609a      	str	r2, [r3, #8]
 8007390:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007394:	68eb      	ldr	r3, [r5, #12]
 8007396:	60d3      	str	r3, [r2, #12]
 8007398:	609a      	str	r2, [r3, #8]
 800739a:	1f32      	subs	r2, r6, #4
 800739c:	2a24      	cmp	r2, #36	@ 0x24
 800739e:	d825      	bhi.n	80073ec <_realloc_r+0x22c>
 80073a0:	2a13      	cmp	r2, #19
 80073a2:	d908      	bls.n	80073b6 <_realloc_r+0x1f6>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	2a1b      	cmp	r2, #27
 80073a8:	60ab      	str	r3, [r5, #8]
 80073aa:	6863      	ldr	r3, [r4, #4]
 80073ac:	60eb      	str	r3, [r5, #12]
 80073ae:	d80a      	bhi.n	80073c6 <_realloc_r+0x206>
 80073b0:	3408      	adds	r4, #8
 80073b2:	f105 0010 	add.w	r0, r5, #16
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	6003      	str	r3, [r0, #0]
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	6043      	str	r3, [r0, #4]
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	6083      	str	r3, [r0, #8]
 80073c2:	46a9      	mov	r9, r5
 80073c4:	e75b      	b.n	800727e <_realloc_r+0xbe>
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	2a24      	cmp	r2, #36	@ 0x24
 80073ca:	612b      	str	r3, [r5, #16]
 80073cc:	68e3      	ldr	r3, [r4, #12]
 80073ce:	bf18      	it	ne
 80073d0:	f105 0018 	addne.w	r0, r5, #24
 80073d4:	616b      	str	r3, [r5, #20]
 80073d6:	bf09      	itett	eq
 80073d8:	6923      	ldreq	r3, [r4, #16]
 80073da:	3410      	addne	r4, #16
 80073dc:	61ab      	streq	r3, [r5, #24]
 80073de:	6963      	ldreq	r3, [r4, #20]
 80073e0:	bf02      	ittt	eq
 80073e2:	f105 0020 	addeq.w	r0, r5, #32
 80073e6:	61eb      	streq	r3, [r5, #28]
 80073e8:	3418      	addeq	r4, #24
 80073ea:	e7e4      	b.n	80073b6 <_realloc_r+0x1f6>
 80073ec:	4621      	mov	r1, r4
 80073ee:	f7ff fe52 	bl	8007096 <memmove>
 80073f2:	e7e6      	b.n	80073c2 <_realloc_r+0x202>
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	4598      	cmp	r8, r3
 80073f8:	dc32      	bgt.n	8007460 <_realloc_r+0x2a0>
 80073fa:	4628      	mov	r0, r5
 80073fc:	68eb      	ldr	r3, [r5, #12]
 80073fe:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007402:	60d3      	str	r3, [r2, #12]
 8007404:	609a      	str	r2, [r3, #8]
 8007406:	1f32      	subs	r2, r6, #4
 8007408:	2a24      	cmp	r2, #36	@ 0x24
 800740a:	d825      	bhi.n	8007458 <_realloc_r+0x298>
 800740c:	2a13      	cmp	r2, #19
 800740e:	d908      	bls.n	8007422 <_realloc_r+0x262>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	2a1b      	cmp	r2, #27
 8007414:	60ab      	str	r3, [r5, #8]
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	60eb      	str	r3, [r5, #12]
 800741a:	d80a      	bhi.n	8007432 <_realloc_r+0x272>
 800741c:	3408      	adds	r4, #8
 800741e:	f105 0010 	add.w	r0, r5, #16
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	6003      	str	r3, [r0, #0]
 8007426:	6863      	ldr	r3, [r4, #4]
 8007428:	6043      	str	r3, [r0, #4]
 800742a:	68a3      	ldr	r3, [r4, #8]
 800742c:	6083      	str	r3, [r0, #8]
 800742e:	9f01      	ldr	r7, [sp, #4]
 8007430:	e7c7      	b.n	80073c2 <_realloc_r+0x202>
 8007432:	68a3      	ldr	r3, [r4, #8]
 8007434:	2a24      	cmp	r2, #36	@ 0x24
 8007436:	612b      	str	r3, [r5, #16]
 8007438:	68e3      	ldr	r3, [r4, #12]
 800743a:	bf18      	it	ne
 800743c:	f105 0018 	addne.w	r0, r5, #24
 8007440:	616b      	str	r3, [r5, #20]
 8007442:	bf09      	itett	eq
 8007444:	6923      	ldreq	r3, [r4, #16]
 8007446:	3410      	addne	r4, #16
 8007448:	61ab      	streq	r3, [r5, #24]
 800744a:	6963      	ldreq	r3, [r4, #20]
 800744c:	bf02      	ittt	eq
 800744e:	f105 0020 	addeq.w	r0, r5, #32
 8007452:	61eb      	streq	r3, [r5, #28]
 8007454:	3418      	addeq	r4, #24
 8007456:	e7e4      	b.n	8007422 <_realloc_r+0x262>
 8007458:	4621      	mov	r1, r4
 800745a:	f7ff fe1c 	bl	8007096 <memmove>
 800745e:	e7e6      	b.n	800742e <_realloc_r+0x26e>
 8007460:	4659      	mov	r1, fp
 8007462:	4650      	mov	r0, sl
 8007464:	f7fc fe6a 	bl	800413c <_malloc_r>
 8007468:	4683      	mov	fp, r0
 800746a:	b918      	cbnz	r0, 8007474 <_realloc_r+0x2b4>
 800746c:	4650      	mov	r0, sl
 800746e:	f7fd f8a5 	bl	80045bc <__malloc_unlock>
 8007472:	e6c4      	b.n	80071fe <_realloc_r+0x3e>
 8007474:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007478:	f1a0 0208 	sub.w	r2, r0, #8
 800747c:	f023 0301 	bic.w	r3, r3, #1
 8007480:	444b      	add	r3, r9
 8007482:	4293      	cmp	r3, r2
 8007484:	d108      	bne.n	8007498 <_realloc_r+0x2d8>
 8007486:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800748a:	f027 0703 	bic.w	r7, r7, #3
 800748e:	4437      	add	r7, r6
 8007490:	e6f5      	b.n	800727e <_realloc_r+0xbe>
 8007492:	bf00      	nop
 8007494:	2000014c 	.word	0x2000014c
 8007498:	1f32      	subs	r2, r6, #4
 800749a:	2a24      	cmp	r2, #36	@ 0x24
 800749c:	d82e      	bhi.n	80074fc <_realloc_r+0x33c>
 800749e:	2a13      	cmp	r2, #19
 80074a0:	d929      	bls.n	80074f6 <_realloc_r+0x336>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	2a1b      	cmp	r2, #27
 80074a6:	6003      	str	r3, [r0, #0]
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	6043      	str	r3, [r0, #4]
 80074ac:	d80e      	bhi.n	80074cc <_realloc_r+0x30c>
 80074ae:	f104 0208 	add.w	r2, r4, #8
 80074b2:	f100 0308 	add.w	r3, r0, #8
 80074b6:	6811      	ldr	r1, [r2, #0]
 80074b8:	6019      	str	r1, [r3, #0]
 80074ba:	6851      	ldr	r1, [r2, #4]
 80074bc:	6059      	str	r1, [r3, #4]
 80074be:	6892      	ldr	r2, [r2, #8]
 80074c0:	609a      	str	r2, [r3, #8]
 80074c2:	4621      	mov	r1, r4
 80074c4:	4650      	mov	r0, sl
 80074c6:	f7fc fd79 	bl	8003fbc <_free_r>
 80074ca:	e73b      	b.n	8007344 <_realloc_r+0x184>
 80074cc:	68a3      	ldr	r3, [r4, #8]
 80074ce:	2a24      	cmp	r2, #36	@ 0x24
 80074d0:	6083      	str	r3, [r0, #8]
 80074d2:	68e3      	ldr	r3, [r4, #12]
 80074d4:	bf18      	it	ne
 80074d6:	f104 0210 	addne.w	r2, r4, #16
 80074da:	60c3      	str	r3, [r0, #12]
 80074dc:	bf09      	itett	eq
 80074de:	6923      	ldreq	r3, [r4, #16]
 80074e0:	f100 0310 	addne.w	r3, r0, #16
 80074e4:	6103      	streq	r3, [r0, #16]
 80074e6:	6961      	ldreq	r1, [r4, #20]
 80074e8:	bf02      	ittt	eq
 80074ea:	f104 0218 	addeq.w	r2, r4, #24
 80074ee:	f100 0318 	addeq.w	r3, r0, #24
 80074f2:	6141      	streq	r1, [r0, #20]
 80074f4:	e7df      	b.n	80074b6 <_realloc_r+0x2f6>
 80074f6:	4603      	mov	r3, r0
 80074f8:	4622      	mov	r2, r4
 80074fa:	e7dc      	b.n	80074b6 <_realloc_r+0x2f6>
 80074fc:	4621      	mov	r1, r4
 80074fe:	f7ff fdca 	bl	8007096 <memmove>
 8007502:	e7de      	b.n	80074c2 <_realloc_r+0x302>
 8007504:	4637      	mov	r7, r6
 8007506:	e6ba      	b.n	800727e <_realloc_r+0xbe>
 8007508:	431f      	orrs	r7, r3
 800750a:	f8c9 7004 	str.w	r7, [r9, #4]
 800750e:	6853      	ldr	r3, [r2, #4]
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	6053      	str	r3, [r2, #4]
 8007516:	e6ce      	b.n	80072b6 <_realloc_r+0xf6>

08007518 <__ascii_wctomb>:
 8007518:	4603      	mov	r3, r0
 800751a:	4608      	mov	r0, r1
 800751c:	b141      	cbz	r1, 8007530 <__ascii_wctomb+0x18>
 800751e:	2aff      	cmp	r2, #255	@ 0xff
 8007520:	d904      	bls.n	800752c <__ascii_wctomb+0x14>
 8007522:	228a      	movs	r2, #138	@ 0x8a
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	4770      	bx	lr
 800752c:	2001      	movs	r0, #1
 800752e:	700a      	strb	r2, [r1, #0]
 8007530:	4770      	bx	lr
	...

08007534 <fiprintf>:
 8007534:	b40e      	push	{r1, r2, r3}
 8007536:	b503      	push	{r0, r1, lr}
 8007538:	4601      	mov	r1, r0
 800753a:	ab03      	add	r3, sp, #12
 800753c:	4805      	ldr	r0, [pc, #20]	@ (8007554 <fiprintf+0x20>)
 800753e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007542:	6800      	ldr	r0, [r0, #0]
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	f000 f839 	bl	80075bc <_vfiprintf_r>
 800754a:	b002      	add	sp, #8
 800754c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007550:	b003      	add	sp, #12
 8007552:	4770      	bx	lr
 8007554:	20000018 	.word	0x20000018

08007558 <__sprint_r>:
 8007558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	6893      	ldr	r3, [r2, #8]
 800755e:	4680      	mov	r8, r0
 8007560:	460e      	mov	r6, r1
 8007562:	4614      	mov	r4, r2
 8007564:	b343      	cbz	r3, 80075b8 <__sprint_r+0x60>
 8007566:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007568:	049d      	lsls	r5, r3, #18
 800756a:	d522      	bpl.n	80075b2 <__sprint_r+0x5a>
 800756c:	6815      	ldr	r5, [r2, #0]
 800756e:	68a0      	ldr	r0, [r4, #8]
 8007570:	3508      	adds	r5, #8
 8007572:	b928      	cbnz	r0, 8007580 <__sprint_r+0x28>
 8007574:	2300      	movs	r3, #0
 8007576:	60a3      	str	r3, [r4, #8]
 8007578:	2300      	movs	r3, #0
 800757a:	6063      	str	r3, [r4, #4]
 800757c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	f04f 0900 	mov.w	r9, #0
 8007584:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8007588:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800758c:	45ca      	cmp	sl, r9
 800758e:	dc05      	bgt.n	800759c <__sprint_r+0x44>
 8007590:	68a3      	ldr	r3, [r4, #8]
 8007592:	f027 0703 	bic.w	r7, r7, #3
 8007596:	1bdb      	subs	r3, r3, r7
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	e7e8      	b.n	800756e <__sprint_r+0x16>
 800759c:	4632      	mov	r2, r6
 800759e:	4640      	mov	r0, r8
 80075a0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80075a4:	f000 feb7 	bl	8008316 <_fputwc_r>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d0e3      	beq.n	8007574 <__sprint_r+0x1c>
 80075ac:	f109 0901 	add.w	r9, r9, #1
 80075b0:	e7ec      	b.n	800758c <__sprint_r+0x34>
 80075b2:	f000 fccd 	bl	8007f50 <__sfvwrite_r>
 80075b6:	e7dd      	b.n	8007574 <__sprint_r+0x1c>
 80075b8:	4618      	mov	r0, r3
 80075ba:	e7dd      	b.n	8007578 <__sprint_r+0x20>

080075bc <_vfiprintf_r>:
 80075bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	b0bb      	sub	sp, #236	@ 0xec
 80075c2:	460f      	mov	r7, r1
 80075c4:	4693      	mov	fp, r2
 80075c6:	461c      	mov	r4, r3
 80075c8:	461d      	mov	r5, r3
 80075ca:	9000      	str	r0, [sp, #0]
 80075cc:	b118      	cbz	r0, 80075d6 <_vfiprintf_r+0x1a>
 80075ce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80075d0:	b90b      	cbnz	r3, 80075d6 <_vfiprintf_r+0x1a>
 80075d2:	f7fc fb5f 	bl	8003c94 <__sinit>
 80075d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075d8:	07db      	lsls	r3, r3, #31
 80075da:	d405      	bmi.n	80075e8 <_vfiprintf_r+0x2c>
 80075dc:	89bb      	ldrh	r3, [r7, #12]
 80075de:	059e      	lsls	r6, r3, #22
 80075e0:	d402      	bmi.n	80075e8 <_vfiprintf_r+0x2c>
 80075e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80075e4:	f7fc fc82 	bl	8003eec <__retarget_lock_acquire_recursive>
 80075e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80075ec:	0498      	lsls	r0, r3, #18
 80075ee:	d406      	bmi.n	80075fe <_vfiprintf_r+0x42>
 80075f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80075f4:	81bb      	strh	r3, [r7, #12]
 80075f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80075fe:	89bb      	ldrh	r3, [r7, #12]
 8007600:	0719      	lsls	r1, r3, #28
 8007602:	d501      	bpl.n	8007608 <_vfiprintf_r+0x4c>
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	b9ab      	cbnz	r3, 8007634 <_vfiprintf_r+0x78>
 8007608:	4639      	mov	r1, r7
 800760a:	9800      	ldr	r0, [sp, #0]
 800760c:	f000 fdec 	bl	80081e8 <__swsetup_r>
 8007610:	b180      	cbz	r0, 8007634 <_vfiprintf_r+0x78>
 8007612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007614:	07da      	lsls	r2, r3, #31
 8007616:	d506      	bpl.n	8007626 <_vfiprintf_r+0x6a>
 8007618:	f04f 33ff 	mov.w	r3, #4294967295
 800761c:	9303      	str	r3, [sp, #12]
 800761e:	9803      	ldr	r0, [sp, #12]
 8007620:	b03b      	add	sp, #236	@ 0xec
 8007622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007626:	89bb      	ldrh	r3, [r7, #12]
 8007628:	059b      	lsls	r3, r3, #22
 800762a:	d4f5      	bmi.n	8007618 <_vfiprintf_r+0x5c>
 800762c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800762e:	f7fc fc5e 	bl	8003eee <__retarget_lock_release_recursive>
 8007632:	e7f1      	b.n	8007618 <_vfiprintf_r+0x5c>
 8007634:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007638:	f003 021a 	and.w	r2, r3, #26
 800763c:	2a0a      	cmp	r2, #10
 800763e:	d114      	bne.n	800766a <_vfiprintf_r+0xae>
 8007640:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007644:	2a00      	cmp	r2, #0
 8007646:	db10      	blt.n	800766a <_vfiprintf_r+0xae>
 8007648:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800764a:	07d6      	lsls	r6, r2, #31
 800764c:	d404      	bmi.n	8007658 <_vfiprintf_r+0x9c>
 800764e:	059d      	lsls	r5, r3, #22
 8007650:	d402      	bmi.n	8007658 <_vfiprintf_r+0x9c>
 8007652:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007654:	f7fc fc4b 	bl	8003eee <__retarget_lock_release_recursive>
 8007658:	4623      	mov	r3, r4
 800765a:	465a      	mov	r2, fp
 800765c:	4639      	mov	r1, r7
 800765e:	9800      	ldr	r0, [sp, #0]
 8007660:	b03b      	add	sp, #236	@ 0xec
 8007662:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007666:	f000 bc33 	b.w	8007ed0 <__sbprintf>
 800766a:	2300      	movs	r3, #0
 800766c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8007670:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007674:	ae11      	add	r6, sp, #68	@ 0x44
 8007676:	960e      	str	r6, [sp, #56]	@ 0x38
 8007678:	9307      	str	r3, [sp, #28]
 800767a:	9309      	str	r3, [sp, #36]	@ 0x24
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	465b      	mov	r3, fp
 8007680:	461c      	mov	r4, r3
 8007682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007686:	b10a      	cbz	r2, 800768c <_vfiprintf_r+0xd0>
 8007688:	2a25      	cmp	r2, #37	@ 0x25
 800768a:	d1f9      	bne.n	8007680 <_vfiprintf_r+0xc4>
 800768c:	ebb4 080b 	subs.w	r8, r4, fp
 8007690:	d00d      	beq.n	80076ae <_vfiprintf_r+0xf2>
 8007692:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007694:	e9c6 b800 	strd	fp, r8, [r6]
 8007698:	4443      	add	r3, r8
 800769a:	9310      	str	r3, [sp, #64]	@ 0x40
 800769c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800769e:	3301      	adds	r3, #1
 80076a0:	2b07      	cmp	r3, #7
 80076a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076a4:	dc75      	bgt.n	8007792 <_vfiprintf_r+0x1d6>
 80076a6:	3608      	adds	r6, #8
 80076a8:	9b03      	ldr	r3, [sp, #12]
 80076aa:	4443      	add	r3, r8
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	7823      	ldrb	r3, [r4, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 83cf 	beq.w	8007e54 <_vfiprintf_r+0x898>
 80076b6:	2300      	movs	r3, #0
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	469a      	mov	sl, r3
 80076be:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80076c2:	3401      	adds	r4, #1
 80076c4:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80076c8:	46a3      	mov	fp, r4
 80076ca:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80076ce:	f1a3 0220 	sub.w	r2, r3, #32
 80076d2:	2a5a      	cmp	r2, #90	@ 0x5a
 80076d4:	f200 8313 	bhi.w	8007cfe <_vfiprintf_r+0x742>
 80076d8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80076dc:	0311009a 	.word	0x0311009a
 80076e0:	00a20311 	.word	0x00a20311
 80076e4:	03110311 	.word	0x03110311
 80076e8:	00820311 	.word	0x00820311
 80076ec:	03110311 	.word	0x03110311
 80076f0:	00af00a5 	.word	0x00af00a5
 80076f4:	00ac0311 	.word	0x00ac0311
 80076f8:	031100b1 	.word	0x031100b1
 80076fc:	00d000cd 	.word	0x00d000cd
 8007700:	00d000d0 	.word	0x00d000d0
 8007704:	00d000d0 	.word	0x00d000d0
 8007708:	00d000d0 	.word	0x00d000d0
 800770c:	00d000d0 	.word	0x00d000d0
 8007710:	03110311 	.word	0x03110311
 8007714:	03110311 	.word	0x03110311
 8007718:	03110311 	.word	0x03110311
 800771c:	03110311 	.word	0x03110311
 8007720:	00f70311 	.word	0x00f70311
 8007724:	03110104 	.word	0x03110104
 8007728:	03110311 	.word	0x03110311
 800772c:	03110311 	.word	0x03110311
 8007730:	03110311 	.word	0x03110311
 8007734:	03110311 	.word	0x03110311
 8007738:	01510311 	.word	0x01510311
 800773c:	03110311 	.word	0x03110311
 8007740:	01980311 	.word	0x01980311
 8007744:	02770311 	.word	0x02770311
 8007748:	03110311 	.word	0x03110311
 800774c:	03110297 	.word	0x03110297
 8007750:	03110311 	.word	0x03110311
 8007754:	03110311 	.word	0x03110311
 8007758:	03110311 	.word	0x03110311
 800775c:	03110311 	.word	0x03110311
 8007760:	00f70311 	.word	0x00f70311
 8007764:	03110106 	.word	0x03110106
 8007768:	03110311 	.word	0x03110311
 800776c:	010600e0 	.word	0x010600e0
 8007770:	031100f1 	.word	0x031100f1
 8007774:	031100eb 	.word	0x031100eb
 8007778:	01530131 	.word	0x01530131
 800777c:	00f10188 	.word	0x00f10188
 8007780:	01980311 	.word	0x01980311
 8007784:	02790098 	.word	0x02790098
 8007788:	03110311 	.word	0x03110311
 800778c:	03110065 	.word	0x03110065
 8007790:	0098      	.short	0x0098
 8007792:	4639      	mov	r1, r7
 8007794:	9800      	ldr	r0, [sp, #0]
 8007796:	aa0e      	add	r2, sp, #56	@ 0x38
 8007798:	f7ff fede 	bl	8007558 <__sprint_r>
 800779c:	2800      	cmp	r0, #0
 800779e:	f040 8338 	bne.w	8007e12 <_vfiprintf_r+0x856>
 80077a2:	ae11      	add	r6, sp, #68	@ 0x44
 80077a4:	e780      	b.n	80076a8 <_vfiprintf_r+0xec>
 80077a6:	4a98      	ldr	r2, [pc, #608]	@ (8007a08 <_vfiprintf_r+0x44c>)
 80077a8:	9205      	str	r2, [sp, #20]
 80077aa:	f01a 0220 	ands.w	r2, sl, #32
 80077ae:	f000 822e 	beq.w	8007c0e <_vfiprintf_r+0x652>
 80077b2:	3507      	adds	r5, #7
 80077b4:	f025 0507 	bic.w	r5, r5, #7
 80077b8:	46a8      	mov	r8, r5
 80077ba:	686d      	ldr	r5, [r5, #4]
 80077bc:	f858 4b08 	ldr.w	r4, [r8], #8
 80077c0:	f01a 0f01 	tst.w	sl, #1
 80077c4:	d009      	beq.n	80077da <_vfiprintf_r+0x21e>
 80077c6:	ea54 0205 	orrs.w	r2, r4, r5
 80077ca:	bf1f      	itttt	ne
 80077cc:	2230      	movne	r2, #48	@ 0x30
 80077ce:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80077d2:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80077d6:	f04a 0a02 	orrne.w	sl, sl, #2
 80077da:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80077de:	e111      	b.n	8007a04 <_vfiprintf_r+0x448>
 80077e0:	9800      	ldr	r0, [sp, #0]
 80077e2:	f7fe f9bf 	bl	8005b64 <_localeconv_r>
 80077e6:	6843      	ldr	r3, [r0, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ec:	f7f8 fcb0 	bl	8000150 <strlen>
 80077f0:	9007      	str	r0, [sp, #28]
 80077f2:	9800      	ldr	r0, [sp, #0]
 80077f4:	f7fe f9b6 	bl	8005b64 <_localeconv_r>
 80077f8:	6883      	ldr	r3, [r0, #8]
 80077fa:	9306      	str	r3, [sp, #24]
 80077fc:	9b07      	ldr	r3, [sp, #28]
 80077fe:	b12b      	cbz	r3, 800780c <_vfiprintf_r+0x250>
 8007800:	9b06      	ldr	r3, [sp, #24]
 8007802:	b11b      	cbz	r3, 800780c <_vfiprintf_r+0x250>
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	b10b      	cbz	r3, 800780c <_vfiprintf_r+0x250>
 8007808:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800780c:	465c      	mov	r4, fp
 800780e:	e75b      	b.n	80076c8 <_vfiprintf_r+0x10c>
 8007810:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f9      	bne.n	800780c <_vfiprintf_r+0x250>
 8007818:	2320      	movs	r3, #32
 800781a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800781e:	e7f5      	b.n	800780c <_vfiprintf_r+0x250>
 8007820:	f04a 0a01 	orr.w	sl, sl, #1
 8007824:	e7f2      	b.n	800780c <_vfiprintf_r+0x250>
 8007826:	f855 3b04 	ldr.w	r3, [r5], #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	9302      	str	r3, [sp, #8]
 800782e:	daed      	bge.n	800780c <_vfiprintf_r+0x250>
 8007830:	425b      	negs	r3, r3
 8007832:	9302      	str	r3, [sp, #8]
 8007834:	f04a 0a04 	orr.w	sl, sl, #4
 8007838:	e7e8      	b.n	800780c <_vfiprintf_r+0x250>
 800783a:	232b      	movs	r3, #43	@ 0x2b
 800783c:	e7ed      	b.n	800781a <_vfiprintf_r+0x25e>
 800783e:	465a      	mov	r2, fp
 8007840:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007844:	2b2a      	cmp	r3, #42	@ 0x2a
 8007846:	d112      	bne.n	800786e <_vfiprintf_r+0x2b2>
 8007848:	f855 3b04 	ldr.w	r3, [r5], #4
 800784c:	4693      	mov	fp, r2
 800784e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	e7da      	b.n	800780c <_vfiprintf_r+0x250>
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	fb00 1303 	mla	r3, r0, r3, r1
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007862:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8007866:	2909      	cmp	r1, #9
 8007868:	d9f5      	bls.n	8007856 <_vfiprintf_r+0x29a>
 800786a:	4693      	mov	fp, r2
 800786c:	e72f      	b.n	80076ce <_vfiprintf_r+0x112>
 800786e:	2100      	movs	r1, #0
 8007870:	200a      	movs	r0, #10
 8007872:	9101      	str	r1, [sp, #4]
 8007874:	e7f5      	b.n	8007862 <_vfiprintf_r+0x2a6>
 8007876:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800787a:	e7c7      	b.n	800780c <_vfiprintf_r+0x250>
 800787c:	2100      	movs	r1, #0
 800787e:	465a      	mov	r2, fp
 8007880:	200a      	movs	r0, #10
 8007882:	9102      	str	r1, [sp, #8]
 8007884:	9902      	ldr	r1, [sp, #8]
 8007886:	3b30      	subs	r3, #48	@ 0x30
 8007888:	fb00 3301 	mla	r3, r0, r1, r3
 800788c:	9302      	str	r3, [sp, #8]
 800788e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007892:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8007896:	2909      	cmp	r1, #9
 8007898:	d9f4      	bls.n	8007884 <_vfiprintf_r+0x2c8>
 800789a:	e7e6      	b.n	800786a <_vfiprintf_r+0x2ae>
 800789c:	f89b 3000 	ldrb.w	r3, [fp]
 80078a0:	2b68      	cmp	r3, #104	@ 0x68
 80078a2:	bf06      	itte	eq
 80078a4:	f10b 0b01 	addeq.w	fp, fp, #1
 80078a8:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 80078ac:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 80078b0:	e7ac      	b.n	800780c <_vfiprintf_r+0x250>
 80078b2:	f89b 3000 	ldrb.w	r3, [fp]
 80078b6:	2b6c      	cmp	r3, #108	@ 0x6c
 80078b8:	d104      	bne.n	80078c4 <_vfiprintf_r+0x308>
 80078ba:	f10b 0b01 	add.w	fp, fp, #1
 80078be:	f04a 0a20 	orr.w	sl, sl, #32
 80078c2:	e7a3      	b.n	800780c <_vfiprintf_r+0x250>
 80078c4:	f04a 0a10 	orr.w	sl, sl, #16
 80078c8:	e7a0      	b.n	800780c <_vfiprintf_r+0x250>
 80078ca:	46a8      	mov	r8, r5
 80078cc:	2400      	movs	r4, #0
 80078ce:	f858 3b04 	ldr.w	r3, [r8], #4
 80078d2:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80078d6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80078da:	2301      	movs	r3, #1
 80078dc:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	e0a8      	b.n	8007a36 <_vfiprintf_r+0x47a>
 80078e4:	f04a 0a10 	orr.w	sl, sl, #16
 80078e8:	f01a 0f20 	tst.w	sl, #32
 80078ec:	d010      	beq.n	8007910 <_vfiprintf_r+0x354>
 80078ee:	3507      	adds	r5, #7
 80078f0:	f025 0507 	bic.w	r5, r5, #7
 80078f4:	46a8      	mov	r8, r5
 80078f6:	686d      	ldr	r5, [r5, #4]
 80078f8:	f858 4b08 	ldr.w	r4, [r8], #8
 80078fc:	2d00      	cmp	r5, #0
 80078fe:	da05      	bge.n	800790c <_vfiprintf_r+0x350>
 8007900:	232d      	movs	r3, #45	@ 0x2d
 8007902:	4264      	negs	r4, r4
 8007904:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8007908:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800790c:	2301      	movs	r3, #1
 800790e:	e048      	b.n	80079a2 <_vfiprintf_r+0x3e6>
 8007910:	46a8      	mov	r8, r5
 8007912:	f01a 0f10 	tst.w	sl, #16
 8007916:	f858 5b04 	ldr.w	r5, [r8], #4
 800791a:	d002      	beq.n	8007922 <_vfiprintf_r+0x366>
 800791c:	462c      	mov	r4, r5
 800791e:	17ed      	asrs	r5, r5, #31
 8007920:	e7ec      	b.n	80078fc <_vfiprintf_r+0x340>
 8007922:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8007926:	d003      	beq.n	8007930 <_vfiprintf_r+0x374>
 8007928:	b22c      	sxth	r4, r5
 800792a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800792e:	e7e5      	b.n	80078fc <_vfiprintf_r+0x340>
 8007930:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8007934:	d0f2      	beq.n	800791c <_vfiprintf_r+0x360>
 8007936:	b26c      	sxtb	r4, r5
 8007938:	f345 15c0 	sbfx	r5, r5, #7, #1
 800793c:	e7de      	b.n	80078fc <_vfiprintf_r+0x340>
 800793e:	f01a 0f20 	tst.w	sl, #32
 8007942:	d007      	beq.n	8007954 <_vfiprintf_r+0x398>
 8007944:	9a03      	ldr	r2, [sp, #12]
 8007946:	682b      	ldr	r3, [r5, #0]
 8007948:	9903      	ldr	r1, [sp, #12]
 800794a:	17d2      	asrs	r2, r2, #31
 800794c:	e9c3 1200 	strd	r1, r2, [r3]
 8007950:	3504      	adds	r5, #4
 8007952:	e694      	b.n	800767e <_vfiprintf_r+0xc2>
 8007954:	f01a 0f10 	tst.w	sl, #16
 8007958:	d003      	beq.n	8007962 <_vfiprintf_r+0x3a6>
 800795a:	682b      	ldr	r3, [r5, #0]
 800795c:	9a03      	ldr	r2, [sp, #12]
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e7f6      	b.n	8007950 <_vfiprintf_r+0x394>
 8007962:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8007966:	d003      	beq.n	8007970 <_vfiprintf_r+0x3b4>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	9a03      	ldr	r2, [sp, #12]
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e7ef      	b.n	8007950 <_vfiprintf_r+0x394>
 8007970:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8007974:	d0f1      	beq.n	800795a <_vfiprintf_r+0x39e>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	9a03      	ldr	r2, [sp, #12]
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e7e8      	b.n	8007950 <_vfiprintf_r+0x394>
 800797e:	f04a 0a10 	orr.w	sl, sl, #16
 8007982:	f01a 0320 	ands.w	r3, sl, #32
 8007986:	d01f      	beq.n	80079c8 <_vfiprintf_r+0x40c>
 8007988:	3507      	adds	r5, #7
 800798a:	f025 0507 	bic.w	r5, r5, #7
 800798e:	46a8      	mov	r8, r5
 8007990:	686d      	ldr	r5, [r5, #4]
 8007992:	f858 4b08 	ldr.w	r4, [r8], #8
 8007996:	2300      	movs	r3, #0
 8007998:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800799c:	2200      	movs	r2, #0
 800799e:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80079a2:	9a01      	ldr	r2, [sp, #4]
 80079a4:	3201      	adds	r2, #1
 80079a6:	f000 8262 	beq.w	8007e6e <_vfiprintf_r+0x8b2>
 80079aa:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 80079ae:	9204      	str	r2, [sp, #16]
 80079b0:	ea54 0205 	orrs.w	r2, r4, r5
 80079b4:	f040 8261 	bne.w	8007e7a <_vfiprintf_r+0x8be>
 80079b8:	9a01      	ldr	r2, [sp, #4]
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	f000 8196 	beq.w	8007cec <_vfiprintf_r+0x730>
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	f040 825d 	bne.w	8007e80 <_vfiprintf_r+0x8c4>
 80079c6:	e139      	b.n	8007c3c <_vfiprintf_r+0x680>
 80079c8:	46a8      	mov	r8, r5
 80079ca:	f01a 0510 	ands.w	r5, sl, #16
 80079ce:	f858 4b04 	ldr.w	r4, [r8], #4
 80079d2:	d001      	beq.n	80079d8 <_vfiprintf_r+0x41c>
 80079d4:	461d      	mov	r5, r3
 80079d6:	e7de      	b.n	8007996 <_vfiprintf_r+0x3da>
 80079d8:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80079dc:	d001      	beq.n	80079e2 <_vfiprintf_r+0x426>
 80079de:	b2a4      	uxth	r4, r4
 80079e0:	e7d9      	b.n	8007996 <_vfiprintf_r+0x3da>
 80079e2:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80079e6:	d0d6      	beq.n	8007996 <_vfiprintf_r+0x3da>
 80079e8:	b2e4      	uxtb	r4, r4
 80079ea:	e7f3      	b.n	80079d4 <_vfiprintf_r+0x418>
 80079ec:	f647 0330 	movw	r3, #30768	@ 0x7830
 80079f0:	46a8      	mov	r8, r5
 80079f2:	2500      	movs	r5, #0
 80079f4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80079f8:	4b03      	ldr	r3, [pc, #12]	@ (8007a08 <_vfiprintf_r+0x44c>)
 80079fa:	f858 4b04 	ldr.w	r4, [r8], #4
 80079fe:	f04a 0a02 	orr.w	sl, sl, #2
 8007a02:	9305      	str	r3, [sp, #20]
 8007a04:	2302      	movs	r3, #2
 8007a06:	e7c9      	b.n	800799c <_vfiprintf_r+0x3e0>
 8007a08:	08009476 	.word	0x08009476
 8007a0c:	46a8      	mov	r8, r5
 8007a0e:	2500      	movs	r5, #0
 8007a10:	9b01      	ldr	r3, [sp, #4]
 8007a12:	f858 9b04 	ldr.w	r9, [r8], #4
 8007a16:	1c5c      	adds	r4, r3, #1
 8007a18:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8007a1c:	f000 80d0 	beq.w	8007bc0 <_vfiprintf_r+0x604>
 8007a20:	461a      	mov	r2, r3
 8007a22:	4629      	mov	r1, r5
 8007a24:	4648      	mov	r0, r9
 8007a26:	f7fe f8d1 	bl	8005bcc <memchr>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	b118      	cbz	r0, 8007a36 <_vfiprintf_r+0x47a>
 8007a2e:	eba0 0309 	sub.w	r3, r0, r9
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	462c      	mov	r4, r5
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	bfb8      	it	lt
 8007a3c:	4623      	movlt	r3, r4
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007a44:	b113      	cbz	r3, 8007a4c <_vfiprintf_r+0x490>
 8007a46:	9b04      	ldr	r3, [sp, #16]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	f01a 0302 	ands.w	r3, sl, #2
 8007a50:	9308      	str	r3, [sp, #32]
 8007a52:	bf1e      	ittt	ne
 8007a54:	9b04      	ldrne	r3, [sp, #16]
 8007a56:	3302      	addne	r3, #2
 8007a58:	9304      	strne	r3, [sp, #16]
 8007a5a:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8007a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a60:	d11f      	bne.n	8007aa2 <_vfiprintf_r+0x4e6>
 8007a62:	9b02      	ldr	r3, [sp, #8]
 8007a64:	9a04      	ldr	r2, [sp, #16]
 8007a66:	1a9d      	subs	r5, r3, r2
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	dd1a      	ble.n	8007aa2 <_vfiprintf_r+0x4e6>
 8007a6c:	4ba9      	ldr	r3, [pc, #676]	@ (8007d14 <_vfiprintf_r+0x758>)
 8007a6e:	2d10      	cmp	r5, #16
 8007a70:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8007a74:	f106 0008 	add.w	r0, r6, #8
 8007a78:	f102 0201 	add.w	r2, r2, #1
 8007a7c:	6033      	str	r3, [r6, #0]
 8007a7e:	f300 814f 	bgt.w	8007d20 <_vfiprintf_r+0x764>
 8007a82:	6075      	str	r5, [r6, #4]
 8007a84:	2a07      	cmp	r2, #7
 8007a86:	440d      	add	r5, r1
 8007a88:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8007a8c:	f340 815d 	ble.w	8007d4a <_vfiprintf_r+0x78e>
 8007a90:	4639      	mov	r1, r7
 8007a92:	9800      	ldr	r0, [sp, #0]
 8007a94:	aa0e      	add	r2, sp, #56	@ 0x38
 8007a96:	f7ff fd5f 	bl	8007558 <__sprint_r>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	f040 81b9 	bne.w	8007e12 <_vfiprintf_r+0x856>
 8007aa0:	ae11      	add	r6, sp, #68	@ 0x44
 8007aa2:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8007aa6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007aaa:	b161      	cbz	r1, 8007ac6 <_vfiprintf_r+0x50a>
 8007aac:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8007ab0:	6031      	str	r1, [r6, #0]
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	440a      	add	r2, r1
 8007ab8:	2b07      	cmp	r3, #7
 8007aba:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007abe:	6071      	str	r1, [r6, #4]
 8007ac0:	f300 8145 	bgt.w	8007d4e <_vfiprintf_r+0x792>
 8007ac4:	3608      	adds	r6, #8
 8007ac6:	9908      	ldr	r1, [sp, #32]
 8007ac8:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007acc:	b159      	cbz	r1, 8007ae6 <_vfiprintf_r+0x52a>
 8007ace:	a90d      	add	r1, sp, #52	@ 0x34
 8007ad0:	6031      	str	r1, [r6, #0]
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	440a      	add	r2, r1
 8007ad8:	2b07      	cmp	r3, #7
 8007ada:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007ade:	6071      	str	r1, [r6, #4]
 8007ae0:	f300 813e 	bgt.w	8007d60 <_vfiprintf_r+0x7a4>
 8007ae4:	3608      	adds	r6, #8
 8007ae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ae8:	2b80      	cmp	r3, #128	@ 0x80
 8007aea:	d11f      	bne.n	8007b2c <_vfiprintf_r+0x570>
 8007aec:	9b02      	ldr	r3, [sp, #8]
 8007aee:	9a04      	ldr	r2, [sp, #16]
 8007af0:	1a9d      	subs	r5, r3, r2
 8007af2:	2d00      	cmp	r5, #0
 8007af4:	dd1a      	ble.n	8007b2c <_vfiprintf_r+0x570>
 8007af6:	4b88      	ldr	r3, [pc, #544]	@ (8007d18 <_vfiprintf_r+0x75c>)
 8007af8:	2d10      	cmp	r5, #16
 8007afa:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8007afe:	f106 0008 	add.w	r0, r6, #8
 8007b02:	f102 0201 	add.w	r2, r2, #1
 8007b06:	6033      	str	r3, [r6, #0]
 8007b08:	f300 8133 	bgt.w	8007d72 <_vfiprintf_r+0x7b6>
 8007b0c:	6075      	str	r5, [r6, #4]
 8007b0e:	2a07      	cmp	r2, #7
 8007b10:	440d      	add	r5, r1
 8007b12:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8007b16:	f340 8141 	ble.w	8007d9c <_vfiprintf_r+0x7e0>
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	9800      	ldr	r0, [sp, #0]
 8007b1e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b20:	f7ff fd1a 	bl	8007558 <__sprint_r>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f040 8174 	bne.w	8007e12 <_vfiprintf_r+0x856>
 8007b2a:	ae11      	add	r6, sp, #68	@ 0x44
 8007b2c:	9b01      	ldr	r3, [sp, #4]
 8007b2e:	1ae4      	subs	r4, r4, r3
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	dd1a      	ble.n	8007b6a <_vfiprintf_r+0x5ae>
 8007b34:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007b38:	4877      	ldr	r0, [pc, #476]	@ (8007d18 <_vfiprintf_r+0x75c>)
 8007b3a:	2c10      	cmp	r4, #16
 8007b3c:	f103 0301 	add.w	r3, r3, #1
 8007b40:	f106 0108 	add.w	r1, r6, #8
 8007b44:	6030      	str	r0, [r6, #0]
 8007b46:	f300 812b 	bgt.w	8007da0 <_vfiprintf_r+0x7e4>
 8007b4a:	6074      	str	r4, [r6, #4]
 8007b4c:	2b07      	cmp	r3, #7
 8007b4e:	4414      	add	r4, r2
 8007b50:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8007b54:	f340 8135 	ble.w	8007dc2 <_vfiprintf_r+0x806>
 8007b58:	4639      	mov	r1, r7
 8007b5a:	9800      	ldr	r0, [sp, #0]
 8007b5c:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b5e:	f7ff fcfb 	bl	8007558 <__sprint_r>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f040 8155 	bne.w	8007e12 <_vfiprintf_r+0x856>
 8007b68:	ae11      	add	r6, sp, #68	@ 0x44
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	9a01      	ldr	r2, [sp, #4]
 8007b6e:	6073      	str	r3, [r6, #4]
 8007b70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b72:	f8c6 9000 	str.w	r9, [r6]
 8007b76:	4413      	add	r3, r2
 8007b78:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	2b07      	cmp	r3, #7
 8007b80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b82:	f300 8120 	bgt.w	8007dc6 <_vfiprintf_r+0x80a>
 8007b86:	f106 0308 	add.w	r3, r6, #8
 8007b8a:	f01a 0f04 	tst.w	sl, #4
 8007b8e:	f040 8122 	bne.w	8007dd6 <_vfiprintf_r+0x81a>
 8007b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b96:	9904      	ldr	r1, [sp, #16]
 8007b98:	428a      	cmp	r2, r1
 8007b9a:	bfac      	ite	ge
 8007b9c:	189b      	addge	r3, r3, r2
 8007b9e:	185b      	addlt	r3, r3, r1
 8007ba0:	9303      	str	r3, [sp, #12]
 8007ba2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ba4:	b13b      	cbz	r3, 8007bb6 <_vfiprintf_r+0x5fa>
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	9800      	ldr	r0, [sp, #0]
 8007baa:	aa0e      	add	r2, sp, #56	@ 0x38
 8007bac:	f7ff fcd4 	bl	8007558 <__sprint_r>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f040 812e 	bne.w	8007e12 <_vfiprintf_r+0x856>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	4645      	mov	r5, r8
 8007bba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bbc:	ae11      	add	r6, sp, #68	@ 0x44
 8007bbe:	e55e      	b.n	800767e <_vfiprintf_r+0xc2>
 8007bc0:	4648      	mov	r0, r9
 8007bc2:	f7f8 fac5 	bl	8000150 <strlen>
 8007bc6:	9001      	str	r0, [sp, #4]
 8007bc8:	e734      	b.n	8007a34 <_vfiprintf_r+0x478>
 8007bca:	f04a 0a10 	orr.w	sl, sl, #16
 8007bce:	f01a 0320 	ands.w	r3, sl, #32
 8007bd2:	d008      	beq.n	8007be6 <_vfiprintf_r+0x62a>
 8007bd4:	3507      	adds	r5, #7
 8007bd6:	f025 0507 	bic.w	r5, r5, #7
 8007bda:	46a8      	mov	r8, r5
 8007bdc:	686d      	ldr	r5, [r5, #4]
 8007bde:	f858 4b08 	ldr.w	r4, [r8], #8
 8007be2:	2301      	movs	r3, #1
 8007be4:	e6da      	b.n	800799c <_vfiprintf_r+0x3e0>
 8007be6:	46a8      	mov	r8, r5
 8007be8:	f01a 0510 	ands.w	r5, sl, #16
 8007bec:	f858 4b04 	ldr.w	r4, [r8], #4
 8007bf0:	d001      	beq.n	8007bf6 <_vfiprintf_r+0x63a>
 8007bf2:	461d      	mov	r5, r3
 8007bf4:	e7f5      	b.n	8007be2 <_vfiprintf_r+0x626>
 8007bf6:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8007bfa:	d001      	beq.n	8007c00 <_vfiprintf_r+0x644>
 8007bfc:	b2a4      	uxth	r4, r4
 8007bfe:	e7f0      	b.n	8007be2 <_vfiprintf_r+0x626>
 8007c00:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8007c04:	d0ed      	beq.n	8007be2 <_vfiprintf_r+0x626>
 8007c06:	b2e4      	uxtb	r4, r4
 8007c08:	e7f3      	b.n	8007bf2 <_vfiprintf_r+0x636>
 8007c0a:	4a44      	ldr	r2, [pc, #272]	@ (8007d1c <_vfiprintf_r+0x760>)
 8007c0c:	e5cc      	b.n	80077a8 <_vfiprintf_r+0x1ec>
 8007c0e:	46a8      	mov	r8, r5
 8007c10:	f01a 0510 	ands.w	r5, sl, #16
 8007c14:	f858 4b04 	ldr.w	r4, [r8], #4
 8007c18:	d001      	beq.n	8007c1e <_vfiprintf_r+0x662>
 8007c1a:	4615      	mov	r5, r2
 8007c1c:	e5d0      	b.n	80077c0 <_vfiprintf_r+0x204>
 8007c1e:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8007c22:	d001      	beq.n	8007c28 <_vfiprintf_r+0x66c>
 8007c24:	b2a4      	uxth	r4, r4
 8007c26:	e5cb      	b.n	80077c0 <_vfiprintf_r+0x204>
 8007c28:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8007c2c:	f43f adc8 	beq.w	80077c0 <_vfiprintf_r+0x204>
 8007c30:	b2e4      	uxtb	r4, r4
 8007c32:	e7f2      	b.n	8007c1a <_vfiprintf_r+0x65e>
 8007c34:	2c0a      	cmp	r4, #10
 8007c36:	f175 0300 	sbcs.w	r3, r5, #0
 8007c3a:	d206      	bcs.n	8007c4a <_vfiprintf_r+0x68e>
 8007c3c:	3430      	adds	r4, #48	@ 0x30
 8007c3e:	b2e4      	uxtb	r4, r4
 8007c40:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8007c44:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8007c48:	e136      	b.n	8007eb8 <_vfiprintf_r+0x8fc>
 8007c4a:	f04f 0a00 	mov.w	sl, #0
 8007c4e:	ab3a      	add	r3, sp, #232	@ 0xe8
 8007c50:	9308      	str	r3, [sp, #32]
 8007c52:	9b04      	ldr	r3, [sp, #16]
 8007c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c5a:	220a      	movs	r2, #10
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f9 f8e5 	bl	8000e30 <__aeabi_uldivmod>
 8007c66:	460b      	mov	r3, r1
 8007c68:	9908      	ldr	r1, [sp, #32]
 8007c6a:	3230      	adds	r2, #48	@ 0x30
 8007c6c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8007c70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c72:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007c74:	f101 39ff 	add.w	r9, r1, #4294967295
 8007c78:	f10a 0a01 	add.w	sl, sl, #1
 8007c7c:	b1e2      	cbz	r2, 8007cb8 <_vfiprintf_r+0x6fc>
 8007c7e:	9a06      	ldr	r2, [sp, #24]
 8007c80:	7812      	ldrb	r2, [r2, #0]
 8007c82:	4552      	cmp	r2, sl
 8007c84:	d118      	bne.n	8007cb8 <_vfiprintf_r+0x6fc>
 8007c86:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8007c8a:	d015      	beq.n	8007cb8 <_vfiprintf_r+0x6fc>
 8007c8c:	2c0a      	cmp	r4, #10
 8007c8e:	f175 0200 	sbcs.w	r2, r5, #0
 8007c92:	d311      	bcc.n	8007cb8 <_vfiprintf_r+0x6fc>
 8007c94:	9308      	str	r3, [sp, #32]
 8007c96:	9b07      	ldr	r3, [sp, #28]
 8007c98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c9a:	eba9 0903 	sub.w	r9, r9, r3
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f7fd ff4c 	bl	8005b3e <strncpy>
 8007ca6:	9b06      	ldr	r3, [sp, #24]
 8007ca8:	785a      	ldrb	r2, [r3, #1]
 8007caa:	9b08      	ldr	r3, [sp, #32]
 8007cac:	b172      	cbz	r2, 8007ccc <_vfiprintf_r+0x710>
 8007cae:	f04f 0a00 	mov.w	sl, #0
 8007cb2:	9a06      	ldr	r2, [sp, #24]
 8007cb4:	3201      	adds	r2, #1
 8007cb6:	9206      	str	r2, [sp, #24]
 8007cb8:	2c0a      	cmp	r4, #10
 8007cba:	f175 0500 	sbcs.w	r5, r5, #0
 8007cbe:	f0c0 80fb 	bcc.w	8007eb8 <_vfiprintf_r+0x8fc>
 8007cc2:	461d      	mov	r5, r3
 8007cc4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007cc6:	f8cd 9020 	str.w	r9, [sp, #32]
 8007cca:	e7c6      	b.n	8007c5a <_vfiprintf_r+0x69e>
 8007ccc:	4692      	mov	sl, r2
 8007cce:	e7f3      	b.n	8007cb8 <_vfiprintf_r+0x6fc>
 8007cd0:	9a05      	ldr	r2, [sp, #20]
 8007cd2:	f004 030f 	and.w	r3, r4, #15
 8007cd6:	5cd3      	ldrb	r3, [r2, r3]
 8007cd8:	0924      	lsrs	r4, r4, #4
 8007cda:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8007cde:	092d      	lsrs	r5, r5, #4
 8007ce0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8007ce4:	ea54 0305 	orrs.w	r3, r4, r5
 8007ce8:	d1f2      	bne.n	8007cd0 <_vfiprintf_r+0x714>
 8007cea:	e0e5      	b.n	8007eb8 <_vfiprintf_r+0x8fc>
 8007cec:	b923      	cbnz	r3, 8007cf8 <_vfiprintf_r+0x73c>
 8007cee:	f01a 0f01 	tst.w	sl, #1
 8007cf2:	d001      	beq.n	8007cf8 <_vfiprintf_r+0x73c>
 8007cf4:	2430      	movs	r4, #48	@ 0x30
 8007cf6:	e7a3      	b.n	8007c40 <_vfiprintf_r+0x684>
 8007cf8:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8007cfc:	e0dc      	b.n	8007eb8 <_vfiprintf_r+0x8fc>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 80a8 	beq.w	8007e54 <_vfiprintf_r+0x898>
 8007d04:	2400      	movs	r4, #0
 8007d06:	46a8      	mov	r8, r5
 8007d08:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8007d0c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8007d10:	e5e3      	b.n	80078da <_vfiprintf_r+0x31e>
 8007d12:	bf00      	nop
 8007d14:	080097df 	.word	0x080097df
 8007d18:	080097cf 	.word	0x080097cf
 8007d1c:	08009487 	.word	0x08009487
 8007d20:	f04f 0c10 	mov.w	ip, #16
 8007d24:	2a07      	cmp	r2, #7
 8007d26:	4461      	add	r1, ip
 8007d28:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007d2c:	f8c6 c004 	str.w	ip, [r6, #4]
 8007d30:	dd08      	ble.n	8007d44 <_vfiprintf_r+0x788>
 8007d32:	4639      	mov	r1, r7
 8007d34:	9800      	ldr	r0, [sp, #0]
 8007d36:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d38:	f7ff fc0e 	bl	8007558 <__sprint_r>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d168      	bne.n	8007e12 <_vfiprintf_r+0x856>
 8007d40:	4b61      	ldr	r3, [pc, #388]	@ (8007ec8 <_vfiprintf_r+0x90c>)
 8007d42:	a811      	add	r0, sp, #68	@ 0x44
 8007d44:	4606      	mov	r6, r0
 8007d46:	3d10      	subs	r5, #16
 8007d48:	e691      	b.n	8007a6e <_vfiprintf_r+0x4b2>
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	e6a9      	b.n	8007aa2 <_vfiprintf_r+0x4e6>
 8007d4e:	4639      	mov	r1, r7
 8007d50:	9800      	ldr	r0, [sp, #0]
 8007d52:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d54:	f7ff fc00 	bl	8007558 <__sprint_r>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d15a      	bne.n	8007e12 <_vfiprintf_r+0x856>
 8007d5c:	ae11      	add	r6, sp, #68	@ 0x44
 8007d5e:	e6b2      	b.n	8007ac6 <_vfiprintf_r+0x50a>
 8007d60:	4639      	mov	r1, r7
 8007d62:	9800      	ldr	r0, [sp, #0]
 8007d64:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d66:	f7ff fbf7 	bl	8007558 <__sprint_r>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d151      	bne.n	8007e12 <_vfiprintf_r+0x856>
 8007d6e:	ae11      	add	r6, sp, #68	@ 0x44
 8007d70:	e6b9      	b.n	8007ae6 <_vfiprintf_r+0x52a>
 8007d72:	f04f 0c10 	mov.w	ip, #16
 8007d76:	2a07      	cmp	r2, #7
 8007d78:	4461      	add	r1, ip
 8007d7a:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007d7e:	f8c6 c004 	str.w	ip, [r6, #4]
 8007d82:	dd08      	ble.n	8007d96 <_vfiprintf_r+0x7da>
 8007d84:	4639      	mov	r1, r7
 8007d86:	9800      	ldr	r0, [sp, #0]
 8007d88:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d8a:	f7ff fbe5 	bl	8007558 <__sprint_r>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d13f      	bne.n	8007e12 <_vfiprintf_r+0x856>
 8007d92:	4b4e      	ldr	r3, [pc, #312]	@ (8007ecc <_vfiprintf_r+0x910>)
 8007d94:	a811      	add	r0, sp, #68	@ 0x44
 8007d96:	4606      	mov	r6, r0
 8007d98:	3d10      	subs	r5, #16
 8007d9a:	e6ad      	b.n	8007af8 <_vfiprintf_r+0x53c>
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	e6c5      	b.n	8007b2c <_vfiprintf_r+0x570>
 8007da0:	2010      	movs	r0, #16
 8007da2:	2b07      	cmp	r3, #7
 8007da4:	4402      	add	r2, r0
 8007da6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007daa:	6070      	str	r0, [r6, #4]
 8007dac:	dd06      	ble.n	8007dbc <_vfiprintf_r+0x800>
 8007dae:	4639      	mov	r1, r7
 8007db0:	9800      	ldr	r0, [sp, #0]
 8007db2:	aa0e      	add	r2, sp, #56	@ 0x38
 8007db4:	f7ff fbd0 	bl	8007558 <__sprint_r>
 8007db8:	bb58      	cbnz	r0, 8007e12 <_vfiprintf_r+0x856>
 8007dba:	a911      	add	r1, sp, #68	@ 0x44
 8007dbc:	460e      	mov	r6, r1
 8007dbe:	3c10      	subs	r4, #16
 8007dc0:	e6b8      	b.n	8007b34 <_vfiprintf_r+0x578>
 8007dc2:	460e      	mov	r6, r1
 8007dc4:	e6d1      	b.n	8007b6a <_vfiprintf_r+0x5ae>
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	9800      	ldr	r0, [sp, #0]
 8007dca:	aa0e      	add	r2, sp, #56	@ 0x38
 8007dcc:	f7ff fbc4 	bl	8007558 <__sprint_r>
 8007dd0:	b9f8      	cbnz	r0, 8007e12 <_vfiprintf_r+0x856>
 8007dd2:	ab11      	add	r3, sp, #68	@ 0x44
 8007dd4:	e6d9      	b.n	8007b8a <_vfiprintf_r+0x5ce>
 8007dd6:	9a02      	ldr	r2, [sp, #8]
 8007dd8:	9904      	ldr	r1, [sp, #16]
 8007dda:	1a54      	subs	r4, r2, r1
 8007ddc:	2c00      	cmp	r4, #0
 8007dde:	f77f aed8 	ble.w	8007b92 <_vfiprintf_r+0x5d6>
 8007de2:	2610      	movs	r6, #16
 8007de4:	4d38      	ldr	r5, [pc, #224]	@ (8007ec8 <_vfiprintf_r+0x90c>)
 8007de6:	2c10      	cmp	r4, #16
 8007de8:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8007dec:	601d      	str	r5, [r3, #0]
 8007dee:	f102 0201 	add.w	r2, r2, #1
 8007df2:	dc1d      	bgt.n	8007e30 <_vfiprintf_r+0x874>
 8007df4:	605c      	str	r4, [r3, #4]
 8007df6:	2a07      	cmp	r2, #7
 8007df8:	440c      	add	r4, r1
 8007dfa:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8007dfe:	f77f aec8 	ble.w	8007b92 <_vfiprintf_r+0x5d6>
 8007e02:	4639      	mov	r1, r7
 8007e04:	9800      	ldr	r0, [sp, #0]
 8007e06:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e08:	f7ff fba6 	bl	8007558 <__sprint_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f43f aec0 	beq.w	8007b92 <_vfiprintf_r+0x5d6>
 8007e12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e14:	07d9      	lsls	r1, r3, #31
 8007e16:	d405      	bmi.n	8007e24 <_vfiprintf_r+0x868>
 8007e18:	89bb      	ldrh	r3, [r7, #12]
 8007e1a:	059a      	lsls	r2, r3, #22
 8007e1c:	d402      	bmi.n	8007e24 <_vfiprintf_r+0x868>
 8007e1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007e20:	f7fc f865 	bl	8003eee <__retarget_lock_release_recursive>
 8007e24:	89bb      	ldrh	r3, [r7, #12]
 8007e26:	065b      	lsls	r3, r3, #25
 8007e28:	f57f abf9 	bpl.w	800761e <_vfiprintf_r+0x62>
 8007e2c:	f7ff bbf4 	b.w	8007618 <_vfiprintf_r+0x5c>
 8007e30:	3110      	adds	r1, #16
 8007e32:	2a07      	cmp	r2, #7
 8007e34:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007e38:	605e      	str	r6, [r3, #4]
 8007e3a:	dc02      	bgt.n	8007e42 <_vfiprintf_r+0x886>
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	3c10      	subs	r4, #16
 8007e40:	e7d1      	b.n	8007de6 <_vfiprintf_r+0x82a>
 8007e42:	4639      	mov	r1, r7
 8007e44:	9800      	ldr	r0, [sp, #0]
 8007e46:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e48:	f7ff fb86 	bl	8007558 <__sprint_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d1e0      	bne.n	8007e12 <_vfiprintf_r+0x856>
 8007e50:	ab11      	add	r3, sp, #68	@ 0x44
 8007e52:	e7f4      	b.n	8007e3e <_vfiprintf_r+0x882>
 8007e54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e56:	b913      	cbnz	r3, 8007e5e <_vfiprintf_r+0x8a2>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e5c:	e7d9      	b.n	8007e12 <_vfiprintf_r+0x856>
 8007e5e:	4639      	mov	r1, r7
 8007e60:	9800      	ldr	r0, [sp, #0]
 8007e62:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e64:	f7ff fb78 	bl	8007558 <__sprint_r>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d0f5      	beq.n	8007e58 <_vfiprintf_r+0x89c>
 8007e6c:	e7d1      	b.n	8007e12 <_vfiprintf_r+0x856>
 8007e6e:	ea54 0205 	orrs.w	r2, r4, r5
 8007e72:	f8cd a010 	str.w	sl, [sp, #16]
 8007e76:	f43f ada3 	beq.w	80079c0 <_vfiprintf_r+0x404>
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	f43f aeda 	beq.w	8007c34 <_vfiprintf_r+0x678>
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8007e86:	f43f af23 	beq.w	8007cd0 <_vfiprintf_r+0x714>
 8007e8a:	f004 0307 	and.w	r3, r4, #7
 8007e8e:	08e4      	lsrs	r4, r4, #3
 8007e90:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8007e94:	08ed      	lsrs	r5, r5, #3
 8007e96:	3330      	adds	r3, #48	@ 0x30
 8007e98:	ea54 0105 	orrs.w	r1, r4, r5
 8007e9c:	464a      	mov	r2, r9
 8007e9e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8007ea2:	d1f2      	bne.n	8007e8a <_vfiprintf_r+0x8ce>
 8007ea4:	9904      	ldr	r1, [sp, #16]
 8007ea6:	07c8      	lsls	r0, r1, #31
 8007ea8:	d506      	bpl.n	8007eb8 <_vfiprintf_r+0x8fc>
 8007eaa:	2b30      	cmp	r3, #48	@ 0x30
 8007eac:	d004      	beq.n	8007eb8 <_vfiprintf_r+0x8fc>
 8007eae:	2330      	movs	r3, #48	@ 0x30
 8007eb0:	f809 3c01 	strb.w	r3, [r9, #-1]
 8007eb4:	f1a2 0902 	sub.w	r9, r2, #2
 8007eb8:	ab3a      	add	r3, sp, #232	@ 0xe8
 8007eba:	eba3 0309 	sub.w	r3, r3, r9
 8007ebe:	9c01      	ldr	r4, [sp, #4]
 8007ec0:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	e5b6      	b.n	8007a36 <_vfiprintf_r+0x47a>
 8007ec8:	080097df 	.word	0x080097df
 8007ecc:	080097cf 	.word	0x080097cf

08007ed0 <__sbprintf>:
 8007ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed2:	461f      	mov	r7, r3
 8007ed4:	898b      	ldrh	r3, [r1, #12]
 8007ed6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8007eda:	f023 0302 	bic.w	r3, r3, #2
 8007ede:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007ee2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007ee4:	4615      	mov	r5, r2
 8007ee6:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ee8:	89cb      	ldrh	r3, [r1, #14]
 8007eea:	4606      	mov	r6, r0
 8007eec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ef0:	69cb      	ldr	r3, [r1, #28]
 8007ef2:	a816      	add	r0, sp, #88	@ 0x58
 8007ef4:	9307      	str	r3, [sp, #28]
 8007ef6:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8007ef8:	460c      	mov	r4, r1
 8007efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007efc:	ab1a      	add	r3, sp, #104	@ 0x68
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f06:	9302      	str	r3, [sp, #8]
 8007f08:	9305      	str	r3, [sp, #20]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9306      	str	r3, [sp, #24]
 8007f0e:	f7fb ffeb 	bl	8003ee8 <__retarget_lock_init_recursive>
 8007f12:	462a      	mov	r2, r5
 8007f14:	463b      	mov	r3, r7
 8007f16:	4669      	mov	r1, sp
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f7ff fb4f 	bl	80075bc <_vfiprintf_r>
 8007f1e:	1e05      	subs	r5, r0, #0
 8007f20:	db07      	blt.n	8007f32 <__sbprintf+0x62>
 8007f22:	4669      	mov	r1, sp
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7fd fde5 	bl	8005af4 <_fflush_r>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	bf18      	it	ne
 8007f2e:	f04f 35ff 	movne.w	r5, #4294967295
 8007f32:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007f36:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007f38:	065b      	lsls	r3, r3, #25
 8007f3a:	bf42      	ittt	mi
 8007f3c:	89a3      	ldrhmi	r3, [r4, #12]
 8007f3e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8007f42:	81a3      	strhmi	r3, [r4, #12]
 8007f44:	f7fb ffd1 	bl	8003eea <__retarget_lock_close_recursive>
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8007f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f50 <__sfvwrite_r>:
 8007f50:	6893      	ldr	r3, [r2, #8]
 8007f52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f56:	4606      	mov	r6, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	4691      	mov	r9, r2
 8007f5c:	b91b      	cbnz	r3, 8007f66 <__sfvwrite_r+0x16>
 8007f5e:	2000      	movs	r0, #0
 8007f60:	b003      	add	sp, #12
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	898b      	ldrh	r3, [r1, #12]
 8007f68:	0718      	lsls	r0, r3, #28
 8007f6a:	d550      	bpl.n	800800e <__sfvwrite_r+0xbe>
 8007f6c:	690b      	ldr	r3, [r1, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d04d      	beq.n	800800e <__sfvwrite_r+0xbe>
 8007f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f76:	f8d9 8000 	ldr.w	r8, [r9]
 8007f7a:	f013 0702 	ands.w	r7, r3, #2
 8007f7e:	d16b      	bne.n	8008058 <__sfvwrite_r+0x108>
 8007f80:	f013 0301 	ands.w	r3, r3, #1
 8007f84:	f000 809c 	beq.w	80080c0 <__sfvwrite_r+0x170>
 8007f88:	4638      	mov	r0, r7
 8007f8a:	46ba      	mov	sl, r7
 8007f8c:	46bb      	mov	fp, r7
 8007f8e:	f1bb 0f00 	cmp.w	fp, #0
 8007f92:	f000 8103 	beq.w	800819c <__sfvwrite_r+0x24c>
 8007f96:	b950      	cbnz	r0, 8007fae <__sfvwrite_r+0x5e>
 8007f98:	465a      	mov	r2, fp
 8007f9a:	210a      	movs	r1, #10
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	f7fd fe15 	bl	8005bcc <memchr>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	f000 8100 	beq.w	80081a8 <__sfvwrite_r+0x258>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	eba0 070a 	sub.w	r7, r0, sl
 8007fae:	6820      	ldr	r0, [r4, #0]
 8007fb0:	6921      	ldr	r1, [r4, #16]
 8007fb2:	455f      	cmp	r7, fp
 8007fb4:	463a      	mov	r2, r7
 8007fb6:	bf28      	it	cs
 8007fb8:	465a      	movcs	r2, fp
 8007fba:	4288      	cmp	r0, r1
 8007fbc:	68a5      	ldr	r5, [r4, #8]
 8007fbe:	6963      	ldr	r3, [r4, #20]
 8007fc0:	f240 80f5 	bls.w	80081ae <__sfvwrite_r+0x25e>
 8007fc4:	441d      	add	r5, r3
 8007fc6:	42aa      	cmp	r2, r5
 8007fc8:	f340 80f1 	ble.w	80081ae <__sfvwrite_r+0x25e>
 8007fcc:	4651      	mov	r1, sl
 8007fce:	462a      	mov	r2, r5
 8007fd0:	f7ff f861 	bl	8007096 <memmove>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	442b      	add	r3, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	f7fd fd89 	bl	8005af4 <_fflush_r>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d167      	bne.n	80080b6 <__sfvwrite_r+0x166>
 8007fe6:	1b7f      	subs	r7, r7, r5
 8007fe8:	f040 80f9 	bne.w	80081de <__sfvwrite_r+0x28e>
 8007fec:	4621      	mov	r1, r4
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7fd fd80 	bl	8005af4 <_fflush_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d15e      	bne.n	80080b6 <__sfvwrite_r+0x166>
 8007ff8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007ffc:	44aa      	add	sl, r5
 8007ffe:	1b5b      	subs	r3, r3, r5
 8008000:	ebab 0b05 	sub.w	fp, fp, r5
 8008004:	f8c9 3008 	str.w	r3, [r9, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1c0      	bne.n	8007f8e <__sfvwrite_r+0x3e>
 800800c:	e7a7      	b.n	8007f5e <__sfvwrite_r+0xe>
 800800e:	4621      	mov	r1, r4
 8008010:	4630      	mov	r0, r6
 8008012:	f000 f8e9 	bl	80081e8 <__swsetup_r>
 8008016:	2800      	cmp	r0, #0
 8008018:	d0ab      	beq.n	8007f72 <__sfvwrite_r+0x22>
 800801a:	f04f 30ff 	mov.w	r0, #4294967295
 800801e:	e79f      	b.n	8007f60 <__sfvwrite_r+0x10>
 8008020:	e9d8 a500 	ldrd	sl, r5, [r8]
 8008024:	f108 0808 	add.w	r8, r8, #8
 8008028:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800802c:	69e1      	ldr	r1, [r4, #28]
 800802e:	2d00      	cmp	r5, #0
 8008030:	d0f6      	beq.n	8008020 <__sfvwrite_r+0xd0>
 8008032:	42bd      	cmp	r5, r7
 8008034:	462b      	mov	r3, r5
 8008036:	4652      	mov	r2, sl
 8008038:	bf28      	it	cs
 800803a:	463b      	movcs	r3, r7
 800803c:	4630      	mov	r0, r6
 800803e:	47d8      	blx	fp
 8008040:	2800      	cmp	r0, #0
 8008042:	dd38      	ble.n	80080b6 <__sfvwrite_r+0x166>
 8008044:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008048:	4482      	add	sl, r0
 800804a:	1a1b      	subs	r3, r3, r0
 800804c:	1a2d      	subs	r5, r5, r0
 800804e:	f8c9 3008 	str.w	r3, [r9, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e8      	bne.n	8008028 <__sfvwrite_r+0xd8>
 8008056:	e782      	b.n	8007f5e <__sfvwrite_r+0xe>
 8008058:	f04f 0a00 	mov.w	sl, #0
 800805c:	4f61      	ldr	r7, [pc, #388]	@ (80081e4 <__sfvwrite_r+0x294>)
 800805e:	4655      	mov	r5, sl
 8008060:	e7e2      	b.n	8008028 <__sfvwrite_r+0xd8>
 8008062:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8008066:	f108 0808 	add.w	r8, r8, #8
 800806a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	68a2      	ldr	r2, [r4, #8]
 8008072:	f1ba 0f00 	cmp.w	sl, #0
 8008076:	d0f4      	beq.n	8008062 <__sfvwrite_r+0x112>
 8008078:	0599      	lsls	r1, r3, #22
 800807a:	d563      	bpl.n	8008144 <__sfvwrite_r+0x1f4>
 800807c:	4552      	cmp	r2, sl
 800807e:	d836      	bhi.n	80080ee <__sfvwrite_r+0x19e>
 8008080:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8008084:	d033      	beq.n	80080ee <__sfvwrite_r+0x19e>
 8008086:	6921      	ldr	r1, [r4, #16]
 8008088:	6965      	ldr	r5, [r4, #20]
 800808a:	eba0 0b01 	sub.w	fp, r0, r1
 800808e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008096:	f10b 0201 	add.w	r2, fp, #1
 800809a:	106d      	asrs	r5, r5, #1
 800809c:	4452      	add	r2, sl
 800809e:	4295      	cmp	r5, r2
 80080a0:	bf38      	it	cc
 80080a2:	4615      	movcc	r5, r2
 80080a4:	055b      	lsls	r3, r3, #21
 80080a6:	d53d      	bpl.n	8008124 <__sfvwrite_r+0x1d4>
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7fc f846 	bl	800413c <_malloc_r>
 80080b0:	b948      	cbnz	r0, 80080c6 <__sfvwrite_r+0x176>
 80080b2:	230c      	movs	r3, #12
 80080b4:	6033      	str	r3, [r6, #0]
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	e7ac      	b.n	800801a <__sfvwrite_r+0xca>
 80080c0:	461f      	mov	r7, r3
 80080c2:	469a      	mov	sl, r3
 80080c4:	e7d1      	b.n	800806a <__sfvwrite_r+0x11a>
 80080c6:	465a      	mov	r2, fp
 80080c8:	6921      	ldr	r1, [r4, #16]
 80080ca:	9001      	str	r0, [sp, #4]
 80080cc:	f7ff f804 	bl	80070d8 <memcpy>
 80080d0:	89a2      	ldrh	r2, [r4, #12]
 80080d2:	9b01      	ldr	r3, [sp, #4]
 80080d4:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80080d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80080dc:	81a2      	strh	r2, [r4, #12]
 80080de:	4652      	mov	r2, sl
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	6165      	str	r5, [r4, #20]
 80080e4:	445b      	add	r3, fp
 80080e6:	eba5 050b 	sub.w	r5, r5, fp
 80080ea:	6023      	str	r3, [r4, #0]
 80080ec:	60a5      	str	r5, [r4, #8]
 80080ee:	4552      	cmp	r2, sl
 80080f0:	bf28      	it	cs
 80080f2:	4652      	movcs	r2, sl
 80080f4:	4655      	mov	r5, sl
 80080f6:	4639      	mov	r1, r7
 80080f8:	6820      	ldr	r0, [r4, #0]
 80080fa:	9201      	str	r2, [sp, #4]
 80080fc:	f7fe ffcb 	bl	8007096 <memmove>
 8008100:	68a3      	ldr	r3, [r4, #8]
 8008102:	9a01      	ldr	r2, [sp, #4]
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	60a3      	str	r3, [r4, #8]
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	4413      	add	r3, r2
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008112:	442f      	add	r7, r5
 8008114:	1b5b      	subs	r3, r3, r5
 8008116:	ebaa 0a05 	sub.w	sl, sl, r5
 800811a:	f8c9 3008 	str.w	r3, [r9, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1a3      	bne.n	800806a <__sfvwrite_r+0x11a>
 8008122:	e71c      	b.n	8007f5e <__sfvwrite_r+0xe>
 8008124:	462a      	mov	r2, r5
 8008126:	4630      	mov	r0, r6
 8008128:	f7ff f84a 	bl	80071c0 <_realloc_r>
 800812c:	4603      	mov	r3, r0
 800812e:	2800      	cmp	r0, #0
 8008130:	d1d5      	bne.n	80080de <__sfvwrite_r+0x18e>
 8008132:	4630      	mov	r0, r6
 8008134:	6921      	ldr	r1, [r4, #16]
 8008136:	f7fb ff41 	bl	8003fbc <_free_r>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	e7b6      	b.n	80080b2 <__sfvwrite_r+0x162>
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	4283      	cmp	r3, r0
 8008148:	d302      	bcc.n	8008150 <__sfvwrite_r+0x200>
 800814a:	6961      	ldr	r1, [r4, #20]
 800814c:	4551      	cmp	r1, sl
 800814e:	d915      	bls.n	800817c <__sfvwrite_r+0x22c>
 8008150:	4552      	cmp	r2, sl
 8008152:	bf28      	it	cs
 8008154:	4652      	movcs	r2, sl
 8008156:	4615      	mov	r5, r2
 8008158:	4639      	mov	r1, r7
 800815a:	f7fe ff9c 	bl	8007096 <memmove>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	6822      	ldr	r2, [r4, #0]
 8008162:	1b5b      	subs	r3, r3, r5
 8008164:	442a      	add	r2, r5
 8008166:	60a3      	str	r3, [r4, #8]
 8008168:	6022      	str	r2, [r4, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1cf      	bne.n	800810e <__sfvwrite_r+0x1be>
 800816e:	4621      	mov	r1, r4
 8008170:	4630      	mov	r0, r6
 8008172:	f7fd fcbf 	bl	8005af4 <_fflush_r>
 8008176:	2800      	cmp	r0, #0
 8008178:	d0c9      	beq.n	800810e <__sfvwrite_r+0x1be>
 800817a:	e79c      	b.n	80080b6 <__sfvwrite_r+0x166>
 800817c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008180:	4553      	cmp	r3, sl
 8008182:	bf28      	it	cs
 8008184:	4653      	movcs	r3, sl
 8008186:	fb93 f3f1 	sdiv	r3, r3, r1
 800818a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800818c:	434b      	muls	r3, r1
 800818e:	463a      	mov	r2, r7
 8008190:	4630      	mov	r0, r6
 8008192:	69e1      	ldr	r1, [r4, #28]
 8008194:	47a8      	blx	r5
 8008196:	1e05      	subs	r5, r0, #0
 8008198:	dcb9      	bgt.n	800810e <__sfvwrite_r+0x1be>
 800819a:	e78c      	b.n	80080b6 <__sfvwrite_r+0x166>
 800819c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80081a0:	2000      	movs	r0, #0
 80081a2:	f108 0808 	add.w	r8, r8, #8
 80081a6:	e6f2      	b.n	8007f8e <__sfvwrite_r+0x3e>
 80081a8:	f10b 0701 	add.w	r7, fp, #1
 80081ac:	e6ff      	b.n	8007fae <__sfvwrite_r+0x5e>
 80081ae:	4293      	cmp	r3, r2
 80081b0:	dc08      	bgt.n	80081c4 <__sfvwrite_r+0x274>
 80081b2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80081b4:	4652      	mov	r2, sl
 80081b6:	4630      	mov	r0, r6
 80081b8:	69e1      	ldr	r1, [r4, #28]
 80081ba:	47a8      	blx	r5
 80081bc:	1e05      	subs	r5, r0, #0
 80081be:	f73f af12 	bgt.w	8007fe6 <__sfvwrite_r+0x96>
 80081c2:	e778      	b.n	80080b6 <__sfvwrite_r+0x166>
 80081c4:	4651      	mov	r1, sl
 80081c6:	9201      	str	r2, [sp, #4]
 80081c8:	f7fe ff65 	bl	8007096 <memmove>
 80081cc:	9a01      	ldr	r2, [sp, #4]
 80081ce:	68a3      	ldr	r3, [r4, #8]
 80081d0:	4615      	mov	r5, r2
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	60a3      	str	r3, [r4, #8]
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	4413      	add	r3, r2
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	e703      	b.n	8007fe6 <__sfvwrite_r+0x96>
 80081de:	2001      	movs	r0, #1
 80081e0:	e70a      	b.n	8007ff8 <__sfvwrite_r+0xa8>
 80081e2:	bf00      	nop
 80081e4:	7ffffc00 	.word	0x7ffffc00

080081e8 <__swsetup_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4b29      	ldr	r3, [pc, #164]	@ (8008290 <__swsetup_r+0xa8>)
 80081ec:	4605      	mov	r5, r0
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	460c      	mov	r4, r1
 80081f2:	b118      	cbz	r0, 80081fc <__swsetup_r+0x14>
 80081f4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80081f6:	b90b      	cbnz	r3, 80081fc <__swsetup_r+0x14>
 80081f8:	f7fb fd4c 	bl	8003c94 <__sinit>
 80081fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008200:	0719      	lsls	r1, r3, #28
 8008202:	d422      	bmi.n	800824a <__swsetup_r+0x62>
 8008204:	06da      	lsls	r2, r3, #27
 8008206:	d407      	bmi.n	8008218 <__swsetup_r+0x30>
 8008208:	2209      	movs	r2, #9
 800820a:	602a      	str	r2, [r5, #0]
 800820c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	e033      	b.n	8008280 <__swsetup_r+0x98>
 8008218:	0758      	lsls	r0, r3, #29
 800821a:	d512      	bpl.n	8008242 <__swsetup_r+0x5a>
 800821c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800821e:	b141      	cbz	r1, 8008232 <__swsetup_r+0x4a>
 8008220:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8008224:	4299      	cmp	r1, r3
 8008226:	d002      	beq.n	800822e <__swsetup_r+0x46>
 8008228:	4628      	mov	r0, r5
 800822a:	f7fb fec7 	bl	8003fbc <_free_r>
 800822e:	2300      	movs	r3, #0
 8008230:	6323      	str	r3, [r4, #48]	@ 0x30
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	2300      	movs	r3, #0
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	f043 0308 	orr.w	r3, r3, #8
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	b94b      	cbnz	r3, 8008262 <__swsetup_r+0x7a>
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008258:	d003      	beq.n	8008262 <__swsetup_r+0x7a>
 800825a:	4621      	mov	r1, r4
 800825c:	4628      	mov	r0, r5
 800825e:	f000 f8c9 	bl	80083f4 <__smakebuf_r>
 8008262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008266:	f013 0201 	ands.w	r2, r3, #1
 800826a:	d00a      	beq.n	8008282 <__swsetup_r+0x9a>
 800826c:	2200      	movs	r2, #0
 800826e:	60a2      	str	r2, [r4, #8]
 8008270:	6962      	ldr	r2, [r4, #20]
 8008272:	4252      	negs	r2, r2
 8008274:	61a2      	str	r2, [r4, #24]
 8008276:	6922      	ldr	r2, [r4, #16]
 8008278:	b942      	cbnz	r2, 800828c <__swsetup_r+0xa4>
 800827a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800827e:	d1c5      	bne.n	800820c <__swsetup_r+0x24>
 8008280:	bd38      	pop	{r3, r4, r5, pc}
 8008282:	0799      	lsls	r1, r3, #30
 8008284:	bf58      	it	pl
 8008286:	6962      	ldrpl	r2, [r4, #20]
 8008288:	60a2      	str	r2, [r4, #8]
 800828a:	e7f4      	b.n	8008276 <__swsetup_r+0x8e>
 800828c:	2000      	movs	r0, #0
 800828e:	e7f7      	b.n	8008280 <__swsetup_r+0x98>
 8008290:	20000018 	.word	0x20000018

08008294 <__fputwc>:
 8008294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008298:	4680      	mov	r8, r0
 800829a:	460f      	mov	r7, r1
 800829c:	4614      	mov	r4, r2
 800829e:	f7fe ff15 	bl	80070cc <__locale_mb_cur_max>
 80082a2:	2801      	cmp	r0, #1
 80082a4:	4605      	mov	r5, r0
 80082a6:	d11b      	bne.n	80082e0 <__fputwc+0x4c>
 80082a8:	1e7b      	subs	r3, r7, #1
 80082aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80082ac:	d818      	bhi.n	80082e0 <__fputwc+0x4c>
 80082ae:	f88d 7004 	strb.w	r7, [sp, #4]
 80082b2:	2600      	movs	r6, #0
 80082b4:	f10d 0904 	add.w	r9, sp, #4
 80082b8:	42ae      	cmp	r6, r5
 80082ba:	d021      	beq.n	8008300 <__fputwc+0x6c>
 80082bc:	68a3      	ldr	r3, [r4, #8]
 80082be:	f816 1009 	ldrb.w	r1, [r6, r9]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	60a3      	str	r3, [r4, #8]
 80082c8:	da04      	bge.n	80082d4 <__fputwc+0x40>
 80082ca:	69a2      	ldr	r2, [r4, #24]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	db1b      	blt.n	8008308 <__fputwc+0x74>
 80082d0:	290a      	cmp	r1, #10
 80082d2:	d019      	beq.n	8008308 <__fputwc+0x74>
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	7019      	strb	r1, [r3, #0]
 80082dc:	3601      	adds	r6, #1
 80082de:	e7eb      	b.n	80082b8 <__fputwc+0x24>
 80082e0:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80082e4:	463a      	mov	r2, r7
 80082e6:	4640      	mov	r0, r8
 80082e8:	a901      	add	r1, sp, #4
 80082ea:	f000 f845 	bl	8008378 <_wcrtomb_r>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	4605      	mov	r5, r0
 80082f2:	d1de      	bne.n	80082b2 <__fputwc+0x1e>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008300:	4638      	mov	r0, r7
 8008302:	b003      	add	sp, #12
 8008304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008308:	4622      	mov	r2, r4
 800830a:	4640      	mov	r0, r8
 800830c:	f000 f8ae 	bl	800846c <__swbuf_r>
 8008310:	3001      	adds	r0, #1
 8008312:	d1e3      	bne.n	80082dc <__fputwc+0x48>
 8008314:	e7f2      	b.n	80082fc <__fputwc+0x68>

08008316 <_fputwc_r>:
 8008316:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	07db      	lsls	r3, r3, #31
 800831c:	4605      	mov	r5, r0
 800831e:	460e      	mov	r6, r1
 8008320:	4614      	mov	r4, r2
 8008322:	d405      	bmi.n	8008330 <_fputwc_r+0x1a>
 8008324:	8993      	ldrh	r3, [r2, #12]
 8008326:	0598      	lsls	r0, r3, #22
 8008328:	d402      	bmi.n	8008330 <_fputwc_r+0x1a>
 800832a:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800832c:	f7fb fdde 	bl	8003eec <__retarget_lock_acquire_recursive>
 8008330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008334:	0499      	lsls	r1, r3, #18
 8008336:	d406      	bmi.n	8008346 <_fputwc_r+0x30>
 8008338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800833c:	81a3      	strh	r3, [r4, #12]
 800833e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008340:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008344:	6663      	str	r3, [r4, #100]	@ 0x64
 8008346:	4622      	mov	r2, r4
 8008348:	4628      	mov	r0, r5
 800834a:	4631      	mov	r1, r6
 800834c:	f7ff ffa2 	bl	8008294 <__fputwc>
 8008350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008352:	4605      	mov	r5, r0
 8008354:	07da      	lsls	r2, r3, #31
 8008356:	d405      	bmi.n	8008364 <_fputwc_r+0x4e>
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	059b      	lsls	r3, r3, #22
 800835c:	d402      	bmi.n	8008364 <_fputwc_r+0x4e>
 800835e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008360:	f7fb fdc5 	bl	8003eee <__retarget_lock_release_recursive>
 8008364:	4628      	mov	r0, r5
 8008366:	bd70      	pop	{r4, r5, r6, pc}

08008368 <abort>:
 8008368:	2006      	movs	r0, #6
 800836a:	b508      	push	{r3, lr}
 800836c:	f000 f8f0 	bl	8008550 <raise>
 8008370:	2001      	movs	r0, #1
 8008372:	f7f9 fdb6 	bl	8001ee2 <_exit>
	...

08008378 <_wcrtomb_r>:
 8008378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837a:	4c09      	ldr	r4, [pc, #36]	@ (80083a0 <_wcrtomb_r+0x28>)
 800837c:	4605      	mov	r5, r0
 800837e:	461e      	mov	r6, r3
 8008380:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8008384:	b085      	sub	sp, #20
 8008386:	b909      	cbnz	r1, 800838c <_wcrtomb_r+0x14>
 8008388:	460a      	mov	r2, r1
 800838a:	a901      	add	r1, sp, #4
 800838c:	47b8      	blx	r7
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	bf01      	itttt	eq
 8008392:	2300      	moveq	r3, #0
 8008394:	6033      	streq	r3, [r6, #0]
 8008396:	238a      	moveq	r3, #138	@ 0x8a
 8008398:	602b      	streq	r3, [r5, #0]
 800839a:	b005      	add	sp, #20
 800839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000554 	.word	0x20000554

080083a4 <__swhatbuf_r>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	460c      	mov	r4, r1
 80083a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ac:	4615      	mov	r5, r2
 80083ae:	2900      	cmp	r1, #0
 80083b0:	461e      	mov	r6, r3
 80083b2:	b096      	sub	sp, #88	@ 0x58
 80083b4:	da07      	bge.n	80083c6 <__swhatbuf_r+0x22>
 80083b6:	89a1      	ldrh	r1, [r4, #12]
 80083b8:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80083bc:	d117      	bne.n	80083ee <__swhatbuf_r+0x4a>
 80083be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083c2:	4608      	mov	r0, r1
 80083c4:	e00f      	b.n	80083e6 <__swhatbuf_r+0x42>
 80083c6:	466a      	mov	r2, sp
 80083c8:	f000 f8ca 	bl	8008560 <_fstat_r>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	dbf2      	blt.n	80083b6 <__swhatbuf_r+0x12>
 80083d0:	9901      	ldr	r1, [sp, #4]
 80083d2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80083d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083de:	4259      	negs	r1, r3
 80083e0:	4159      	adcs	r1, r3
 80083e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083e6:	6031      	str	r1, [r6, #0]
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	b016      	add	sp, #88	@ 0x58
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
 80083ee:	2100      	movs	r1, #0
 80083f0:	2340      	movs	r3, #64	@ 0x40
 80083f2:	e7e6      	b.n	80083c2 <__swhatbuf_r+0x1e>

080083f4 <__smakebuf_r>:
 80083f4:	898b      	ldrh	r3, [r1, #12]
 80083f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083f8:	079d      	lsls	r5, r3, #30
 80083fa:	4606      	mov	r6, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	d507      	bpl.n	8008410 <__smakebuf_r+0x1c>
 8008400:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	2301      	movs	r3, #1
 800840a:	6163      	str	r3, [r4, #20]
 800840c:	b003      	add	sp, #12
 800840e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008410:	466a      	mov	r2, sp
 8008412:	ab01      	add	r3, sp, #4
 8008414:	f7ff ffc6 	bl	80083a4 <__swhatbuf_r>
 8008418:	9f00      	ldr	r7, [sp, #0]
 800841a:	4605      	mov	r5, r0
 800841c:	4639      	mov	r1, r7
 800841e:	4630      	mov	r0, r6
 8008420:	f7fb fe8c 	bl	800413c <_malloc_r>
 8008424:	b948      	cbnz	r0, 800843a <__smakebuf_r+0x46>
 8008426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842a:	059a      	lsls	r2, r3, #22
 800842c:	d4ee      	bmi.n	800840c <__smakebuf_r+0x18>
 800842e:	f023 0303 	bic.w	r3, r3, #3
 8008432:	f043 0302 	orr.w	r3, r3, #2
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	e7e2      	b.n	8008400 <__smakebuf_r+0xc>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	9b01      	ldr	r3, [sp, #4]
 8008448:	6020      	str	r0, [r4, #0]
 800844a:	b15b      	cbz	r3, 8008464 <__smakebuf_r+0x70>
 800844c:	4630      	mov	r0, r6
 800844e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008452:	f000 f897 	bl	8008584 <_isatty_r>
 8008456:	b128      	cbz	r0, 8008464 <__smakebuf_r+0x70>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f023 0303 	bic.w	r3, r3, #3
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	431d      	orrs	r5, r3
 8008468:	81a5      	strh	r5, [r4, #12]
 800846a:	e7cf      	b.n	800840c <__smakebuf_r+0x18>

0800846c <__swbuf_r>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	460e      	mov	r6, r1
 8008470:	4614      	mov	r4, r2
 8008472:	4605      	mov	r5, r0
 8008474:	b118      	cbz	r0, 800847e <__swbuf_r+0x12>
 8008476:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008478:	b90b      	cbnz	r3, 800847e <__swbuf_r+0x12>
 800847a:	f7fb fc0b 	bl	8003c94 <__sinit>
 800847e:	69a3      	ldr	r3, [r4, #24]
 8008480:	60a3      	str	r3, [r4, #8]
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	0719      	lsls	r1, r3, #28
 8008486:	d501      	bpl.n	800848c <__swbuf_r+0x20>
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	b943      	cbnz	r3, 800849e <__swbuf_r+0x32>
 800848c:	4621      	mov	r1, r4
 800848e:	4628      	mov	r0, r5
 8008490:	f7ff feaa 	bl	80081e8 <__swsetup_r>
 8008494:	b118      	cbz	r0, 800849e <__swbuf_r+0x32>
 8008496:	f04f 37ff 	mov.w	r7, #4294967295
 800849a:	4638      	mov	r0, r7
 800849c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800849e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a2:	b2f6      	uxtb	r6, r6
 80084a4:	049a      	lsls	r2, r3, #18
 80084a6:	4637      	mov	r7, r6
 80084a8:	d406      	bmi.n	80084b8 <__swbuf_r+0x4c>
 80084aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084b6:	6663      	str	r3, [r4, #100]	@ 0x64
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	6922      	ldr	r2, [r4, #16]
 80084bc:	1a98      	subs	r0, r3, r2
 80084be:	6963      	ldr	r3, [r4, #20]
 80084c0:	4283      	cmp	r3, r0
 80084c2:	dc05      	bgt.n	80084d0 <__swbuf_r+0x64>
 80084c4:	4621      	mov	r1, r4
 80084c6:	4628      	mov	r0, r5
 80084c8:	f7fd fb14 	bl	8005af4 <_fflush_r>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d1e2      	bne.n	8008496 <__swbuf_r+0x2a>
 80084d0:	68a3      	ldr	r3, [r4, #8]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	60a3      	str	r3, [r4, #8]
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	6022      	str	r2, [r4, #0]
 80084dc:	701e      	strb	r6, [r3, #0]
 80084de:	6962      	ldr	r2, [r4, #20]
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d004      	beq.n	80084f0 <__swbuf_r+0x84>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d5d6      	bpl.n	800849a <__swbuf_r+0x2e>
 80084ec:	2e0a      	cmp	r6, #10
 80084ee:	d1d4      	bne.n	800849a <__swbuf_r+0x2e>
 80084f0:	4621      	mov	r1, r4
 80084f2:	4628      	mov	r0, r5
 80084f4:	f7fd fafe 	bl	8005af4 <_fflush_r>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d0ce      	beq.n	800849a <__swbuf_r+0x2e>
 80084fc:	e7cb      	b.n	8008496 <__swbuf_r+0x2a>

080084fe <_raise_r>:
 80084fe:	291f      	cmp	r1, #31
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4605      	mov	r5, r0
 8008504:	460c      	mov	r4, r1
 8008506:	d904      	bls.n	8008512 <_raise_r+0x14>
 8008508:	2316      	movs	r3, #22
 800850a:	6003      	str	r3, [r0, #0]
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	bd38      	pop	{r3, r4, r5, pc}
 8008512:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8008516:	b112      	cbz	r2, 800851e <_raise_r+0x20>
 8008518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800851c:	b94b      	cbnz	r3, 8008532 <_raise_r+0x34>
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f852 	bl	80085c8 <_getpid_r>
 8008524:	4622      	mov	r2, r4
 8008526:	4601      	mov	r1, r0
 8008528:	4628      	mov	r0, r5
 800852a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800852e:	f000 b839 	b.w	80085a4 <_kill_r>
 8008532:	2b01      	cmp	r3, #1
 8008534:	d00a      	beq.n	800854c <_raise_r+0x4e>
 8008536:	1c59      	adds	r1, r3, #1
 8008538:	d103      	bne.n	8008542 <_raise_r+0x44>
 800853a:	2316      	movs	r3, #22
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	2001      	movs	r0, #1
 8008540:	e7e6      	b.n	8008510 <_raise_r+0x12>
 8008542:	2100      	movs	r1, #0
 8008544:	4620      	mov	r0, r4
 8008546:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800854a:	4798      	blx	r3
 800854c:	2000      	movs	r0, #0
 800854e:	e7df      	b.n	8008510 <_raise_r+0x12>

08008550 <raise>:
 8008550:	4b02      	ldr	r3, [pc, #8]	@ (800855c <raise+0xc>)
 8008552:	4601      	mov	r1, r0
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f7ff bfd2 	b.w	80084fe <_raise_r>
 800855a:	bf00      	nop
 800855c:	20000018 	.word	0x20000018

08008560 <_fstat_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	2300      	movs	r3, #0
 8008564:	4d06      	ldr	r5, [pc, #24]	@ (8008580 <_fstat_r+0x20>)
 8008566:	4604      	mov	r4, r0
 8008568:	4608      	mov	r0, r1
 800856a:	4611      	mov	r1, r2
 800856c:	602b      	str	r3, [r5, #0]
 800856e:	f7f9 fd07 	bl	8001f80 <_fstat>
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	d102      	bne.n	800857c <_fstat_r+0x1c>
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	b103      	cbz	r3, 800857c <_fstat_r+0x1c>
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	bd38      	pop	{r3, r4, r5, pc}
 800857e:	bf00      	nop
 8008580:	20000968 	.word	0x20000968

08008584 <_isatty_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	2300      	movs	r3, #0
 8008588:	4d05      	ldr	r5, [pc, #20]	@ (80085a0 <_isatty_r+0x1c>)
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	602b      	str	r3, [r5, #0]
 8008590:	f7f9 fd05 	bl	8001f9e <_isatty>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d102      	bne.n	800859e <_isatty_r+0x1a>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	b103      	cbz	r3, 800859e <_isatty_r+0x1a>
 800859c:	6023      	str	r3, [r4, #0]
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	20000968 	.word	0x20000968

080085a4 <_kill_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	2300      	movs	r3, #0
 80085a8:	4d06      	ldr	r5, [pc, #24]	@ (80085c4 <_kill_r+0x20>)
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	f7f9 fc86 	bl	8001ec2 <_kill>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d102      	bne.n	80085c0 <_kill_r+0x1c>
 80085ba:	682b      	ldr	r3, [r5, #0]
 80085bc:	b103      	cbz	r3, 80085c0 <_kill_r+0x1c>
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	bf00      	nop
 80085c4:	20000968 	.word	0x20000968

080085c8 <_getpid_r>:
 80085c8:	f7f9 bc74 	b.w	8001eb4 <_getpid>

080085cc <pow>:
 80085cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d0:	4614      	mov	r4, r2
 80085d2:	461d      	mov	r5, r3
 80085d4:	4680      	mov	r8, r0
 80085d6:	4689      	mov	r9, r1
 80085d8:	f000 f866 	bl	80086a8 <__ieee754_pow>
 80085dc:	4622      	mov	r2, r4
 80085de:	4606      	mov	r6, r0
 80085e0:	460f      	mov	r7, r1
 80085e2:	462b      	mov	r3, r5
 80085e4:	4620      	mov	r0, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f8 fa10 	bl	8000a0c <__aeabi_dcmpun>
 80085ec:	bbc8      	cbnz	r0, 8008662 <pow+0x96>
 80085ee:	2200      	movs	r2, #0
 80085f0:	2300      	movs	r3, #0
 80085f2:	4640      	mov	r0, r8
 80085f4:	4649      	mov	r1, r9
 80085f6:	f7f8 f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 80085fa:	b1b8      	cbz	r0, 800862c <pow+0x60>
 80085fc:	2200      	movs	r2, #0
 80085fe:	2300      	movs	r3, #0
 8008600:	4620      	mov	r0, r4
 8008602:	4629      	mov	r1, r5
 8008604:	f7f8 f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8008608:	2800      	cmp	r0, #0
 800860a:	d141      	bne.n	8008690 <pow+0xc4>
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	f000 f844 	bl	800869c <finite>
 8008614:	b328      	cbz	r0, 8008662 <pow+0x96>
 8008616:	2200      	movs	r2, #0
 8008618:	2300      	movs	r3, #0
 800861a:	4620      	mov	r0, r4
 800861c:	4629      	mov	r1, r5
 800861e:	f7f8 f9cd 	bl	80009bc <__aeabi_dcmplt>
 8008622:	b1f0      	cbz	r0, 8008662 <pow+0x96>
 8008624:	f7fb fc36 	bl	8003e94 <__errno>
 8008628:	2322      	movs	r3, #34	@ 0x22
 800862a:	e019      	b.n	8008660 <pow+0x94>
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	f000 f834 	bl	800869c <finite>
 8008634:	b9c8      	cbnz	r0, 800866a <pow+0x9e>
 8008636:	4640      	mov	r0, r8
 8008638:	4649      	mov	r1, r9
 800863a:	f000 f82f 	bl	800869c <finite>
 800863e:	b1a0      	cbz	r0, 800866a <pow+0x9e>
 8008640:	4620      	mov	r0, r4
 8008642:	4629      	mov	r1, r5
 8008644:	f000 f82a 	bl	800869c <finite>
 8008648:	b178      	cbz	r0, 800866a <pow+0x9e>
 800864a:	4632      	mov	r2, r6
 800864c:	463b      	mov	r3, r7
 800864e:	4630      	mov	r0, r6
 8008650:	4639      	mov	r1, r7
 8008652:	f7f8 f9db 	bl	8000a0c <__aeabi_dcmpun>
 8008656:	2800      	cmp	r0, #0
 8008658:	d0e4      	beq.n	8008624 <pow+0x58>
 800865a:	f7fb fc1b 	bl	8003e94 <__errno>
 800865e:	2321      	movs	r3, #33	@ 0x21
 8008660:	6003      	str	r3, [r0, #0]
 8008662:	4630      	mov	r0, r6
 8008664:	4639      	mov	r1, r7
 8008666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	4630      	mov	r0, r6
 8008670:	4639      	mov	r1, r7
 8008672:	f7f8 f999 	bl	80009a8 <__aeabi_dcmpeq>
 8008676:	2800      	cmp	r0, #0
 8008678:	d0f3      	beq.n	8008662 <pow+0x96>
 800867a:	4640      	mov	r0, r8
 800867c:	4649      	mov	r1, r9
 800867e:	f000 f80d 	bl	800869c <finite>
 8008682:	2800      	cmp	r0, #0
 8008684:	d0ed      	beq.n	8008662 <pow+0x96>
 8008686:	4620      	mov	r0, r4
 8008688:	4629      	mov	r1, r5
 800868a:	f000 f807 	bl	800869c <finite>
 800868e:	e7c8      	b.n	8008622 <pow+0x56>
 8008690:	2600      	movs	r6, #0
 8008692:	4f01      	ldr	r7, [pc, #4]	@ (8008698 <pow+0xcc>)
 8008694:	e7e5      	b.n	8008662 <pow+0x96>
 8008696:	bf00      	nop
 8008698:	3ff00000 	.word	0x3ff00000

0800869c <finite>:
 800869c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80086a0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80086a4:	0fc0      	lsrs	r0, r0, #31
 80086a6:	4770      	bx	lr

080086a8 <__ieee754_pow>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	b091      	sub	sp, #68	@ 0x44
 80086ae:	e9cd 2300 	strd	r2, r3, [sp]
 80086b2:	468b      	mov	fp, r1
 80086b4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80086b8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80086bc:	4682      	mov	sl, r0
 80086be:	ea57 0001 	orrs.w	r0, r7, r1
 80086c2:	d112      	bne.n	80086ea <__ieee754_pow+0x42>
 80086c4:	4653      	mov	r3, sl
 80086c6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80086ca:	18db      	adds	r3, r3, r3
 80086cc:	4152      	adcs	r2, r2
 80086ce:	4298      	cmp	r0, r3
 80086d0:	4b91      	ldr	r3, [pc, #580]	@ (8008918 <__ieee754_pow+0x270>)
 80086d2:	4193      	sbcs	r3, r2
 80086d4:	f080 84ce 	bcs.w	8009074 <__ieee754_pow+0x9cc>
 80086d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086dc:	4650      	mov	r0, sl
 80086de:	4659      	mov	r1, fp
 80086e0:	f7f7 fd44 	bl	800016c <__adddf3>
 80086e4:	b011      	add	sp, #68	@ 0x44
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	4b8c      	ldr	r3, [pc, #560]	@ (800891c <__ieee754_pow+0x274>)
 80086ec:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80086f0:	429e      	cmp	r6, r3
 80086f2:	465d      	mov	r5, fp
 80086f4:	46d1      	mov	r9, sl
 80086f6:	d807      	bhi.n	8008708 <__ieee754_pow+0x60>
 80086f8:	d102      	bne.n	8008700 <__ieee754_pow+0x58>
 80086fa:	f1ba 0f00 	cmp.w	sl, #0
 80086fe:	d1eb      	bne.n	80086d8 <__ieee754_pow+0x30>
 8008700:	429f      	cmp	r7, r3
 8008702:	d801      	bhi.n	8008708 <__ieee754_pow+0x60>
 8008704:	d10f      	bne.n	8008726 <__ieee754_pow+0x7e>
 8008706:	b171      	cbz	r1, 8008726 <__ieee754_pow+0x7e>
 8008708:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800870c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008710:	ea55 0509 	orrs.w	r5, r5, r9
 8008714:	d1e0      	bne.n	80086d8 <__ieee754_pow+0x30>
 8008716:	e9dd 3200 	ldrd	r3, r2, [sp]
 800871a:	18db      	adds	r3, r3, r3
 800871c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008720:	4152      	adcs	r2, r2
 8008722:	429d      	cmp	r5, r3
 8008724:	e7d4      	b.n	80086d0 <__ieee754_pow+0x28>
 8008726:	2d00      	cmp	r5, #0
 8008728:	4633      	mov	r3, r6
 800872a:	da39      	bge.n	80087a0 <__ieee754_pow+0xf8>
 800872c:	4a7c      	ldr	r2, [pc, #496]	@ (8008920 <__ieee754_pow+0x278>)
 800872e:	4297      	cmp	r7, r2
 8008730:	d84e      	bhi.n	80087d0 <__ieee754_pow+0x128>
 8008732:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008736:	4297      	cmp	r7, r2
 8008738:	f240 84ab 	bls.w	8009092 <__ieee754_pow+0x9ea>
 800873c:	153a      	asrs	r2, r7, #20
 800873e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008742:	2a14      	cmp	r2, #20
 8008744:	dd0f      	ble.n	8008766 <__ieee754_pow+0xbe>
 8008746:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800874a:	fa21 f402 	lsr.w	r4, r1, r2
 800874e:	fa04 f202 	lsl.w	r2, r4, r2
 8008752:	428a      	cmp	r2, r1
 8008754:	f040 849d 	bne.w	8009092 <__ieee754_pow+0x9ea>
 8008758:	f004 0401 	and.w	r4, r4, #1
 800875c:	f1c4 0402 	rsb	r4, r4, #2
 8008760:	2900      	cmp	r1, #0
 8008762:	d15a      	bne.n	800881a <__ieee754_pow+0x172>
 8008764:	e00e      	b.n	8008784 <__ieee754_pow+0xdc>
 8008766:	2900      	cmp	r1, #0
 8008768:	d156      	bne.n	8008818 <__ieee754_pow+0x170>
 800876a:	f1c2 0214 	rsb	r2, r2, #20
 800876e:	fa47 f402 	asr.w	r4, r7, r2
 8008772:	fa04 f202 	lsl.w	r2, r4, r2
 8008776:	42ba      	cmp	r2, r7
 8008778:	f040 8488 	bne.w	800908c <__ieee754_pow+0x9e4>
 800877c:	f004 0401 	and.w	r4, r4, #1
 8008780:	f1c4 0402 	rsb	r4, r4, #2
 8008784:	4a67      	ldr	r2, [pc, #412]	@ (8008924 <__ieee754_pow+0x27c>)
 8008786:	4297      	cmp	r7, r2
 8008788:	d130      	bne.n	80087ec <__ieee754_pow+0x144>
 800878a:	f1b8 0f00 	cmp.w	r8, #0
 800878e:	f280 8479 	bge.w	8009084 <__ieee754_pow+0x9dc>
 8008792:	4652      	mov	r2, sl
 8008794:	465b      	mov	r3, fp
 8008796:	2000      	movs	r0, #0
 8008798:	4962      	ldr	r1, [pc, #392]	@ (8008924 <__ieee754_pow+0x27c>)
 800879a:	f7f7 ffc7 	bl	800072c <__aeabi_ddiv>
 800879e:	e7a1      	b.n	80086e4 <__ieee754_pow+0x3c>
 80087a0:	2400      	movs	r4, #0
 80087a2:	2900      	cmp	r1, #0
 80087a4:	d139      	bne.n	800881a <__ieee754_pow+0x172>
 80087a6:	4a5d      	ldr	r2, [pc, #372]	@ (800891c <__ieee754_pow+0x274>)
 80087a8:	4297      	cmp	r7, r2
 80087aa:	d1eb      	bne.n	8008784 <__ieee754_pow+0xdc>
 80087ac:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80087b0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80087b4:	ea53 0309 	orrs.w	r3, r3, r9
 80087b8:	f000 845c 	beq.w	8009074 <__ieee754_pow+0x9cc>
 80087bc:	4b5a      	ldr	r3, [pc, #360]	@ (8008928 <__ieee754_pow+0x280>)
 80087be:	429e      	cmp	r6, r3
 80087c0:	d908      	bls.n	80087d4 <__ieee754_pow+0x12c>
 80087c2:	f1b8 0f00 	cmp.w	r8, #0
 80087c6:	f2c0 8459 	blt.w	800907c <__ieee754_pow+0x9d4>
 80087ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087ce:	e789      	b.n	80086e4 <__ieee754_pow+0x3c>
 80087d0:	2402      	movs	r4, #2
 80087d2:	e7e6      	b.n	80087a2 <__ieee754_pow+0xfa>
 80087d4:	f1b8 0f00 	cmp.w	r8, #0
 80087d8:	f04f 0000 	mov.w	r0, #0
 80087dc:	f04f 0100 	mov.w	r1, #0
 80087e0:	da80      	bge.n	80086e4 <__ieee754_pow+0x3c>
 80087e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80087e6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80087ea:	e77b      	b.n	80086e4 <__ieee754_pow+0x3c>
 80087ec:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80087f0:	d106      	bne.n	8008800 <__ieee754_pow+0x158>
 80087f2:	4652      	mov	r2, sl
 80087f4:	465b      	mov	r3, fp
 80087f6:	4650      	mov	r0, sl
 80087f8:	4659      	mov	r1, fp
 80087fa:	f7f7 fe6d 	bl	80004d8 <__aeabi_dmul>
 80087fe:	e771      	b.n	80086e4 <__ieee754_pow+0x3c>
 8008800:	4a4a      	ldr	r2, [pc, #296]	@ (800892c <__ieee754_pow+0x284>)
 8008802:	4590      	cmp	r8, r2
 8008804:	d109      	bne.n	800881a <__ieee754_pow+0x172>
 8008806:	2d00      	cmp	r5, #0
 8008808:	db07      	blt.n	800881a <__ieee754_pow+0x172>
 800880a:	4650      	mov	r0, sl
 800880c:	4659      	mov	r1, fp
 800880e:	b011      	add	sp, #68	@ 0x44
 8008810:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	f000 bd12 	b.w	800923c <__ieee754_sqrt>
 8008818:	2400      	movs	r4, #0
 800881a:	4650      	mov	r0, sl
 800881c:	4659      	mov	r1, fp
 800881e:	9302      	str	r3, [sp, #8]
 8008820:	f000 fc6a 	bl	80090f8 <fabs>
 8008824:	9b02      	ldr	r3, [sp, #8]
 8008826:	f1b9 0f00 	cmp.w	r9, #0
 800882a:	d127      	bne.n	800887c <__ieee754_pow+0x1d4>
 800882c:	4a3d      	ldr	r2, [pc, #244]	@ (8008924 <__ieee754_pow+0x27c>)
 800882e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8008832:	4594      	cmp	ip, r2
 8008834:	d000      	beq.n	8008838 <__ieee754_pow+0x190>
 8008836:	bb0e      	cbnz	r6, 800887c <__ieee754_pow+0x1d4>
 8008838:	f1b8 0f00 	cmp.w	r8, #0
 800883c:	da05      	bge.n	800884a <__ieee754_pow+0x1a2>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	2000      	movs	r0, #0
 8008844:	4937      	ldr	r1, [pc, #220]	@ (8008924 <__ieee754_pow+0x27c>)
 8008846:	f7f7 ff71 	bl	800072c <__aeabi_ddiv>
 800884a:	2d00      	cmp	r5, #0
 800884c:	f6bf af4a 	bge.w	80086e4 <__ieee754_pow+0x3c>
 8008850:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008854:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008858:	4326      	orrs	r6, r4
 800885a:	d108      	bne.n	800886e <__ieee754_pow+0x1c6>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4610      	mov	r0, r2
 8008862:	4619      	mov	r1, r3
 8008864:	f7f7 fc80 	bl	8000168 <__aeabi_dsub>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	e795      	b.n	800879a <__ieee754_pow+0xf2>
 800886e:	2c01      	cmp	r4, #1
 8008870:	f47f af38 	bne.w	80086e4 <__ieee754_pow+0x3c>
 8008874:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008878:	4619      	mov	r1, r3
 800887a:	e733      	b.n	80086e4 <__ieee754_pow+0x3c>
 800887c:	0fea      	lsrs	r2, r5, #31
 800887e:	3a01      	subs	r2, #1
 8008880:	ea52 0c04 	orrs.w	ip, r2, r4
 8008884:	d102      	bne.n	800888c <__ieee754_pow+0x1e4>
 8008886:	4652      	mov	r2, sl
 8008888:	465b      	mov	r3, fp
 800888a:	e7e9      	b.n	8008860 <__ieee754_pow+0x1b8>
 800888c:	f04f 0900 	mov.w	r9, #0
 8008890:	3c01      	subs	r4, #1
 8008892:	4314      	orrs	r4, r2
 8008894:	bf14      	ite	ne
 8008896:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8008924 <__ieee754_pow+0x27c>
 800889a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008930 <__ieee754_pow+0x288>
 800889e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80088a2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80088a6:	f240 8107 	bls.w	8008ab8 <__ieee754_pow+0x410>
 80088aa:	4b22      	ldr	r3, [pc, #136]	@ (8008934 <__ieee754_pow+0x28c>)
 80088ac:	429f      	cmp	r7, r3
 80088ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008928 <__ieee754_pow+0x280>)
 80088b0:	d913      	bls.n	80088da <__ieee754_pow+0x232>
 80088b2:	429e      	cmp	r6, r3
 80088b4:	d808      	bhi.n	80088c8 <__ieee754_pow+0x220>
 80088b6:	f1b8 0f00 	cmp.w	r8, #0
 80088ba:	da08      	bge.n	80088ce <__ieee754_pow+0x226>
 80088bc:	2000      	movs	r0, #0
 80088be:	b011      	add	sp, #68	@ 0x44
 80088c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	f000 bcb4 	b.w	8009230 <__math_oflow>
 80088c8:	f1b8 0f00 	cmp.w	r8, #0
 80088cc:	dcf6      	bgt.n	80088bc <__ieee754_pow+0x214>
 80088ce:	2000      	movs	r0, #0
 80088d0:	b011      	add	sp, #68	@ 0x44
 80088d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d6:	f000 bca6 	b.w	8009226 <__math_uflow>
 80088da:	429e      	cmp	r6, r3
 80088dc:	d20c      	bcs.n	80088f8 <__ieee754_pow+0x250>
 80088de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e2:	2200      	movs	r2, #0
 80088e4:	2300      	movs	r3, #0
 80088e6:	f7f8 f869 	bl	80009bc <__aeabi_dcmplt>
 80088ea:	3800      	subs	r0, #0
 80088ec:	bf18      	it	ne
 80088ee:	2001      	movne	r0, #1
 80088f0:	f1b8 0f00 	cmp.w	r8, #0
 80088f4:	daec      	bge.n	80088d0 <__ieee754_pow+0x228>
 80088f6:	e7e2      	b.n	80088be <__ieee754_pow+0x216>
 80088f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008924 <__ieee754_pow+0x27c>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	429e      	cmp	r6, r3
 80088fe:	d91b      	bls.n	8008938 <__ieee754_pow+0x290>
 8008900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008904:	2300      	movs	r3, #0
 8008906:	f7f8 f859 	bl	80009bc <__aeabi_dcmplt>
 800890a:	3800      	subs	r0, #0
 800890c:	bf18      	it	ne
 800890e:	2001      	movne	r0, #1
 8008910:	f1b8 0f00 	cmp.w	r8, #0
 8008914:	dcd3      	bgt.n	80088be <__ieee754_pow+0x216>
 8008916:	e7db      	b.n	80088d0 <__ieee754_pow+0x228>
 8008918:	fff00000 	.word	0xfff00000
 800891c:	7ff00000 	.word	0x7ff00000
 8008920:	433fffff 	.word	0x433fffff
 8008924:	3ff00000 	.word	0x3ff00000
 8008928:	3fefffff 	.word	0x3fefffff
 800892c:	3fe00000 	.word	0x3fe00000
 8008930:	bff00000 	.word	0xbff00000
 8008934:	43f00000 	.word	0x43f00000
 8008938:	4b5b      	ldr	r3, [pc, #364]	@ (8008aa8 <__ieee754_pow+0x400>)
 800893a:	f7f7 fc15 	bl	8000168 <__aeabi_dsub>
 800893e:	a352      	add	r3, pc, #328	@ (adr r3, 8008a88 <__ieee754_pow+0x3e0>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	4604      	mov	r4, r0
 8008946:	460d      	mov	r5, r1
 8008948:	f7f7 fdc6 	bl	80004d8 <__aeabi_dmul>
 800894c:	a350      	add	r3, pc, #320	@ (adr r3, 8008a90 <__ieee754_pow+0x3e8>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	4620      	mov	r0, r4
 8008958:	4629      	mov	r1, r5
 800895a:	f7f7 fdbd 	bl	80004d8 <__aeabi_dmul>
 800895e:	2200      	movs	r2, #0
 8008960:	4682      	mov	sl, r0
 8008962:	468b      	mov	fp, r1
 8008964:	4620      	mov	r0, r4
 8008966:	4629      	mov	r1, r5
 8008968:	4b50      	ldr	r3, [pc, #320]	@ (8008aac <__ieee754_pow+0x404>)
 800896a:	f7f7 fdb5 	bl	80004d8 <__aeabi_dmul>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	a149      	add	r1, pc, #292	@ (adr r1, 8008a98 <__ieee754_pow+0x3f0>)
 8008974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008978:	f7f7 fbf6 	bl	8000168 <__aeabi_dsub>
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	f7f7 fdaa 	bl	80004d8 <__aeabi_dmul>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	2000      	movs	r0, #0
 800898a:	4949      	ldr	r1, [pc, #292]	@ (8008ab0 <__ieee754_pow+0x408>)
 800898c:	f7f7 fbec 	bl	8000168 <__aeabi_dsub>
 8008990:	4622      	mov	r2, r4
 8008992:	4680      	mov	r8, r0
 8008994:	4689      	mov	r9, r1
 8008996:	462b      	mov	r3, r5
 8008998:	4620      	mov	r0, r4
 800899a:	4629      	mov	r1, r5
 800899c:	f7f7 fd9c 	bl	80004d8 <__aeabi_dmul>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4640      	mov	r0, r8
 80089a6:	4649      	mov	r1, r9
 80089a8:	f7f7 fd96 	bl	80004d8 <__aeabi_dmul>
 80089ac:	a33c      	add	r3, pc, #240	@ (adr r3, 8008aa0 <__ieee754_pow+0x3f8>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f7 fd91 	bl	80004d8 <__aeabi_dmul>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4650      	mov	r0, sl
 80089bc:	4659      	mov	r1, fp
 80089be:	f7f7 fbd3 	bl	8000168 <__aeabi_dsub>
 80089c2:	2400      	movs	r4, #0
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4680      	mov	r8, r0
 80089ca:	4689      	mov	r9, r1
 80089cc:	4630      	mov	r0, r6
 80089ce:	4639      	mov	r1, r7
 80089d0:	f7f7 fbcc 	bl	800016c <__adddf3>
 80089d4:	4632      	mov	r2, r6
 80089d6:	463b      	mov	r3, r7
 80089d8:	4620      	mov	r0, r4
 80089da:	460d      	mov	r5, r1
 80089dc:	f7f7 fbc4 	bl	8000168 <__aeabi_dsub>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4640      	mov	r0, r8
 80089e6:	4649      	mov	r1, r9
 80089e8:	f7f7 fbbe 	bl	8000168 <__aeabi_dsub>
 80089ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089f4:	2300      	movs	r3, #0
 80089f6:	9304      	str	r3, [sp, #16]
 80089f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80089fc:	4606      	mov	r6, r0
 80089fe:	460f      	mov	r7, r1
 8008a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a04:	4652      	mov	r2, sl
 8008a06:	465b      	mov	r3, fp
 8008a08:	f7f7 fbae 	bl	8000168 <__aeabi_dsub>
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	462b      	mov	r3, r5
 8008a10:	f7f7 fd62 	bl	80004d8 <__aeabi_dmul>
 8008a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a18:	4680      	mov	r8, r0
 8008a1a:	4689      	mov	r9, r1
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	4639      	mov	r1, r7
 8008a20:	f7f7 fd5a 	bl	80004d8 <__aeabi_dmul>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4640      	mov	r0, r8
 8008a2a:	4649      	mov	r1, r9
 8008a2c:	f7f7 fb9e 	bl	800016c <__adddf3>
 8008a30:	4652      	mov	r2, sl
 8008a32:	465b      	mov	r3, fp
 8008a34:	4606      	mov	r6, r0
 8008a36:	460f      	mov	r7, r1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f7 fd4c 	bl	80004d8 <__aeabi_dmul>
 8008a40:	460b      	mov	r3, r1
 8008a42:	4602      	mov	r2, r0
 8008a44:	4680      	mov	r8, r0
 8008a46:	4689      	mov	r9, r1
 8008a48:	4630      	mov	r0, r6
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	f7f7 fb8e 	bl	800016c <__adddf3>
 8008a50:	4b18      	ldr	r3, [pc, #96]	@ (8008ab4 <__ieee754_pow+0x40c>)
 8008a52:	4604      	mov	r4, r0
 8008a54:	4299      	cmp	r1, r3
 8008a56:	460d      	mov	r5, r1
 8008a58:	468a      	mov	sl, r1
 8008a5a:	468b      	mov	fp, r1
 8008a5c:	f340 82e0 	ble.w	8009020 <__ieee754_pow+0x978>
 8008a60:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008a64:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008a68:	4303      	orrs	r3, r0
 8008a6a:	f000 81df 	beq.w	8008e2c <__ieee754_pow+0x784>
 8008a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	f7f7 ffa1 	bl	80009bc <__aeabi_dcmplt>
 8008a7a:	3800      	subs	r0, #0
 8008a7c:	bf18      	it	ne
 8008a7e:	2001      	movne	r0, #1
 8008a80:	e71d      	b.n	80088be <__ieee754_pow+0x216>
 8008a82:	bf00      	nop
 8008a84:	f3af 8000 	nop.w
 8008a88:	60000000 	.word	0x60000000
 8008a8c:	3ff71547 	.word	0x3ff71547
 8008a90:	f85ddf44 	.word	0xf85ddf44
 8008a94:	3e54ae0b 	.word	0x3e54ae0b
 8008a98:	55555555 	.word	0x55555555
 8008a9c:	3fd55555 	.word	0x3fd55555
 8008aa0:	652b82fe 	.word	0x652b82fe
 8008aa4:	3ff71547 	.word	0x3ff71547
 8008aa8:	3ff00000 	.word	0x3ff00000
 8008aac:	3fd00000 	.word	0x3fd00000
 8008ab0:	3fe00000 	.word	0x3fe00000
 8008ab4:	408fffff 	.word	0x408fffff
 8008ab8:	4ad3      	ldr	r2, [pc, #844]	@ (8008e08 <__ieee754_pow+0x760>)
 8008aba:	402a      	ands	r2, r5
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	f040 817a 	bne.w	8008db6 <__ieee754_pow+0x70e>
 8008ac2:	4bd2      	ldr	r3, [pc, #840]	@ (8008e0c <__ieee754_pow+0x764>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f7f7 fd07 	bl	80004d8 <__aeabi_dmul>
 8008aca:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8008ace:	460b      	mov	r3, r1
 8008ad0:	151a      	asrs	r2, r3, #20
 8008ad2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008ad6:	4422      	add	r2, r4
 8008ad8:	920a      	str	r2, [sp, #40]	@ 0x28
 8008ada:	4acd      	ldr	r2, [pc, #820]	@ (8008e10 <__ieee754_pow+0x768>)
 8008adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ae0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008aea:	dd08      	ble.n	8008afe <__ieee754_pow+0x456>
 8008aec:	4ac9      	ldr	r2, [pc, #804]	@ (8008e14 <__ieee754_pow+0x76c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	f340 8163 	ble.w	8008dba <__ieee754_pow+0x712>
 8008af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008af6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008afa:	3301      	adds	r3, #1
 8008afc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008afe:	2600      	movs	r6, #0
 8008b00:	00f3      	lsls	r3, r6, #3
 8008b02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b04:	4bc4      	ldr	r3, [pc, #784]	@ (8008e18 <__ieee754_pow+0x770>)
 8008b06:	4629      	mov	r1, r5
 8008b08:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b10:	461a      	mov	r2, r3
 8008b12:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008b16:	4623      	mov	r3, r4
 8008b18:	4682      	mov	sl, r0
 8008b1a:	f7f7 fb25 	bl	8000168 <__aeabi_dsub>
 8008b1e:	4652      	mov	r2, sl
 8008b20:	462b      	mov	r3, r5
 8008b22:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008b26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b2a:	f7f7 fb1f 	bl	800016c <__adddf3>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	2000      	movs	r0, #0
 8008b34:	49b9      	ldr	r1, [pc, #740]	@ (8008e1c <__ieee754_pow+0x774>)
 8008b36:	f7f7 fdf9 	bl	800072c <__aeabi_ddiv>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b46:	f7f7 fcc7 	bl	80004d8 <__aeabi_dmul>
 8008b4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b4e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008b52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b56:	2300      	movs	r3, #0
 8008b58:	2200      	movs	r2, #0
 8008b5a:	46ab      	mov	fp, r5
 8008b5c:	106d      	asrs	r5, r5, #1
 8008b5e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008b68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b6c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008b70:	4640      	mov	r0, r8
 8008b72:	4649      	mov	r1, r9
 8008b74:	4614      	mov	r4, r2
 8008b76:	461d      	mov	r5, r3
 8008b78:	f7f7 fcae 	bl	80004d8 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b84:	f7f7 faf0 	bl	8000168 <__aeabi_dsub>
 8008b88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f7 fae8 	bl	8000168 <__aeabi_dsub>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4650      	mov	r0, sl
 8008b9e:	4659      	mov	r1, fp
 8008ba0:	f7f7 fae2 	bl	8000168 <__aeabi_dsub>
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	f7f7 fc96 	bl	80004d8 <__aeabi_dmul>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	4639      	mov	r1, r7
 8008bb4:	f7f7 fad8 	bl	8000168 <__aeabi_dsub>
 8008bb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008bbc:	f7f7 fc8c 	bl	80004d8 <__aeabi_dmul>
 8008bc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bc8:	4610      	mov	r0, r2
 8008bca:	4619      	mov	r1, r3
 8008bcc:	f7f7 fc84 	bl	80004d8 <__aeabi_dmul>
 8008bd0:	a37b      	add	r3, pc, #492	@ (adr r3, 8008dc0 <__ieee754_pow+0x718>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	460d      	mov	r5, r1
 8008bda:	f7f7 fc7d 	bl	80004d8 <__aeabi_dmul>
 8008bde:	a37a      	add	r3, pc, #488	@ (adr r3, 8008dc8 <__ieee754_pow+0x720>)
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f7f7 fac2 	bl	800016c <__adddf3>
 8008be8:	4622      	mov	r2, r4
 8008bea:	462b      	mov	r3, r5
 8008bec:	f7f7 fc74 	bl	80004d8 <__aeabi_dmul>
 8008bf0:	a377      	add	r3, pc, #476	@ (adr r3, 8008dd0 <__ieee754_pow+0x728>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fab9 	bl	800016c <__adddf3>
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	f7f7 fc6b 	bl	80004d8 <__aeabi_dmul>
 8008c02:	a375      	add	r3, pc, #468	@ (adr r3, 8008dd8 <__ieee754_pow+0x730>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fab0 	bl	800016c <__adddf3>
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	462b      	mov	r3, r5
 8008c10:	f7f7 fc62 	bl	80004d8 <__aeabi_dmul>
 8008c14:	a372      	add	r3, pc, #456	@ (adr r3, 8008de0 <__ieee754_pow+0x738>)
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	f7f7 faa7 	bl	800016c <__adddf3>
 8008c1e:	4622      	mov	r2, r4
 8008c20:	462b      	mov	r3, r5
 8008c22:	f7f7 fc59 	bl	80004d8 <__aeabi_dmul>
 8008c26:	a370      	add	r3, pc, #448	@ (adr r3, 8008de8 <__ieee754_pow+0x740>)
 8008c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2c:	f7f7 fa9e 	bl	800016c <__adddf3>
 8008c30:	4622      	mov	r2, r4
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	462b      	mov	r3, r5
 8008c38:	4620      	mov	r0, r4
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	f7f7 fc4c 	bl	80004d8 <__aeabi_dmul>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4630      	mov	r0, r6
 8008c46:	4639      	mov	r1, r7
 8008c48:	f7f7 fc46 	bl	80004d8 <__aeabi_dmul>
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	460d      	mov	r5, r1
 8008c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c54:	4642      	mov	r2, r8
 8008c56:	464b      	mov	r3, r9
 8008c58:	f7f7 fa88 	bl	800016c <__adddf3>
 8008c5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c60:	f7f7 fc3a 	bl	80004d8 <__aeabi_dmul>
 8008c64:	4622      	mov	r2, r4
 8008c66:	462b      	mov	r3, r5
 8008c68:	f7f7 fa80 	bl	800016c <__adddf3>
 8008c6c:	4642      	mov	r2, r8
 8008c6e:	4682      	mov	sl, r0
 8008c70:	468b      	mov	fp, r1
 8008c72:	464b      	mov	r3, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	f7f7 fc2e 	bl	80004d8 <__aeabi_dmul>
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	4b68      	ldr	r3, [pc, #416]	@ (8008e20 <__ieee754_pow+0x778>)
 8008c80:	4606      	mov	r6, r0
 8008c82:	460f      	mov	r7, r1
 8008c84:	f7f7 fa72 	bl	800016c <__adddf3>
 8008c88:	4652      	mov	r2, sl
 8008c8a:	465b      	mov	r3, fp
 8008c8c:	f7f7 fa6e 	bl	800016c <__adddf3>
 8008c90:	2400      	movs	r4, #0
 8008c92:	460d      	mov	r5, r1
 8008c94:	4622      	mov	r2, r4
 8008c96:	460b      	mov	r3, r1
 8008c98:	4640      	mov	r0, r8
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	f7f7 fc1c 	bl	80004d8 <__aeabi_dmul>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4680      	mov	r8, r0
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4b5d      	ldr	r3, [pc, #372]	@ (8008e20 <__ieee754_pow+0x778>)
 8008cac:	f7f7 fa5c 	bl	8000168 <__aeabi_dsub>
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	f7f7 fa58 	bl	8000168 <__aeabi_dsub>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4650      	mov	r0, sl
 8008cbe:	4659      	mov	r1, fp
 8008cc0:	f7f7 fa52 	bl	8000168 <__aeabi_dsub>
 8008cc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cc8:	f7f7 fc06 	bl	80004d8 <__aeabi_dmul>
 8008ccc:	4622      	mov	r2, r4
 8008cce:	4606      	mov	r6, r0
 8008cd0:	460f      	mov	r7, r1
 8008cd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cd6:	462b      	mov	r3, r5
 8008cd8:	f7f7 fbfe 	bl	80004d8 <__aeabi_dmul>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	f7f7 fa42 	bl	800016c <__adddf3>
 8008ce8:	2400      	movs	r4, #0
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 fa39 	bl	800016c <__adddf3>
 8008cfa:	a33d      	add	r3, pc, #244	@ (adr r3, 8008df0 <__ieee754_pow+0x748>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	4620      	mov	r0, r4
 8008d02:	460d      	mov	r5, r1
 8008d04:	f7f7 fbe8 	bl	80004d8 <__aeabi_dmul>
 8008d08:	4642      	mov	r2, r8
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d10:	4620      	mov	r0, r4
 8008d12:	4629      	mov	r1, r5
 8008d14:	f7f7 fa28 	bl	8000168 <__aeabi_dsub>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	f7f7 fa22 	bl	8000168 <__aeabi_dsub>
 8008d24:	a334      	add	r3, pc, #208	@ (adr r3, 8008df8 <__ieee754_pow+0x750>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 fbd5 	bl	80004d8 <__aeabi_dmul>
 8008d2e:	a334      	add	r3, pc, #208	@ (adr r3, 8008e00 <__ieee754_pow+0x758>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	4620      	mov	r0, r4
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	f7f7 fbcc 	bl	80004d8 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4630      	mov	r0, r6
 8008d46:	4639      	mov	r1, r7
 8008d48:	f7f7 fa10 	bl	800016c <__adddf3>
 8008d4c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d4e:	4b35      	ldr	r3, [pc, #212]	@ (8008e24 <__ieee754_pow+0x77c>)
 8008d50:	2400      	movs	r4, #0
 8008d52:	4413      	add	r3, r2
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	f7f7 fa08 	bl	800016c <__adddf3>
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d60:	468b      	mov	fp, r1
 8008d62:	f7f7 fb4f 	bl	8000404 <__aeabi_i2d>
 8008d66:	4606      	mov	r6, r0
 8008d68:	460f      	mov	r7, r1
 8008d6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e28 <__ieee754_pow+0x780>)
 8008d6e:	4413      	add	r3, r2
 8008d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d74:	4652      	mov	r2, sl
 8008d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d7a:	465b      	mov	r3, fp
 8008d7c:	f7f7 f9f6 	bl	800016c <__adddf3>
 8008d80:	4642      	mov	r2, r8
 8008d82:	464b      	mov	r3, r9
 8008d84:	f7f7 f9f2 	bl	800016c <__adddf3>
 8008d88:	4632      	mov	r2, r6
 8008d8a:	463b      	mov	r3, r7
 8008d8c:	f7f7 f9ee 	bl	800016c <__adddf3>
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	4620      	mov	r0, r4
 8008d96:	460d      	mov	r5, r1
 8008d98:	f7f7 f9e6 	bl	8000168 <__aeabi_dsub>
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	f7f7 f9e2 	bl	8000168 <__aeabi_dsub>
 8008da4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008da8:	f7f7 f9de 	bl	8000168 <__aeabi_dsub>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4650      	mov	r0, sl
 8008db2:	4659      	mov	r1, fp
 8008db4:	e618      	b.n	80089e8 <__ieee754_pow+0x340>
 8008db6:	2400      	movs	r4, #0
 8008db8:	e68a      	b.n	8008ad0 <__ieee754_pow+0x428>
 8008dba:	2601      	movs	r6, #1
 8008dbc:	e6a0      	b.n	8008b00 <__ieee754_pow+0x458>
 8008dbe:	bf00      	nop
 8008dc0:	4a454eef 	.word	0x4a454eef
 8008dc4:	3fca7e28 	.word	0x3fca7e28
 8008dc8:	93c9db65 	.word	0x93c9db65
 8008dcc:	3fcd864a 	.word	0x3fcd864a
 8008dd0:	a91d4101 	.word	0xa91d4101
 8008dd4:	3fd17460 	.word	0x3fd17460
 8008dd8:	518f264d 	.word	0x518f264d
 8008ddc:	3fd55555 	.word	0x3fd55555
 8008de0:	db6fabff 	.word	0xdb6fabff
 8008de4:	3fdb6db6 	.word	0x3fdb6db6
 8008de8:	33333303 	.word	0x33333303
 8008dec:	3fe33333 	.word	0x3fe33333
 8008df0:	e0000000 	.word	0xe0000000
 8008df4:	3feec709 	.word	0x3feec709
 8008df8:	dc3a03fd 	.word	0xdc3a03fd
 8008dfc:	3feec709 	.word	0x3feec709
 8008e00:	145b01f5 	.word	0x145b01f5
 8008e04:	be3e2fe0 	.word	0xbe3e2fe0
 8008e08:	7ff00000 	.word	0x7ff00000
 8008e0c:	43400000 	.word	0x43400000
 8008e10:	0003988e 	.word	0x0003988e
 8008e14:	000bb679 	.word	0x000bb679
 8008e18:	08009810 	.word	0x08009810
 8008e1c:	3ff00000 	.word	0x3ff00000
 8008e20:	40080000 	.word	0x40080000
 8008e24:	080097f0 	.word	0x080097f0
 8008e28:	08009800 	.word	0x08009800
 8008e2c:	a39a      	add	r3, pc, #616	@ (adr r3, 8009098 <__ieee754_pow+0x9f0>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 f999 	bl	800016c <__adddf3>
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8008e40:	464b      	mov	r3, r9
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7f7 f98f 	bl	8000168 <__aeabi_dsub>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e52:	f7f7 fdd1 	bl	80009f8 <__aeabi_dcmpgt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f47f ae09 	bne.w	8008a6e <__ieee754_pow+0x3c6>
 8008e5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008e60:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008e64:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008e68:	fa43 fa0a 	asr.w	sl, r3, sl
 8008e6c:	44da      	add	sl, fp
 8008e6e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008e72:	489b      	ldr	r0, [pc, #620]	@ (80090e0 <__ieee754_pow+0xa38>)
 8008e74:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008e78:	4108      	asrs	r0, r1
 8008e7a:	ea00 030a 	and.w	r3, r0, sl
 8008e7e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008e82:	f1c1 0114 	rsb	r1, r1, #20
 8008e86:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	fa4a fa01 	asr.w	sl, sl, r1
 8008e90:	f1bb 0f00 	cmp.w	fp, #0
 8008e94:	4649      	mov	r1, r9
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	bfb8      	it	lt
 8008e9c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008ea0:	f7f7 f962 	bl	8000168 <__aeabi_dsub>
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	4689      	mov	r9, r1
 8008ea8:	2400      	movs	r4, #0
 8008eaa:	4632      	mov	r2, r6
 8008eac:	463b      	mov	r3, r7
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 f95b 	bl	800016c <__adddf3>
 8008eb6:	a37a      	add	r3, pc, #488	@ (adr r3, 80090a0 <__ieee754_pow+0x9f8>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	460d      	mov	r5, r1
 8008ec0:	f7f7 fb0a 	bl	80004d8 <__aeabi_dmul>
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	464b      	mov	r3, r9
 8008ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8008ecc:	4620      	mov	r0, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	f7f7 f94a 	bl	8000168 <__aeabi_dsub>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4630      	mov	r0, r6
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 f944 	bl	8000168 <__aeabi_dsub>
 8008ee0:	a371      	add	r3, pc, #452	@ (adr r3, 80090a8 <__ieee754_pow+0xa00>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 faf7 	bl	80004d8 <__aeabi_dmul>
 8008eea:	a371      	add	r3, pc, #452	@ (adr r3, 80090b0 <__ieee754_pow+0xa08>)
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	4680      	mov	r8, r0
 8008ef2:	4689      	mov	r9, r1
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	f7f7 faee 	bl	80004d8 <__aeabi_dmul>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	4640      	mov	r0, r8
 8008f02:	4649      	mov	r1, r9
 8008f04:	f7f7 f932 	bl	800016c <__adddf3>
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f14:	f7f7 f92a 	bl	800016c <__adddf3>
 8008f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	4689      	mov	r9, r1
 8008f20:	f7f7 f922 	bl	8000168 <__aeabi_dsub>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4620      	mov	r0, r4
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7f7 f91c 	bl	8000168 <__aeabi_dsub>
 8008f30:	4642      	mov	r2, r8
 8008f32:	4606      	mov	r6, r0
 8008f34:	460f      	mov	r7, r1
 8008f36:	464b      	mov	r3, r9
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	f7f7 facc 	bl	80004d8 <__aeabi_dmul>
 8008f40:	a35d      	add	r3, pc, #372	@ (adr r3, 80090b8 <__ieee754_pow+0xa10>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	4604      	mov	r4, r0
 8008f48:	460d      	mov	r5, r1
 8008f4a:	f7f7 fac5 	bl	80004d8 <__aeabi_dmul>
 8008f4e:	a35c      	add	r3, pc, #368	@ (adr r3, 80090c0 <__ieee754_pow+0xa18>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7f7 f908 	bl	8000168 <__aeabi_dsub>
 8008f58:	4622      	mov	r2, r4
 8008f5a:	462b      	mov	r3, r5
 8008f5c:	f7f7 fabc 	bl	80004d8 <__aeabi_dmul>
 8008f60:	a359      	add	r3, pc, #356	@ (adr r3, 80090c8 <__ieee754_pow+0xa20>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 f901 	bl	800016c <__adddf3>
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	f7f7 fab3 	bl	80004d8 <__aeabi_dmul>
 8008f72:	a357      	add	r3, pc, #348	@ (adr r3, 80090d0 <__ieee754_pow+0xa28>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 f8f6 	bl	8000168 <__aeabi_dsub>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f7f7 faaa 	bl	80004d8 <__aeabi_dmul>
 8008f84:	a354      	add	r3, pc, #336	@ (adr r3, 80090d8 <__ieee754_pow+0xa30>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f8ef 	bl	800016c <__adddf3>
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 faa1 	bl	80004d8 <__aeabi_dmul>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	f7f7 f8e3 	bl	8000168 <__aeabi_dsub>
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4640      	mov	r0, r8
 8008fac:	4649      	mov	r1, r9
 8008fae:	f7f7 fa93 	bl	80004d8 <__aeabi_dmul>
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	e9cd 0100 	strd	r0, r1, [sp]
 8008fb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 f8d2 	bl	8000168 <__aeabi_dsub>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fcc:	f7f7 fbae 	bl	800072c <__aeabi_ddiv>
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	460d      	mov	r5, r1
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 fa7c 	bl	80004d8 <__aeabi_dmul>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	f7f7 f8c2 	bl	800016c <__adddf3>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4620      	mov	r0, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f7f7 f8ba 	bl	8000168 <__aeabi_dsub>
 8008ff4:	4642      	mov	r2, r8
 8008ff6:	464b      	mov	r3, r9
 8008ff8:	f7f7 f8b6 	bl	8000168 <__aeabi_dsub>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	2000      	movs	r0, #0
 8009002:	4938      	ldr	r1, [pc, #224]	@ (80090e4 <__ieee754_pow+0xa3c>)
 8009004:	f7f7 f8b0 	bl	8000168 <__aeabi_dsub>
 8009008:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800900c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009010:	da2e      	bge.n	8009070 <__ieee754_pow+0x9c8>
 8009012:	4652      	mov	r2, sl
 8009014:	f000 f874 	bl	8009100 <scalbn>
 8009018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800901c:	f7ff bbed 	b.w	80087fa <__ieee754_pow+0x152>
 8009020:	4c31      	ldr	r4, [pc, #196]	@ (80090e8 <__ieee754_pow+0xa40>)
 8009022:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009026:	42a3      	cmp	r3, r4
 8009028:	d91a      	bls.n	8009060 <__ieee754_pow+0x9b8>
 800902a:	4b30      	ldr	r3, [pc, #192]	@ (80090ec <__ieee754_pow+0xa44>)
 800902c:	440b      	add	r3, r1
 800902e:	4303      	orrs	r3, r0
 8009030:	d009      	beq.n	8009046 <__ieee754_pow+0x99e>
 8009032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009036:	2200      	movs	r2, #0
 8009038:	2300      	movs	r3, #0
 800903a:	f7f7 fcbf 	bl	80009bc <__aeabi_dcmplt>
 800903e:	3800      	subs	r0, #0
 8009040:	bf18      	it	ne
 8009042:	2001      	movne	r0, #1
 8009044:	e444      	b.n	80088d0 <__ieee754_pow+0x228>
 8009046:	4642      	mov	r2, r8
 8009048:	464b      	mov	r3, r9
 800904a:	f7f7 f88d 	bl	8000168 <__aeabi_dsub>
 800904e:	4632      	mov	r2, r6
 8009050:	463b      	mov	r3, r7
 8009052:	f7f7 fcc7 	bl	80009e4 <__aeabi_dcmpge>
 8009056:	2800      	cmp	r0, #0
 8009058:	d1eb      	bne.n	8009032 <__ieee754_pow+0x98a>
 800905a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80090f0 <__ieee754_pow+0xa48>
 800905e:	e6fd      	b.n	8008e5c <__ieee754_pow+0x7b4>
 8009060:	469a      	mov	sl, r3
 8009062:	4b24      	ldr	r3, [pc, #144]	@ (80090f4 <__ieee754_pow+0xa4c>)
 8009064:	459a      	cmp	sl, r3
 8009066:	f63f aef9 	bhi.w	8008e5c <__ieee754_pow+0x7b4>
 800906a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800906e:	e71b      	b.n	8008ea8 <__ieee754_pow+0x800>
 8009070:	4621      	mov	r1, r4
 8009072:	e7d1      	b.n	8009018 <__ieee754_pow+0x970>
 8009074:	2000      	movs	r0, #0
 8009076:	491b      	ldr	r1, [pc, #108]	@ (80090e4 <__ieee754_pow+0xa3c>)
 8009078:	f7ff bb34 	b.w	80086e4 <__ieee754_pow+0x3c>
 800907c:	2000      	movs	r0, #0
 800907e:	2100      	movs	r1, #0
 8009080:	f7ff bb30 	b.w	80086e4 <__ieee754_pow+0x3c>
 8009084:	4650      	mov	r0, sl
 8009086:	4659      	mov	r1, fp
 8009088:	f7ff bb2c 	b.w	80086e4 <__ieee754_pow+0x3c>
 800908c:	460c      	mov	r4, r1
 800908e:	f7ff bb79 	b.w	8008784 <__ieee754_pow+0xdc>
 8009092:	2400      	movs	r4, #0
 8009094:	f7ff bb64 	b.w	8008760 <__ieee754_pow+0xb8>
 8009098:	652b82fe 	.word	0x652b82fe
 800909c:	3c971547 	.word	0x3c971547
 80090a0:	00000000 	.word	0x00000000
 80090a4:	3fe62e43 	.word	0x3fe62e43
 80090a8:	fefa39ef 	.word	0xfefa39ef
 80090ac:	3fe62e42 	.word	0x3fe62e42
 80090b0:	0ca86c39 	.word	0x0ca86c39
 80090b4:	be205c61 	.word	0xbe205c61
 80090b8:	72bea4d0 	.word	0x72bea4d0
 80090bc:	3e663769 	.word	0x3e663769
 80090c0:	c5d26bf1 	.word	0xc5d26bf1
 80090c4:	3ebbbd41 	.word	0x3ebbbd41
 80090c8:	af25de2c 	.word	0xaf25de2c
 80090cc:	3f11566a 	.word	0x3f11566a
 80090d0:	16bebd93 	.word	0x16bebd93
 80090d4:	3f66c16c 	.word	0x3f66c16c
 80090d8:	5555553e 	.word	0x5555553e
 80090dc:	3fc55555 	.word	0x3fc55555
 80090e0:	fff00000 	.word	0xfff00000
 80090e4:	3ff00000 	.word	0x3ff00000
 80090e8:	4090cbff 	.word	0x4090cbff
 80090ec:	3f6f3400 	.word	0x3f6f3400
 80090f0:	4090cc00 	.word	0x4090cc00
 80090f4:	3fe00000 	.word	0x3fe00000

080090f8 <fabs>:
 80090f8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090fc:	4619      	mov	r1, r3
 80090fe:	4770      	bx	lr

08009100 <scalbn>:
 8009100:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009104:	4616      	mov	r6, r2
 8009106:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800910a:	4683      	mov	fp, r0
 800910c:	468c      	mov	ip, r1
 800910e:	460b      	mov	r3, r1
 8009110:	b982      	cbnz	r2, 8009134 <scalbn+0x34>
 8009112:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009116:	4303      	orrs	r3, r0
 8009118:	d039      	beq.n	800918e <scalbn+0x8e>
 800911a:	4b2f      	ldr	r3, [pc, #188]	@ (80091d8 <scalbn+0xd8>)
 800911c:	2200      	movs	r2, #0
 800911e:	f7f7 f9db 	bl	80004d8 <__aeabi_dmul>
 8009122:	4b2e      	ldr	r3, [pc, #184]	@ (80091dc <scalbn+0xdc>)
 8009124:	4683      	mov	fp, r0
 8009126:	429e      	cmp	r6, r3
 8009128:	468c      	mov	ip, r1
 800912a:	da0d      	bge.n	8009148 <scalbn+0x48>
 800912c:	a326      	add	r3, pc, #152	@ (adr r3, 80091c8 <scalbn+0xc8>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	e01b      	b.n	800916c <scalbn+0x6c>
 8009134:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009138:	42ba      	cmp	r2, r7
 800913a:	d109      	bne.n	8009150 <scalbn+0x50>
 800913c:	4602      	mov	r2, r0
 800913e:	f7f7 f815 	bl	800016c <__adddf3>
 8009142:	4683      	mov	fp, r0
 8009144:	468c      	mov	ip, r1
 8009146:	e022      	b.n	800918e <scalbn+0x8e>
 8009148:	460b      	mov	r3, r1
 800914a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800914e:	3a36      	subs	r2, #54	@ 0x36
 8009150:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009154:	428e      	cmp	r6, r1
 8009156:	dd0c      	ble.n	8009172 <scalbn+0x72>
 8009158:	a31d      	add	r3, pc, #116	@ (adr r3, 80091d0 <scalbn+0xd0>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	461c      	mov	r4, r3
 8009160:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8009164:	f361 74df 	bfi	r4, r1, #31, #1
 8009168:	4621      	mov	r1, r4
 800916a:	481d      	ldr	r0, [pc, #116]	@ (80091e0 <scalbn+0xe0>)
 800916c:	f7f7 f9b4 	bl	80004d8 <__aeabi_dmul>
 8009170:	e7e7      	b.n	8009142 <scalbn+0x42>
 8009172:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009176:	4432      	add	r2, r6
 8009178:	428a      	cmp	r2, r1
 800917a:	dced      	bgt.n	8009158 <scalbn+0x58>
 800917c:	2a00      	cmp	r2, #0
 800917e:	dd0a      	ble.n	8009196 <scalbn+0x96>
 8009180:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009184:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009188:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800918c:	46ac      	mov	ip, r5
 800918e:	4658      	mov	r0, fp
 8009190:	4661      	mov	r1, ip
 8009192:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8009196:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800919a:	da09      	bge.n	80091b0 <scalbn+0xb0>
 800919c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80091a0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80091a4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80091a8:	480e      	ldr	r0, [pc, #56]	@ (80091e4 <scalbn+0xe4>)
 80091aa:	f041 011f 	orr.w	r1, r1, #31
 80091ae:	e7bd      	b.n	800912c <scalbn+0x2c>
 80091b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80091b4:	3236      	adds	r2, #54	@ 0x36
 80091b6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80091ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80091be:	4658      	mov	r0, fp
 80091c0:	4629      	mov	r1, r5
 80091c2:	2200      	movs	r2, #0
 80091c4:	4b08      	ldr	r3, [pc, #32]	@ (80091e8 <scalbn+0xe8>)
 80091c6:	e7d1      	b.n	800916c <scalbn+0x6c>
 80091c8:	c2f8f359 	.word	0xc2f8f359
 80091cc:	01a56e1f 	.word	0x01a56e1f
 80091d0:	8800759c 	.word	0x8800759c
 80091d4:	7e37e43c 	.word	0x7e37e43c
 80091d8:	43500000 	.word	0x43500000
 80091dc:	ffff3cb0 	.word	0xffff3cb0
 80091e0:	8800759c 	.word	0x8800759c
 80091e4:	c2f8f359 	.word	0xc2f8f359
 80091e8:	3c900000 	.word	0x3c900000

080091ec <with_errno>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4604      	mov	r4, r0
 80091f0:	460d      	mov	r5, r1
 80091f2:	4616      	mov	r6, r2
 80091f4:	f7fa fe4e 	bl	8003e94 <__errno>
 80091f8:	4629      	mov	r1, r5
 80091fa:	6006      	str	r6, [r0, #0]
 80091fc:	4620      	mov	r0, r4
 80091fe:	bd70      	pop	{r4, r5, r6, pc}

08009200 <xflow>:
 8009200:	b513      	push	{r0, r1, r4, lr}
 8009202:	4604      	mov	r4, r0
 8009204:	4619      	mov	r1, r3
 8009206:	4610      	mov	r0, r2
 8009208:	b10c      	cbz	r4, 800920e <xflow+0xe>
 800920a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800920e:	e9cd 2300 	strd	r2, r3, [sp]
 8009212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009216:	f7f7 f95f 	bl	80004d8 <__aeabi_dmul>
 800921a:	2222      	movs	r2, #34	@ 0x22
 800921c:	b002      	add	sp, #8
 800921e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009222:	f7ff bfe3 	b.w	80091ec <with_errno>

08009226 <__math_uflow>:
 8009226:	2200      	movs	r2, #0
 8009228:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800922c:	f7ff bfe8 	b.w	8009200 <xflow>

08009230 <__math_oflow>:
 8009230:	2200      	movs	r2, #0
 8009232:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8009236:	f7ff bfe3 	b.w	8009200 <xflow>
	...

0800923c <__ieee754_sqrt>:
 800923c:	4a67      	ldr	r2, [pc, #412]	@ (80093dc <__ieee754_sqrt+0x1a0>)
 800923e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009242:	438a      	bics	r2, r1
 8009244:	4606      	mov	r6, r0
 8009246:	460f      	mov	r7, r1
 8009248:	460b      	mov	r3, r1
 800924a:	4604      	mov	r4, r0
 800924c:	d10e      	bne.n	800926c <__ieee754_sqrt+0x30>
 800924e:	4602      	mov	r2, r0
 8009250:	f7f7 f942 	bl	80004d8 <__aeabi_dmul>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4630      	mov	r0, r6
 800925a:	4639      	mov	r1, r7
 800925c:	f7f6 ff86 	bl	800016c <__adddf3>
 8009260:	4606      	mov	r6, r0
 8009262:	460f      	mov	r7, r1
 8009264:	4630      	mov	r0, r6
 8009266:	4639      	mov	r1, r7
 8009268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	2900      	cmp	r1, #0
 800926e:	dc0c      	bgt.n	800928a <__ieee754_sqrt+0x4e>
 8009270:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009274:	4302      	orrs	r2, r0
 8009276:	d0f5      	beq.n	8009264 <__ieee754_sqrt+0x28>
 8009278:	b189      	cbz	r1, 800929e <__ieee754_sqrt+0x62>
 800927a:	4602      	mov	r2, r0
 800927c:	f7f6 ff74 	bl	8000168 <__aeabi_dsub>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	f7f7 fa52 	bl	800072c <__aeabi_ddiv>
 8009288:	e7ea      	b.n	8009260 <__ieee754_sqrt+0x24>
 800928a:	150a      	asrs	r2, r1, #20
 800928c:	d115      	bne.n	80092ba <__ieee754_sqrt+0x7e>
 800928e:	2100      	movs	r1, #0
 8009290:	e009      	b.n	80092a6 <__ieee754_sqrt+0x6a>
 8009292:	0ae3      	lsrs	r3, r4, #11
 8009294:	3a15      	subs	r2, #21
 8009296:	0564      	lsls	r4, r4, #21
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0fa      	beq.n	8009292 <__ieee754_sqrt+0x56>
 800929c:	e7f7      	b.n	800928e <__ieee754_sqrt+0x52>
 800929e:	460a      	mov	r2, r1
 80092a0:	e7fa      	b.n	8009298 <__ieee754_sqrt+0x5c>
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	3101      	adds	r1, #1
 80092a6:	02d8      	lsls	r0, r3, #11
 80092a8:	d5fb      	bpl.n	80092a2 <__ieee754_sqrt+0x66>
 80092aa:	1e48      	subs	r0, r1, #1
 80092ac:	1a12      	subs	r2, r2, r0
 80092ae:	f1c1 0020 	rsb	r0, r1, #32
 80092b2:	fa24 f000 	lsr.w	r0, r4, r0
 80092b6:	4303      	orrs	r3, r0
 80092b8:	408c      	lsls	r4, r1
 80092ba:	2600      	movs	r6, #0
 80092bc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80092c0:	2116      	movs	r1, #22
 80092c2:	07d2      	lsls	r2, r2, #31
 80092c4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80092c8:	4632      	mov	r2, r6
 80092ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092d2:	bf5c      	itt	pl
 80092d4:	005b      	lslpl	r3, r3, #1
 80092d6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80092da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092de:	bf58      	it	pl
 80092e0:	0064      	lslpl	r4, r4, #1
 80092e2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80092e6:	107f      	asrs	r7, r7, #1
 80092e8:	0064      	lsls	r4, r4, #1
 80092ea:	1815      	adds	r5, r2, r0
 80092ec:	429d      	cmp	r5, r3
 80092ee:	bfde      	ittt	le
 80092f0:	182a      	addle	r2, r5, r0
 80092f2:	1b5b      	suble	r3, r3, r5
 80092f4:	1836      	addle	r6, r6, r0
 80092f6:	0fe5      	lsrs	r5, r4, #31
 80092f8:	3901      	subs	r1, #1
 80092fa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80092fe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009302:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009306:	d1f0      	bne.n	80092ea <__ieee754_sqrt+0xae>
 8009308:	460d      	mov	r5, r1
 800930a:	f04f 0a20 	mov.w	sl, #32
 800930e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009312:	429a      	cmp	r2, r3
 8009314:	eb01 0c00 	add.w	ip, r1, r0
 8009318:	db02      	blt.n	8009320 <__ieee754_sqrt+0xe4>
 800931a:	d113      	bne.n	8009344 <__ieee754_sqrt+0x108>
 800931c:	45a4      	cmp	ip, r4
 800931e:	d811      	bhi.n	8009344 <__ieee754_sqrt+0x108>
 8009320:	f1bc 0f00 	cmp.w	ip, #0
 8009324:	eb0c 0100 	add.w	r1, ip, r0
 8009328:	da42      	bge.n	80093b0 <__ieee754_sqrt+0x174>
 800932a:	2900      	cmp	r1, #0
 800932c:	db40      	blt.n	80093b0 <__ieee754_sqrt+0x174>
 800932e:	f102 0e01 	add.w	lr, r2, #1
 8009332:	1a9b      	subs	r3, r3, r2
 8009334:	4672      	mov	r2, lr
 8009336:	45a4      	cmp	ip, r4
 8009338:	bf88      	it	hi
 800933a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800933e:	eba4 040c 	sub.w	r4, r4, ip
 8009342:	4405      	add	r5, r0
 8009344:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009348:	f1ba 0a01 	subs.w	sl, sl, #1
 800934c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009350:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009354:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009358:	d1db      	bne.n	8009312 <__ieee754_sqrt+0xd6>
 800935a:	431c      	orrs	r4, r3
 800935c:	d01a      	beq.n	8009394 <__ieee754_sqrt+0x158>
 800935e:	4c20      	ldr	r4, [pc, #128]	@ (80093e0 <__ieee754_sqrt+0x1a4>)
 8009360:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80093e4 <__ieee754_sqrt+0x1a8>
 8009364:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009368:	e9db 2300 	ldrd	r2, r3, [fp]
 800936c:	f7f6 fefc 	bl	8000168 <__aeabi_dsub>
 8009370:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4640      	mov	r0, r8
 800937a:	4649      	mov	r1, r9
 800937c:	f7f7 fb28 	bl	80009d0 <__aeabi_dcmple>
 8009380:	b140      	cbz	r0, 8009394 <__ieee754_sqrt+0x158>
 8009382:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009386:	e9db 2300 	ldrd	r2, r3, [fp]
 800938a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800938e:	d111      	bne.n	80093b4 <__ieee754_sqrt+0x178>
 8009390:	4655      	mov	r5, sl
 8009392:	3601      	adds	r6, #1
 8009394:	1072      	asrs	r2, r6, #1
 8009396:	086b      	lsrs	r3, r5, #1
 8009398:	07f1      	lsls	r1, r6, #31
 800939a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800939e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80093a2:	bf48      	it	mi
 80093a4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80093a8:	4618      	mov	r0, r3
 80093aa:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80093ae:	e757      	b.n	8009260 <__ieee754_sqrt+0x24>
 80093b0:	4696      	mov	lr, r2
 80093b2:	e7be      	b.n	8009332 <__ieee754_sqrt+0xf6>
 80093b4:	f7f6 feda 	bl	800016c <__adddf3>
 80093b8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4640      	mov	r0, r8
 80093c2:	4649      	mov	r1, r9
 80093c4:	f7f7 fafa 	bl	80009bc <__aeabi_dcmplt>
 80093c8:	b120      	cbz	r0, 80093d4 <__ieee754_sqrt+0x198>
 80093ca:	1ca8      	adds	r0, r5, #2
 80093cc:	bf08      	it	eq
 80093ce:	3601      	addeq	r6, #1
 80093d0:	3502      	adds	r5, #2
 80093d2:	e7df      	b.n	8009394 <__ieee754_sqrt+0x158>
 80093d4:	1c6b      	adds	r3, r5, #1
 80093d6:	f023 0501 	bic.w	r5, r3, #1
 80093da:	e7db      	b.n	8009394 <__ieee754_sqrt+0x158>
 80093dc:	7ff00000 	.word	0x7ff00000
 80093e0:	200006c8 	.word	0x200006c8
 80093e4:	200006c0 	.word	0x200006c0

080093e8 <_init>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	bf00      	nop
 80093ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ee:	bc08      	pop	{r3}
 80093f0:	469e      	mov	lr, r3
 80093f2:	4770      	bx	lr

080093f4 <_fini>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr
